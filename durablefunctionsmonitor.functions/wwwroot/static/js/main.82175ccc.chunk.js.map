{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/ErrorMessage.tsx","components/MainMenu.tsx","components/Orchestrations.tsx","components/OrchestrationDetails.tsx","components/Main.tsx","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","ErrorMessage_ErrorMessage","_super","ErrorMessage","tslib_es6","prototype","render","this","props","react","Snackbar","className","anchorOrigin","vertical","horizontal","open","errorMessage","autoHideDuration","onClose","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","color","onClick","Close_default","mobx_module","bound","mobx_react_module","MainMenu_MainMenu","MainMenu","edge","Menu_default","evt","menuAnchorElement","currentTarget","Menu","anchorEl","keepMounted","undefined","MenuItem","showConnectionParamsDialog","Dialog","connectionParamsDialogOpen","DialogTitle","DialogContent","inProgress","LinearProgress","Box","height","DialogContentText","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","connectionString","DialogActions","Button","saveConnectionParams","Orchestrations_Orchestrations","Orchestrations","_this","apply","arguments","_columns","name","title","componentDidMount","loadOrchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","type","InputLabelProps","shrink","formatDateTime","timeFrom","getDateTimeValue","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","width","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","placeholder","timeTill","applyTimeTill","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","applyFilterValue","Typography","style","flex","autoRefresh","size","reloadOrchestrations","Refresh_default","FormHelperText","orchestrations","length","renderTable","renderEmptyTable","Table","TableHead","TableRow","TableCell","TableSortLabel","active","orderBy","direction","orderByDirection","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toLowerCase","Link","href","UriSuffix","createdTime","lastUpdatedTime","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","event","preventDefault","Date","slice","dt","toISOString","toJsonString","o","s","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","loadDetails","renderDetails","details","historyEvents","renderDialogs","orchestrationId","rewind","terminate","eventName","rows","eventData","raiseEvent","Grid","container","item","xs","sm","md","zeroMinWidth","InputProps","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","logo","Main_Main","Main","react_router_dom","basename","AppBar","position","src","Breadcrumbs","orchestrationDetailsState","mainMenuState","react_router","path","exact","component","orchestrationsState","params","MainMenuState_MainMenuState","MainMenuState","_inProgress","Object","defineProperty","axios_default","get","BackendBaseUri","response","data","_oldConnectionString","err","finally","put","alert","reload","OrchestrationsState_OrchestrationsState","OrchestrationsState","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_noMorePagesToLoad","_pageSize","_oldFilterValue","setDate","getDate","_timeFrom","val","_timeTill","_oldTimeFrom","_oldTimeTill","isAutoRefresh","skip","filterClause","StartsWith","Contains","orderByClause","uri","OrchestrationsState_BackendBaseUri","_a","push","_autoRefreshToken","clearTimeout","setTimeout","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_sendEventDialogOpen","_orchestrationId","OrchestrationDetailsState_BackendBaseUri","post","requestBody","parse","appState","react_dom","getElementById","URL","toString","origin","fetch","status","headers","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qLCWlCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,uBChFrDC,gRCOZC,UAAA,SAAAC,GAAA,SAAAC,mDA0CA,OA1CkCC,EAAA,EAAAD,EAAAD,GAE9BC,EAAAE,UAAAC,OAAA,WACI,IAAMZ,EAAQa,KAAKC,MAAMd,MAEzB,OAEIe,EAAA,cAACC,EAAA,EAAQ,CACLC,UAAU,iBACVC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,OAAQrB,EAAMsB,aACdC,iBAAkB,IAClBC,QAASX,KAAKY,aAEdV,EAAA,cAACW,EAAA,EAAe,CACZT,UAAU,yBACVU,QACIZ,EAAA,0BACIA,EAAA,cAACa,EAAAC,EAAS,CAACZ,UAAU,eACpBjB,EAAMsB,cAGfQ,OAAQ,CACJf,EAAA,cAACgB,EAAA,EAAU,CACPC,IAAI,QAAOC,aACA,QACXC,MAAM,UACNC,QAAStB,KAAKY,aAEdV,EAAA,cAACqB,EAAAP,EAAS,YAU1BpB,EAAAE,UAAAc,YAAR,WACIZ,KAAKC,MAAMd,MAAMsB,aAAe,IADpCZ,EAAA,GADC2B,EAAA,EAAOC,uCAtCC7B,EAAYC,EAAA,GADxB6B,EAAA,GACY9B,GAAb,CAAkCM,EAAA,YCGlCyB,EAAA,SAAAhC,GAAA,SAAAiC,mDA4EA,OA5E8B/B,EAAA,EAAA+B,EAAAjC,GAE1BiC,EAAA9B,UAAAC,OAAA,WACI,IAAMZ,EAAQa,KAAKC,MAAMd,MAEzB,OACIe,EAAA,yBAEIA,EAAA,cAACgB,EAAA,EAAU,CAACW,KAAK,QAAQR,MAAM,WAC3BnB,EAAA,cAAC4B,EAAAd,EAAQ,CAACM,QAAS,SAAAS,GAAO,OAAA5C,EAAM6C,kBAAoBD,EAAIE,kBAG5D/B,EAAA,cAACgC,EAAA,EAAI,CACDC,SAAUhD,EAAM6C,kBAChBI,aAAW,EACX5B,OAAQrB,EAAM6C,kBACdrB,QAAS,WAAM,OAAAxB,EAAM6C,uBAAoBK,IAEzCnC,EAAA,cAACoC,EAAA,EAAQ,CAAChB,QAAS,WAAM,OAAAnC,EAAMoD,+BAA4B,uCAG/DrC,EAAA,cAACsC,EAAA,EAAM,CACHhC,KAAMrB,EAAMsD,2BACZ9B,QAAS,WAAM,OAAAxB,EAAMsD,4BAA6B,IAElDvC,EAAA,cAACwC,EAAA,EAAW,0CACZxC,EAAA,cAACyC,EAAA,EAAa,KAETxD,EAAMyD,WAAc1C,EAAA,cAAC2C,EAAA,EAAc,MAAQ3C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,IAEzD7C,EAAA,cAAC8C,EAAA,EAAiB,0FAIlB9C,EAAA,cAAC+C,EAAA,EAAS,CACNC,WAAS,EACTC,OAAO,QACPC,MAAM,WACNC,WAAS,EACTC,SAAUnE,EAAMyD,WAChBW,MAAOpE,EAAMqE,QACbC,SAAU,SAAC1B,GAAQ,OAAA5C,EAAMqE,QAAUzB,EAAI2B,OAAOH,SAGlDrD,EAAA,cAAC+C,EAAA,EAAS,CACNC,WAAS,EACTC,OAAO,QACPC,MAAM,kCACNC,WAAS,EACTC,SAAUnE,EAAMyD,WAChBW,MAAOpE,EAAMwE,iBACbF,SAAU,SAAC1B,GAAQ,OAAA5C,EAAMwE,iBAAmB5B,EAAI2B,OAAOH,SAG3DrD,EAAA,cAACR,EAAY,CAACP,MAAOA,KAGzBe,EAAA,cAAC0D,EAAA,EAAa,KACV1D,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAMsD,4BAA6B,GAAOpB,MAAM,WAAS,UAGhFnB,EAAA,cAAC2D,EAAA,EAAM,CACHvC,QAAS,WAAM,OAAAnC,EAAM2E,wBACrBR,UAAWnE,EAAMqE,UAAYrE,EAAMwE,kBAAoBxE,EAAMyD,WAC7DvB,MAAM,aAAW,YAhEhCO,EAAQ/B,EAAA,GADpB6B,EAAA,GACYE,GAAb,CAA8B1B,EAAA,wICK9B6D,WAAA,SAAApE,GADA,SAAAqE,IAAA,IAAAC,EAAA,OAAAtE,KAAAuE,MAAAlE,KAAAmE,YAAAnE,YA4JqBiE,EAAAG,SAAW,CACxB,CAAEC,KAAM,aAAcC,MAAO,cAC7B,CAAED,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,cAAeC,MAAO,eAC9B,CAAED,KAAM,kBAAmBC,MAAO,mBAClC,CAAED,KAAM,gBAAiBC,MAAO,iBAChC,CAAED,KAAM,QAASC,MAAO,SACxB,CAAED,KAAM,SAAUC,MAAO,aA2GjC,OA7QoCzE,EAAA,EAAAmE,EAAArE,GAEhCqE,EAAAlE,UAAAyE,kBAAA,eAAAN,EAAAjE,KAGIA,KAAKC,MAAMd,MAAMqF,qBAGjBC,SAASC,iBAAiB,SAAU,SAAC3C,GAEjC,IAAM4C,EAAoB5C,EAAI2B,OAAoBiB,iBAClD,GAAKA,EAAL,CAIkBA,EAAiBC,aAAexG,OAAOyG,YAAcF,EAAiBG,UAC7D,KAGvBb,EAAKhE,MAAMd,MAAMqF,yBAK7BR,EAAAlE,UAAAC,OAAA,eAAAkE,EAAAjE,KACUb,EAAQa,KAAKC,MAAMd,MAEzB,OACIe,EAAA,yBACKf,EAAMyD,WAAc1C,EAAA,cAAC2C,EAAA,EAAc,MAAQ3C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,IAEzD7C,EAAA,cAAC6E,EAAA,EAAO,CAACC,QAAQ,QAAQ5E,UAAU,eAE/BF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,sBACN6B,KAAK,iBACLC,gBAAiB,CAAEC,QAAQ,GAC3B5B,MAAOvD,KAAKoF,eAAejG,EAAMkG,UACjC5B,SAAU,SAAC1B,GAAU5C,EAAMkG,SAAWpB,EAAKqB,iBAAiBvD,IAC5DwD,OAAQ,WAAM,OAAApG,EAAMqG,iBACpBC,WAAYzF,KAAK0F,iBAGrBxF,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC0F,EAAA,EAAW,KACR1F,EAAA,cAAC2F,EAAA,EAAU,CAACzF,UAAU,aAAa0F,QAAQ,gBAAgBX,QAAM,WACjEjF,EAAA,cAAC6F,EAAA,EAAQ,CACLC,GAAG,gBACH5F,UAAU,gBACV6F,QAAS9G,EAAM+G,gBACfzC,SAAU,SAAC1B,GAAQ,OAAA5C,EAAM+G,gBAAkBnE,EAAI2B,OAAOuC,YAI9D/F,EAAA,cAAC+C,EAAA,EAAS,CACN7C,UAAU,aACVgD,MAAM,QACN+C,YAAY,QACZjB,gBAAiB,CAAEC,QAAQ,GAC3BF,KAAM9F,EAAM+G,gBAAkB,iBAAmB,OACjD5C,UAAWnE,EAAM+G,gBACjB3C,MAAOpE,EAAM+G,gBAAkBlG,KAAKoF,eAAejG,EAAMiH,UAAY,GACrE3C,SAAU,SAAC1B,GAAU5C,EAAMiH,SAAWnC,EAAKqB,iBAAiBvD,IAC5DwD,OAAQ,WAAM,OAAApG,EAAMkH,iBACpBZ,WAAYzF,KAAK0F,iBAGrBxF,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC0F,EAAA,EAAW,KACR1F,EAAA,cAAC2F,EAAA,EAAU,CAACC,QAAQ,0BAAwB,mBAC5C5F,EAAA,cAACoG,EAAA,EAAM,CACHlG,UAAU,iBACVmD,MAAOpE,EAAMoH,eACb9C,SAAU,SAAC1B,GAAQ,OAAA5C,EAAMoH,eAAiBxE,EAAI2B,OAAOH,OACrDiD,WAAY,CAAER,GAAI,2BAElB9F,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAM,KAAG,kBAClBvD,KAAKoE,SAASqC,IAAI,SAAAC,GACf,OAAQxG,EAAA,cAACoC,EAAA,EAAQ,CAACnB,IAAKuF,EAAIrC,KAAMd,MAAOmD,EAAIrC,MAAOqC,EAAIpC,WAMnEpE,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC0F,EAAA,EAAW,KACR1F,EAAA,cAAC2F,EAAA,EAAU,CAACC,QAAQ,0BAAwB,mBAC5C5F,EAAA,cAACoG,EAAA,EAAM,CACHlG,UAAU,iBACVmD,MAAOpE,EAAMwH,eACblD,SAAU,SAAC1B,GAAQ,OAAA5C,EAAMwH,eAAiB5E,EAAI2B,OAAOH,OACrDiD,WAAY,CAAER,GAAI,2BAClB9F,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,UAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,eAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,cAI1BrD,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,eACN8B,gBAAiB,CAAEC,QAAQ,GAC3BgB,YAAY,wBACZ7C,SAAmC,MAAzBnE,EAAMoH,eAChBhD,MAAOpE,EAAMyH,YACbnD,SAAU,SAAC1B,GAAQ,OAAA5C,EAAMyH,YAAc7E,EAAI2B,OAAOH,OAClDgC,OAAQ,WAAM,OAAApG,EAAM0H,oBACpBpB,WAAYzF,KAAK0F,iBAGrBxF,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC4G,EAAA,EAAU,CAACC,MAAO,CAAEC,KAAM,KAE3B9G,EAAA,cAAC0F,EAAA,EAAW,KACR1F,EAAA,cAAC2F,EAAA,EAAU,CAACC,QAAQ,uBAAqB,gBACzC5F,EAAA,cAACoG,EAAA,EAAM,CACHlG,UAAU,iBACVoG,WAAY,CAAER,GAAI,uBAClBzC,MAAOpE,EAAM8H,YACbxD,SAAU,SAAC1B,GAAQ,OAAA5C,EAAM8H,YAAclF,EAAI2B,OAAOH,QAElDrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,SAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,gBAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,gBAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,IAAE,mBAI3BrD,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC2D,EAAA,EAAM,CAACmB,QAAQ,WAAW3D,MAAM,UAAU6F,KAAK,QAAQ5F,QAAS,WAAM,OAAAnC,EAAMgI,yBACzEjH,EAAA,cAACkH,EAAApG,EAAW,QAKpBd,EAAA,cAACmH,EAAA,EAAc,CAACjH,UAAU,qBACrBjB,EAAMmI,eAAeC,uBAGvBpI,EAAMmI,eAAeC,OAASvH,KAAKwH,YAAYrI,GAASa,KAAKyH,mBAE/DtI,EAAMyD,YAAgBzD,EAAMmI,eAAeC,OAAUrH,EAAA,cAAC2C,EAAA,EAAc,MAAQ3C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,IAC1F7C,EAAA,cAAC6E,EAAA,EAAO,CAACC,QAAQ,UAEjB9E,EAAA,cAACR,EAAY,CAACP,MAAOa,KAAKC,MAAMd,UAepC6E,EAAAlE,UAAA2H,iBAAR,WACI,OACIvH,EAAA,cAAC4G,EAAA,EAAU,CAAC9B,QAAQ,KAAK5E,UAAU,2BAAyB,uBAM5D4D,EAAAlE,UAAA0H,YAAR,SAAoBrI,GAEhB,OACIe,EAAA,cAACwH,EAAA,EAAK,CAACR,KAAK,SACRhH,EAAA,cAACyH,EAAA,EAAS,KACNzH,EAAA,cAAC0H,EAAA,EAAQ,KACJ5H,KAAKoE,SAASqC,IAAI,SAAAC,GACf,OACIxG,EAAA,cAAC2H,EAAA,EAAS,CAAC1G,IAAKuF,EAAIrC,MAChBnE,EAAA,cAAC4H,EAAA,EAAc,CACXC,OAAQ5I,EAAM6I,UAAYtB,EAAIrC,KAC9B4D,UAAW9I,EAAM+I,iBACjB5G,QAAS,WAAM,OAAAnC,EAAM6I,QAAUtB,EAAIrC,OAElCqC,EAAIpC,YAO7BpE,EAAA,cAACiI,EAAA,EAAS,KACLhJ,EAAMmI,eAAeb,IAAI,SAAA2B,GAEtB,IAAMC,EAAY,CAAEC,cAAe,OACnC,OACIpI,EAAA,cAAC0H,EAAA,EAAQ,CACLzG,IAAKiH,EAAcG,WACnBnI,UAAW,kBAAoBgI,EAAcI,cAAcC,eAE3DvI,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,mBAAmB2G,MAAOsB,GAC3CnI,EAAA,cAACwI,EAAA,EAAI,CAACC,KAASC,+BAA4BR,EAAcG,WAAc7E,OAAO,UACzE0E,EAAcG,aAGvBrI,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,YAAY2G,MAAOsB,GACnCD,EAAc/D,MAEnBnE,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,gBAAgB2G,MAAOsB,GACvCD,EAAcS,aAEnB3I,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,gBAAgB2G,MAAOsB,GACvCD,EAAcU,iBAEnB5I,EAAA,cAAC2H,EAAA,EAAS,CAACd,MAAOsB,GACbD,EAAcI,eAEnBtI,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,iBAAiB2G,MAAOsB,GACzCnI,EAAA,cAAC6I,EAAA,EAAS,CACN3I,UAAU,uBACV4I,WAAS,EAAC3F,WAAS,EAAC4F,QAAS,EAAGC,UAAQ,EACxC3F,MAAO4F,KAAKC,UAAUhB,EAAciB,UAG5CnJ,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,iBAAiB2G,MAAOsB,GACzCnI,EAAA,cAAC6I,EAAA,EAAS,CACN3I,UAAU,uBACV4I,WAAS,EAAC3F,WAAS,EAAC4F,QAAS,EAAGC,UAAQ,EACxC3F,MAAO4F,KAAKC,UAAUhB,EAAckB,iBAYhEtF,EAAAlE,UAAA4F,eAAR,SAAuB6D,GACD,UAAdA,EAAMpI,MAENoI,EAAMC,iBAENxJ,KAAKC,MAAMd,MAAMgI,yBAIjBnD,EAAAlE,UAAAwF,iBAAR,SAAyBvD,GACrB,OAAO,IAAI0H,KAAK1H,EAAI2B,OAAOH,MAAMmG,MAAM,EAAG,IAAM,SAG5C1F,EAAAlE,UAAAsF,eAAR,SAAuBuE,GACnB,OAAOA,EAAGC,cAAcF,MAAM,EAAG,KAG7B1F,EAAAlE,UAAA+J,aAAR,SAAqBC,GAEjB,IAAKA,EACD,MAAO,OAGX,IAAMC,EAAIZ,KAAKC,UAAUU,GACzB,OAAOC,EAAExC,OAAS,IAAMwC,EAAEL,MAAM,EAAG,KAAO,MAAQK,GAxBtDlK,EAAA,GADC2B,EAAA,EAAOC,0CAlPCuC,EAAcnE,EAAA,GAD1B6B,EAAA,GACYsC,GAAb,CAAoC9D,EAAA,sBCHpC8J,WAAA,SAAArK,GADA,SAAAsK,IAAA,IAAAhG,EAAA,OAAAtE,KAAAuE,MAAAlE,KAAAmE,YAAAnE,YAyJqBiE,EAAAG,SAAW,CACxB,CAAEC,KAAM,YAAaC,MAAO,aAC5B,CAAED,KAAM,YAAaC,MAAO,aAC5B,CAAED,KAAM,eAAgBC,MAAO,QAC/B,CAAED,KAAM,gBAAiBC,MAAO,iBAChC,CAAED,KAAM,SAAUC,MAAO,UACzB,CAAED,KAAM,UAAWC,MAAO,cAwIlC,OAtS0CzE,EAAA,EAAAoK,EAAAtK,GAEtCsK,EAAAnK,UAAAC,OAAA,WACI,IAAMZ,EAAQa,KAAKC,MAAMd,MAEzB,OAAQe,EAAA,yBACHf,EAAMyD,WAAc1C,EAAA,cAAC2C,EAAA,EAAc,MAAQ3C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,IAEzD7C,EAAA,cAAC6E,EAAA,EAAO,CAACC,QAAQ,QAAQ5E,UAAU,eAE/BF,EAAA,cAAC2D,EAAA,EAAM,CAACmB,QAAQ,WAAW3D,MAAM,UAAU6F,KAAK,QAAQ5F,QAAS,WAAM,OAAAnC,EAAM+K,wBAAyB,IAAI,UAG1GhK,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KACZzF,EAAA,cAAC2D,EAAA,EAAM,CAACmB,QAAQ,WAAW3D,MAAM,UAAU6F,KAAK,QAAQ5F,QAAS,WAAM,OAAAnC,EAAMgL,2BAA4B,IAAI,aAG7GjK,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KACZzF,EAAA,cAAC2D,EAAA,EAAM,CAACmB,QAAQ,WAAW3D,MAAM,UAAU6F,KAAK,QAAQ5F,QAAS,WAAM,OAAAnC,EAAMiL,sBAAuB,IAAI,eAIxGlK,EAAA,cAAC4G,EAAA,EAAU,CAACC,MAAO,CAAEC,KAAM,KAE3B9G,EAAA,cAAC0F,EAAA,EAAW,KACR1F,EAAA,cAAC2F,EAAA,EAAU,CAACC,QAAQ,uBAAqB,gBACzC5F,EAAA,cAACoG,EAAA,EAAM,CACHlG,UAAU,iBACVmD,MAAOpE,EAAM8H,YACbxD,SAAU,SAAC1B,GAAQ,OAAA5C,EAAM8H,YAAclF,EAAI2B,OAAOH,OAClDiD,WAAY,CAAER,GAAI,wBAClB9F,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,SAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,gBAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,GAAC,gBAClBrD,EAAA,cAACoC,EAAA,EAAQ,CAACiB,MAAO,IAAE,mBAI3BrD,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,KAEZzF,EAAA,cAAC2D,EAAA,EAAM,CAACmB,QAAQ,WAAW3D,MAAM,UAAU6F,KAAK,QAAQ5F,QAAS,WAAM,OAAAnC,EAAMkL,gBACzEnK,EAAA,cAACkH,EAAApG,EAAW,QAKnBhB,KAAKsK,cAAcnL,EAAMoL,SAE1BrK,EAAA,cAACmH,EAAA,EAAc,CAACjH,UAAU,gDACJjB,EAAMoL,QAAQC,cAAgBrL,EAAMoL,QAAQC,cAAcjD,OAAS,YAGrFpI,EAAMoL,QAAQC,eAAiBrL,EAAMoL,QAAQC,cAAcjD,OAC3DvH,KAAKwH,YAAYrI,EAAMoL,QAAQC,eAC/BxK,KAAKyH,mBAERtI,EAAMyD,WAAc1C,EAAA,cAAC2C,EAAA,EAAc,MAAQ3C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,IACzD7C,EAAA,cAAC4C,EAAA,EAAG,CAACC,OAAQ,KAEb7C,EAAA,cAACR,EAAY,CAACP,MAAOa,KAAKC,MAAMd,QAE/Ba,KAAKyK,cAActL,KAIpB8K,EAAAnK,UAAA2K,cAAR,SAAsBtL,GAElB,OAAQe,EAAA,yBAEJA,EAAA,cAACsC,EAAA,EAAM,CACHhC,KAAMrB,EAAM+K,uBACZvJ,QAAS,WAAM,OAAAxB,EAAM+K,wBAAyB,IAE9ChK,EAAA,cAACwC,EAAA,EAAW,uBACZxC,EAAA,cAACyC,EAAA,EAAa,KACVzC,EAAA,cAAC8C,EAAA,EAAiB,8CACyB7D,EAAMuL,qCAGrDxK,EAAA,cAAC0D,EAAA,EAAa,KACV1D,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAM+K,wBAAyB,GAAO7I,MAAM,UAAU6B,WAAS,aAGtFhD,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAMwL,UAAUtJ,MAAM,aAAW,iBAMhEnB,EAAA,cAACsC,EAAA,EAAM,CACHhC,KAAMrB,EAAMgL,0BACZxJ,QAAS,WAAM,OAAAxB,EAAMgL,2BAA4B,IAEjDjK,EAAA,cAACwC,EAAA,EAAW,0BACZxC,EAAA,cAACyC,EAAA,EAAa,KACVzC,EAAA,cAAC8C,EAAA,EAAiB,iDAC4B7D,EAAMuL,sEAGxDxK,EAAA,cAAC0D,EAAA,EAAa,KACV1D,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAMgL,2BAA4B,GAAO9I,MAAM,UAAU6B,WAAS,aAGzFhD,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAMyL,aAAavJ,MAAM,aAAW,oBAMnEnB,EAAA,cAACsC,EAAA,EAAM,CACHhC,KAAMrB,EAAMiL,qBACZzJ,QAAS,WAAM,OAAAxB,EAAMiL,sBAAuB,IAE5ClK,EAAA,cAACwC,EAAA,EAAW,oBACZxC,EAAA,cAACyC,EAAA,EAAa,KACVzC,EAAA,cAAC8C,EAAA,EAAiB,qDAIlB9C,EAAA,cAAC+C,EAAA,EAAS,CACNC,WAAS,EACTC,OAAO,QACPC,MAAM,aACNC,WAAS,EACTE,MAAOpE,EAAM0L,UACbpH,SAAU,SAAC1B,GAAQ,OAAA5C,EAAM0L,UAAY9I,EAAI2B,OAAOH,SAGpDrD,EAAA,cAAC+C,EAAA,EAAS,CACNE,OAAO,QACPC,MAAM,oBACNC,WAAS,EACT2F,WAAS,EACT8B,KAAM,EACNvH,MAAOpE,EAAM4L,UACbtH,SAAU,SAAC1B,GAAQ,OAAA5C,EAAM4L,UAAYhJ,EAAI2B,OAAOH,UAIxDrD,EAAA,cAAC0D,EAAA,EAAa,KACV1D,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAMiL,sBAAuB,GAAO/I,MAAM,WAAS,UAG1EnB,EAAA,cAAC2D,EAAA,EAAM,CAACvC,QAAS,WAAM,OAAAnC,EAAM6L,cAAc1H,UAAWnE,EAAM0L,UAAWxJ,MAAM,aAAW,aAkBhG4I,EAAAnK,UAAAwK,cAAR,SAAsBC,GAElB,OACIrK,EAAA,cAAC+K,GAAA,EAAI,CAACC,WAAS,EAAC9K,UAAU,kBACtBF,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACnL,UAAU,aACpDF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,OACNG,MAAOgH,EAAQlG,KACflB,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,KAGjBnD,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACnL,UAAU,aACpDF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,cACNG,MAAOgH,EAAQ1B,YACf1F,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,KAGjBnD,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACnL,UAAU,aACpDF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,gBACNG,MAAOgH,EAAQ/B,cACfrF,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,EACTjD,UAAamK,EAAQ/B,cAAgB,kBAAoB+B,EAAQ/B,cAAcC,cAAgB,MAGvGvI,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACnL,UAAU,aACpDF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,kBACNG,MAAOgH,EAAQzB,gBACf3F,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,KAGjBnD,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIG,cAAY,EAACnL,UAAU,aACtCF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,QACNG,MAAO4F,KAAKC,UAAUmB,EAAQlB,OAC9BlG,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,EACT2F,WAAS,EACTC,QAAS,KAGjB/I,EAAA,cAAC+K,GAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIG,cAAY,EAACnL,UAAU,aACtCF,EAAA,cAAC+C,EAAA,EAAS,CACNG,MAAM,SACNG,MAAO4F,KAAKC,UAAUmB,EAAQjB,QAC9BnG,OAAO,SACPqI,WAAY,CAAEtC,UAAU,GACxBlE,QAAQ,WACR3B,WAAS,EACT2F,WAAS,EACTC,QAAS,OAOrBgB,EAAAnK,UAAA2H,iBAAR,WACI,OACIvH,EAAA,cAAC4G,EAAA,EAAU,CAAC9B,QAAQ,KAAK5E,UAAU,2BAAyB,uBAM5D6J,EAAAnK,UAAA0H,YAAR,SAAoBiE,GAEhB,OACIvL,EAAA,cAACwH,EAAA,EAAK,CAACR,KAAK,SACRhH,EAAA,cAACyH,EAAA,EAAS,KACNzH,EAAA,cAAC0H,EAAA,EAAQ,KACJ5H,KAAKoE,SAASqC,IAAI,SAAAC,GACf,OACIxG,EAAA,cAAC2H,EAAA,EAAS,CAAC1G,IAAKuF,EAAIrC,MAAOqC,EAAIpC,WAK/CpE,EAAA,cAACiI,EAAA,EAAS,KACLsD,EAAOhF,IAAI,SAAC8C,EAAYmC,GAErB,IAAMrD,EAAY,CAAEC,cAAe,OACnC,OACIpI,EAAA,cAAC0H,EAAA,EAAQ,CAACzG,IAAKuK,GACXxL,EAAA,cAAC2H,EAAA,EAAS,CAACd,MAAOsB,GACbkB,EAAMoC,WAEXzL,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,YAAY2G,MAAOsB,GACnCkB,EAAMqC,WAEX1L,EAAA,cAAC2H,EAAA,EAAS,CAACd,MAAOsB,GACXkB,EAAMsC,KAAOtC,EAAMsC,KAAOtC,EAAMuC,cAEvC5L,EAAA,cAAC2H,EAAA,EAAS,CAACd,MAAOsB,GACbkB,EAAMwC,eAEX7L,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,iBAAiB2G,MAAOsB,GACzCnI,EAAA,cAAC6I,EAAA,EAAS,CACN3I,UAAU,uBACV4I,WAAS,EAAC3F,WAAS,EAAC4F,QAAS,EAAGC,UAAQ,EACxC3F,MAAO4F,KAAKC,UAAUG,EAAMyC,WAGpC9L,EAAA,cAAC2H,EAAA,EAAS,CAACzH,UAAU,iBAAiB2G,MAAOsB,GACzCnI,EAAA,cAAC6I,EAAA,EAAS,CACN3I,UAAU,uBACV4I,WAAS,EAAC3F,WAAS,EAAC4F,QAAS,EAAGC,UAAQ,EACxC3F,MAAOgG,EAAM0C,iBA5RxChC,EAAoBpK,EAAA,GADhC6B,EAAA,GACYuI,GAAb,CAA0C/J,EAAA,YCXpCgM,GAAOlO,EAAQ,KAarBmO,GAAA,SAAAxM,GAAA,SAAAyM,mDA4CA,OA5C0BvM,EAAA,EAAAuM,EAAAzM,GAEtByM,EAAAtM,UAAAC,OAAA,WACI,IAAMZ,EAAQa,KAAKC,MAAMd,MAEzB,OACIe,EAAA,cAACmM,EAAA,EAAa,CAACC,SAVF,gBAWTpM,EAAA,cAACqM,EAAA,EAAM,CAACC,SAAS,SAASnL,MAAM,UAAUjB,UAAU,WAChDF,EAAA,cAAC6E,EAAA,EAAO,KACJ7E,EAAA,qBAAKuM,IAAKP,GAAMvG,MAAM,SAEtBzF,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,IAEZzF,EAAA,cAAC4G,EAAA,EAAU,CAAC9B,QAAQ,KAAK3D,MAAM,UAAUjB,UAAU,oBAAkB,6BAIrEF,EAAA,cAACwM,EAAA,EAAW,CAACrL,MAAM,WACfnB,EAAA,cAACwI,EAAA,EAAI,CAACrH,MAAM,UAAUsH,KAtBzB,gBAsBwC,oBAGrCzI,EAAA,cAAC4G,EAAA,EAAU,CAACzF,MAAM,WACblC,EAAMwN,0BAA0BjC,kBAIzCxK,EAAA,cAAC4C,EAAA,EAAG,CAAC6C,MAAO,IACZzF,EAAA,cAAC4G,EAAA,EAAU,CAACC,MAAO,CAAEC,KAAM,MAEzB7H,EAAMwN,0BAA0BjC,iBAAoBxK,EAAA,cAACyB,EAAQ,CAACxC,MAAOA,EAAMyN,kBAKrF1M,EAAA,cAAC2M,EAAA,EAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAW,WAAM,OAAC9M,EAAA,cAAC6D,GAAc,CAAC5E,MAAOA,EAAM8N,yBAErE/M,EAAA,cAAC2M,EAAA,EAAK,CAACC,KAAK,sBAAsBE,UAAW,SAAC/M,GAE1C,OADAd,EAAMwN,0BAA0BjC,gBAAkBzK,EAAM1B,MAAM2O,OAAOlH,GAC7D9F,EAAA,cAAC8J,GAAoB,CAAC7K,MAAOA,EAAMwN,iCAtClDP,EAAIvM,EAAA,GADhB6B,EAAA,GACY0K,GAAb,CAA0BlM,EAAA,+BCb1BiN,GAAA,oBAAAC,IAWIpN,KAAAyC,4BAAsC,EAGtCzC,KAAAS,aAAuB,GAkDfT,KAAAqN,aAAuB,EAGnC,OAlDIC,OAAAC,eAAIH,EAAAtN,UAAA,aAAU,KAAd,WAA4B,OAAOE,KAAKqN,6CAExCD,EAAAtN,UAAAyC,2BAAA,eAAA0B,EAAAjE,KACIA,KAAKgC,uBAAoBK,EAEzBrC,KAAKyC,4BAA6B,EAElCzC,KAAKqN,aAAc,EAEnBG,GAAAxM,EAAMyM,IAHSC,+CAGA7O,KAAK,SAAA8O,GAEhB1J,EAAKN,iBAAmBgK,EAASC,KAAKjK,iBACtCM,EAAK4J,qBAAuB5J,EAAKN,iBACjCM,EAAKT,QAAUmK,EAASC,KAAKpK,SAE9B,SAAAsK,GACC7J,EAAKxD,aAAe,gBAAgBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAC7FG,QAAQ,WACP9J,EAAKoJ,aAAc,KAI3BD,EAAAtN,UAAAgE,qBAAA,eAAAG,EAAAjE,KAGIA,KAAKqN,aAAc,EAEnBG,GAAAxM,EAAMgN,IAHSN,8CAGA,CAAC/J,iBAAkB3D,KAAK2D,iBAAkBH,QAASxD,KAAKwD,UAAU3E,KAAK,WAElFoF,EAAKxB,4BAA6B,EAE9BwB,EAAK4J,uBAAyB5J,EAAKN,iBAEnCsK,MAAM,2IAGN5P,SAAS6P,UAGd,SAAAJ,GACC7J,EAAKxD,aAAe,gBAAgBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAC7FG,QAAQ,WACP9J,EAAKoJ,aAAc,KAxD3BxN,EAAA,GADC2B,EAAA,2CAID3B,EAAA,GADC2B,EAAA,iCAGD3B,EAAA,GADC2B,EAAA,0CAID3B,EAAA,GADC2B,EAAA,oDAID3B,EAAA,GADC2B,EAAA,sCAID3B,EAAA,GADC2B,EAAA,kCAgDD3B,EAAA,GADC2B,EAAA,qCAIL4L,EAnEA,INDA,SAAY3N,GACRA,IAAA,mBACAA,IAAA,2BACAA,IAAA,uBAHJ,CAAYA,MAAkB,KAM9B,IAYA0O,GAAA,WAuFI,SAAAC,IApFApO,KAAAS,aAAuB,GA4LfT,KAAAqN,aAAuB,EAEvBrN,KAAAqO,gBAAuC,GAEvCrO,KAAAsO,kBAAsC,MAEtCtO,KAAAuO,SAAmB,GAEnBvO,KAAAwO,aAAuB,EAMvBxO,KAAAyO,aAAuB,GAEvBzO,KAAA0O,gBAAsCjP,EAAmBkP,OAEzD3O,KAAA4O,gBAA0B,IAE1B5O,KAAA6O,oBAA8B,EACrB7O,KAAA8O,UAAY,GAErB9O,KAAA+O,gBAA0B,GA7H9B,IAAMpF,EAAK,IAAIF,KACfE,EAAGqF,QAAQrF,EAAGsF,UAAY,GAC1BjP,KAAKkP,UAAYvF,EA8HzB,OAnNI2D,OAAAC,eAAIa,EAAAtO,UAAA,aAAU,KAAd,WAA4B,OAAOE,KAAKqN,6CAGxCC,OAAAC,eAAIa,EAAAtO,UAAA,iBAAc,KAAlB,WAA4C,OAAOE,KAAKqO,iDAGxDf,OAAAC,eAAIa,EAAAtO,UAAA,cAAW,KAAf,WAA4B,OAAOE,KAAKwO,kBACxC,SAAgBW,GACZnP,KAAKwO,aAAeW,EACpBnP,KAAKwE,oBAAmB,oCAI5B8I,OAAAC,eAAIa,EAAAtO,UAAA,WAAQ,KAAZ,WAAuB,OAAOE,KAAKkP,eACnC,SAAaC,GAAanP,KAAKkP,UAAYC,mCAG3C7B,OAAAC,eAAIa,EAAAtO,UAAA,WAAQ,KAAZ,WAAuB,OAASE,KAAKoP,UAA0BpP,KAAKoP,UAAlB,IAAI3F,UACtD,SAAa0F,GAAanP,KAAKoP,UAAYD,mCAG3C7B,OAAAC,eAAIa,EAAAtO,UAAA,kBAAe,KAAnB,WAAiC,QAASE,KAAKoP,eAC/C,SAAoBD,GAEhBnP,KAAKoP,UAAYD,EAAM,IAAI1F,UAASpH,EAE/B8M,GACDnP,KAAKmH,wDAKbmG,OAAAC,eAAIa,EAAAtO,UAAA,mBAAgB,KAApB,WAA2C,OAAOE,KAAKsO,mDAGvDhB,OAAAC,eAAIa,EAAAtO,UAAA,UAAO,KAAX,WAAyB,OAAOE,KAAKuO,cACrC,SAAYY,GAEJnP,KAAKuO,WAAaY,EAClBnP,KAAKuO,SAAWY,EAGhBnP,KAAKsO,kBAAgD,SAA3BtO,KAAKsO,kBAAgC,MAAQ,OAG3EtO,KAAKmH,wDAITmG,OAAAC,eAAIa,EAAAtO,UAAA,cAAW,KAAf,WAA4B,OAAOE,KAAKyO,kBACxC,SAAgBU,GAAenP,KAAKyO,aAAeU,mCAGnD7B,OAAAC,eAAIa,EAAAtO,UAAA,iBAAc,KAAlB,WAA2C,OAAOE,KAAK0O,qBACvD,SAAmBS,GAEfnP,KAAK0O,gBAAkBS,EAEjBnP,KAAKyO,cAAyC,MAAzBzO,KAAK4O,iBAE5B5O,KAAKmH,wDAKbmG,OAAAC,eAAIa,EAAAtO,UAAA,iBAAc,KAAlB,WAA+B,OAAOE,KAAK4O,qBAC3C,SAAmBO,GAEfnP,KAAK4O,gBAAkBO,EAElBnP,KAAKyO,eAImB,MAAzBzO,KAAK4O,kBACL5O,KAAKyO,aAAe,IAGxBzO,KAAKmH,yDAUTiH,EAAAtO,UAAA0F,cAAA,WACQxF,KAAKqP,eAAiBrP,KAAKkP,WAC3BlP,KAAKmH,wBAIbiH,EAAAtO,UAAAuG,cAAA,WACQrG,KAAKsP,eAAiBtP,KAAKoP,WAC3BpP,KAAKmH,wBAIbiH,EAAAtO,UAAA+G,iBAAA,WACQ7G,KAAK+O,kBAAoB/O,KAAKyO,cAC9BzO,KAAKmH,wBAIbiH,EAAAtO,UAAAqH,qBAAA,WACInH,KAAKqO,gBAAkB,GACvBrO,KAAK6O,oBAAqB,EAC1B7O,KAAKwE,qBAELxE,KAAK+O,gBAAkB/O,KAAKyO,aAC5BzO,KAAKqP,aAAerP,KAAKkP,UACzBlP,KAAKsP,aAAetP,KAAKoP,WAG7BhB,EAAAtO,UAAA0E,mBAAA,SAAmB+K,GAAnB,IAAAtL,EAAAjE,KAEI,QAFe,IAAAuP,OAAA,KAETvP,KAAK4C,YAAiB5C,KAAK6O,qBAAuB7O,KAAKwO,cAA7D,CAGAxO,KAAKqN,aAAc,EAGnB,IAAMmC,EAAOD,EAAgB,EAAIvP,KAAKqO,gBAAgB9G,OAEhDnB,EAAapG,KAAKoP,UAAYpP,KAAKoP,UAAY,IAAI3F,KACrDgG,EAAe,4BAA4BzP,KAAKkP,UAAUtF,cAAa,yBAAyBxD,EAASwD,cAAa,IAE1H,GAAM5J,KAAKyO,cAAyC,MAAzBzO,KAAK4O,gBAI5B,OAFAa,GAAgB,QAERzP,KAAK0O,iBACT,KAAKjP,EAAmBkP,OACpBc,GAAmBzP,KAAK4O,gBAAe,QAAQ5O,KAAKyO,aAAY,IACpE,MACA,KAAKhP,EAAmBiQ,WACpBD,GAAgB,cAAczP,KAAK4O,gBAAe,MAAM5O,KAAKyO,aAAY,KAC7E,MACA,KAAKhP,EAAmBkQ,SACpBF,GAAgB,YAAYzP,KAAK4O,gBAAe,MAAM5O,KAAKyO,aAAY,KAKnF,IAAMmB,EAAkB5P,KAAKuO,SAAW,aAAavO,KAAKuO,SAAQ,IAAIvO,KAAKkI,iBAAqB,GAE1F2H,EAASC,iDAAsC9P,KAAK8O,UAAS,UAAUU,EAAOC,EAAeG,EAEnGpC,GAAAxM,EAAMyM,IAAIoC,GAAKhR,KAAK,SAAA8O,SAEXA,EAASC,KAAKrG,OAIXgI,EACAtL,EAAKoK,gBAAkBV,EAASC,MAEhCmC,EAAA9L,EAAKoK,iBAAgB2B,KAAI9L,MAAA6L,EAAIpC,EAASC,MAL1C3J,EAAK4K,oBAAqB,EAUxB5K,EAAKuK,eAEDvK,EAAKgM,mBACPC,aAAajM,EAAKgM,mBAEtBhM,EAAKgM,kBAAoBE,WAAW,WAAM,OAAAlM,EAAKO,oBAAmB,IAA2B,IAApBP,EAAKuK,gBAGnF,SAAAV,GAGC7J,EAAKuK,aAAe,EAEpBvK,EAAKxD,aAAe,gBAAgBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAE7FG,QAAQ,WACP9J,EAAKoJ,aAAc,MAvL3BxN,EAAA,GADC2B,EAAA,sCAID3B,EAAA,GADC2B,EAAA,kCAID3B,EAAA,GADC2B,EAAA,sCAID3B,EAAA,GADC2B,EAAA,mCAQD3B,EAAA,GADC2B,EAAA,gCAKD3B,EAAA,GADC2B,EAAA,gCAKD3B,EAAA,GADC2B,EAAA,uCAYD3B,EAAA,GADC2B,EAAA,wCAID3B,EAAA,GADC2B,EAAA,+BAeD3B,EAAA,GADC2B,EAAA,mCAKD3B,EAAA,GADC2B,EAAA,sCAaD3B,EAAA,GADC2B,EAAA,sCAyHD3B,EAAA,GADC2B,EAAA,qCAGD3B,EAAA,GADC2B,EAAA,yCAGD3B,EAAA,GADC2B,EAAA,2CAGD3B,EAAA,GADC2B,EAAA,kCAGD3B,EAAA,GADC2B,EAAA,sCAGD3B,EAAA,GADC2B,EAAA,mCAGD3B,EAAA,GADC2B,EAAA,mCAGD3B,EAAA,GADC2B,EAAA,sCAGD3B,EAAA,GADC2B,EAAA,yCAGD3B,EAAA,GADC2B,EAAA,yCASL4M,EAzNA,GOjBAgC,GAAA,oBAAAC,IAGIrQ,KAAAS,aAAuB,GAEvBT,KAAAuK,QAAe,GA4BfvK,KAAAkK,wBAAkC,EAElClK,KAAAmK,2BAAqC,EA0G7BnK,KAAAqN,aAAuB,EAE/BrN,KAAAsQ,sBAAgC,EAExBtQ,KAAAwO,aAAuB,EAGnC,OA5IIlB,OAAAC,eAAI8C,EAAAvQ,UAAA,kBAAe,KAAnB,WAAgC,OAAOE,KAAKuQ,sBAC5C,SAAoBpB,GAChBnP,KAAKuQ,iBAAmBpB,EACxBnP,KAAKqK,+CAITiD,OAAAC,eAAI8C,EAAAvQ,UAAA,aAAU,KAAd,WAA4B,OAAOE,KAAKqN,6CAGxCC,OAAAC,eAAI8C,EAAAvQ,UAAA,cAAW,KAAf,WAA4B,OAAOE,KAAKwO,kBACxC,SAAgBW,GACZnP,KAAKwO,aAAeW,EACpBnP,KAAKqK,+CAITiD,OAAAC,eAAI8C,EAAAvQ,UAAA,uBAAoB,KAAxB,WAAsC,OAAOE,KAAKsQ,0BAClD,SAAyBnB,GACrBnP,KAAKsQ,qBAAuBnB,EAC5BnP,KAAK6K,UAAY,GACjB7K,KAAK+K,UAAY,oCAYrBsF,EAAAvQ,UAAA6K,OAAA,eAAA1G,EAAAjE,KACIA,KAAKkK,wBAAyB,EAE9B,IAAM2F,EAASW,6CAAkCxQ,KAAKuQ,iBAAgB,YACtEvQ,KAAKqN,aAAc,EAEnBG,GAAAxM,EAAMyP,KAAKZ,GAAKhR,KAAK,WACjBoF,EAAKoG,eACN,SAAAyD,GACC7J,EAAKxD,aAAe,qBAAqBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAClGG,QAAQ,WACP9J,EAAKoJ,aAAc,KAI3BgD,EAAAvQ,UAAA8K,UAAA,eAAA3G,EAAAjE,KACIA,KAAKmK,2BAA4B,EAEjC,IAAM0F,EAASW,6CAAkCxQ,KAAKuQ,iBAAgB,eACtEvQ,KAAKqN,aAAc,EAEnBG,GAAAxM,EAAMyP,KAAKZ,GAAKhR,KAAK,WACjBoF,EAAKoG,eACN,SAAAyD,GACC7J,EAAKxD,aAAe,wBAAwBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MACrGG,QAAQ,WACP9J,EAAKoJ,aAAc,KAI3BgD,EAAAvQ,UAAAkL,WAAA,eAAA/G,EAAAjE,KAEU6P,EAASW,6CAAkCxQ,KAAKuQ,iBAAgB,iBAChEG,EAAc,CAAErM,KAAMrE,KAAK6K,UAAW+C,KAAM,MAElD,IACI8C,EAAY9C,KAAOzE,KAAKwH,MAAM3Q,KAAK+K,WACrC,MAAO+C,GAEL,YADA9N,KAAKS,aAAe,+BAA+BqN,EAAIhN,iBAGvDd,KAAKoK,sBAAuB,EAGhCpK,KAAKqN,aAAc,EAEnBG,GAAAxM,EAAMyP,KAAKZ,EAAKa,GAAa7R,KAAK,WAC9BoF,EAAKoG,eACN,SAAAyD,GACC7J,EAAKxD,aAAe,6BAA6BqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAC1GG,QAAQ,WACP9J,EAAKoJ,aAAc,KAI3BgD,EAAAvQ,UAAAuK,YAAA,eAAApG,EAAAjE,KAEI,IAAMA,KAAK4C,WAAX,CAGA5C,KAAKqN,aAAc,EAEnB,IAAMwC,EAASW,6CAAkCxQ,KAAKuQ,iBAAgB,KAEtE/C,GAAAxM,EAAMyM,IAAIoC,GAAKhR,KAAK,SAAA8O,GAEhB,IAAKA,EAASC,KAKV,OAJA3J,EAAKxD,aAAe,kBAAkBwD,EAAKsM,iBAAgB,oBAG3DtM,EAAKuK,aAAe,GAIxBvK,EAAKsG,QAAUoD,EAASC,KAGlB3J,EAAKuK,eAEDvK,EAAKgM,mBACPC,aAAajM,EAAKgM,mBAEtBhM,EAAKgM,kBAAoBE,WAAW,WAAM,OAAAlM,EAAKoG,eAAmC,IAApBpG,EAAKuK,gBAGxE,SAAAV,GAGC7J,EAAKuK,aAAe,EAEpBvK,EAAKxD,aAAe,gBAAgBqN,EAAIhN,QAAO,KAAOgN,EAAIH,SAAWG,EAAIH,SAASC,KAAO,IAAG,MAE7FG,QAAQ,WACP9J,EAAKoJ,aAAc,MAnI3BxN,EAAA,GADC2B,EAAA,sCAMD3B,EAAA,GADC2B,EAAA,uCAQD3B,EAAA,GADC2B,EAAA,kCAID3B,EAAA,GADC2B,EAAA,mCAQD3B,EAAA,GADC2B,EAAA,4CASD3B,EAAA,GADC2B,EAAA,gDAGD3B,EAAA,GADC2B,EAAA,mDAGD3B,EAAA,GADC2B,EAAA,mCAGD3B,EAAA,GADC2B,EAAA,mCAqGD3B,EAAA,GADC2B,EAAA,0CAGD3B,EAAA,GADC2B,EAAA,qCAGD3B,EAAA,GADC2B,EAAA,8CAGD3B,EAAA,GADC2B,EAAA,sCAIL6O,EApJA,GCOMO,GAAW,ICRjB,WAIA,OAJA,WACI5Q,KAAA4M,cAA+B,IAAIO,GACnCnN,KAAAiN,oBAA2C,IAAIkB,GAC/CnO,KAAA2M,0BAAuD,IAAIyD,IAH/D,IDUAS,EAAA,OACI3Q,EAAA,cAACiM,GAAI,CAAChN,MAAOyR,KACbnM,SAASqM,eAAe,STIb,WACb,GAA6C,kBAAmBpS,UAAW,CAMzE,GAJkB,IAAIqS,IACpB,eACA3S,OAAOC,SAAS2S,YAEJC,SAAW7S,OAAOC,SAAS4S,OAIvC,OAGF7S,OAAOsG,iBAAiB,OAAQ,WAC9B,IAAMjG,EAAW,iCAEbP,GAmDV,SAAiCO,GAE/ByS,MAAMzS,GACHI,KAAK,SAAA8O,GAGkB,MAApBA,EAASwD,SACwD,IAAjExD,EAASyD,QAAQ3D,IAAI,gBAAiB4D,QAAQ,cAG9C3S,UAAUC,cAAc2S,MAAMzS,KAAK,SAAAC,GACjCA,EAAayS,aAAa1S,KAAK,WAC7BT,OAAOC,SAAS6P,aAKpB1P,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAvEAkS,CAAwB/S,GAIxBC,UAAUC,cAAc2S,MAAMzS,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MShCxBG","file":"static/js/main.82175ccc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nclass OrchestrationInfo {\r\n    instanceId: string;\r\n    name: string;\r\n    runtimeStatus: string;\r\n    input: any;\r\n    customStatus: string | null;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): OrchestrationInfo[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) { this._timeFrom = val; }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) { this._timeTill = val; }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    constructor() {\r\n        \r\n        const dt = new Date();\r\n        dt.setDate(dt.getDate() - 1);\r\n        this._timeFrom = dt;\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            if (!response.data.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response.data;\r\n                } else {\r\n                    this._orchestrations.push(...response.data);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);                \r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n            \r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n                \r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: OrchestrationInfo[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n}","import * as React from 'react';\r\nimport { action } from \"mobx\"\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: { errorMessage: string } }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"error-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from \"mobx\"\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress, Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton edge=\"start\" color=\"inherit\">\r\n                    <MenuIcon onClick={evt => state.menuAnchorElement = evt.currentTarget} />\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Setings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            The below values will be saved to host.json and local.settings.json respectively.\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n               \r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { action } from \"mobx\"\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormHelperText, InputBase, InputLabel, LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationsState } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <TextField\r\n                        label=\"From &nbsp;&nbsp; (UTC)\"\r\n                        type=\"datetime-local\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={this.formatDateTime(state.timeFrom)}\r\n                        onChange={(evt) => { state.timeFrom = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeFrom()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />                    \r\n\r\n                    <Box width={20}/>\r\n\r\n                    <FormControl>\r\n                        <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                        <Checkbox\r\n                            id=\"till-checkbox\"\r\n                            className=\"till-checkbox\"\r\n                            checked={state.timeTillEnabled}\r\n                            onChange={(evt) => state.timeTillEnabled = evt.target.checked }\r\n                        />\r\n                    </FormControl>\r\n                    \r\n                    <TextField\r\n                        className=\"till-input\"\r\n                        label=\"(UTC)\"\r\n                        placeholder=\"[Now]\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                        disabled={!state.timeTillEnabled}\r\n                        value={state.timeTillEnabled ? this.formatDateTime(state.timeTill) : ''}\r\n                        onChange={(evt) => { state.timeTill = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeTill()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filteredColumn}\r\n                            onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                            inputProps={{ id: \"filtered-column-select\" }}>\r\n                            \r\n                            <MenuItem value='0'>[Not Selected]</MenuItem>\r\n                            {this._columns.map(col => {\r\n                                return (<MenuItem key={col.name} value={col.name}>{col.title}</MenuItem>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filterOperator}\r\n                            onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                            inputProps={{ id: \"filter-operator-select\" }}>\r\n                            <MenuItem value={0}>Equals</MenuItem>\r\n                            <MenuItem value={1}>Starts With</MenuItem>\r\n                            <MenuItem value={2}>Contains</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <TextField\r\n                        label=\"Filter Value\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"[some text or 'null']\"\r\n                        disabled={state.filteredColumn === '0'}\r\n                        value={state.filterValue}\r\n                        onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                        onBlur={() => state.applyFilterValue()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={10} />\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n                    \r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            inputProps={{ id: \"auto-refresh-select\" }}\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        >\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n                    \r\n                    <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.reloadOrchestrations()} >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {state.orchestrations.length} items shown\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private readonly _columns = [\r\n        { name: 'instanceId', title: 'instanceId' },\r\n        { name: 'name', title: 'name' },\r\n        { name: 'createdTime', title: 'createdTime' },\r\n        { name: 'lastUpdatedTime', title: 'lastUpdatedTime' },\r\n        { name: 'runtimeStatus', title: 'runtimeStatus' },\r\n        { name: 'input', title: 'input' },\r\n        { name: 'output', title: 'output' }\r\n    ];\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {this._columns.map(col => {\r\n                            return (\r\n                                <TableCell key={col.name}>\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col.name}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col.name}\r\n                                    >\r\n                                        {col.title}\r\n                                    </TableSortLabel>\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <Link href={`${UriSuffix}/orchestrations/${orchestration.instanceId}`} target='_blank'>\r\n                                        {orchestration.instanceId}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private getDateTimeValue(evt: any): Date {\r\n        return new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n    }\r\n\r\n    private formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n\r\n    private toJsonString(o: any): string {\r\n\r\n        if (!o) {\r\n            return 'null';\r\n        }\r\n        \r\n        const s = JSON.stringify(o);\r\n        return s.length > 256 ? s.slice(0, 256) + '...' : s;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, Grid, InputBase, InputLabel, LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, Toolbar, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                    Rewind\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                    Terminate\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                    Raise Event\r\n                </Button>\r\n                \r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: \"auto-refresh-select\" }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {this.renderDetails(state.details)}\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!state.details.historyEvents ? state.details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {(!!state.details.historyEvents && state.details.historyEvents.length) ?\r\n                this.renderTable(state.details.historyEvents) :\r\n                this.renderEmptyTable()}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n            {this.renderDialogs(state)}\r\n        </div>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        \r\n        return (<div>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        </div>);\r\n    }\r\n\r\n    private readonly _columns = [\r\n        { name: 'Timestamp', title: 'Timestamp' },\r\n        { name: 'EventType', title: 'EventType' },\r\n        { name: 'FunctionName', title: 'Name' },\r\n        { name: 'ScheduledTime', title: 'ScheduledTime' },\r\n        { name: 'Result', title: 'Result' },\r\n        { name: 'Details', title: 'Details' },\r\n    ];\r\n\r\n    private renderDetails(details: any): JSX.Element {\r\n\r\n        return (\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any>): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {this._columns.map(col => {\r\n                            return (\r\n                                <TableCell key={col.name}>{col.title}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly \r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { MainMenu } from './MainMenu';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <BrowserRouter basename={UriSuffix}>\r\n                <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                    <Toolbar>\r\n                        <img src={logo} width=\"30px\"></img>\r\n\r\n                        <Box width={5} />\r\n\r\n                        <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                            Durable Functions Monitor\r\n                        </Typography>\r\n\r\n                        <Breadcrumbs color=\"inherit\">\r\n                            <Link color=\"inherit\" href={UriSuffix}>\r\n                                / orchestrations\r\n                            </Link>\r\n                            <Typography color=\"inherit\">\r\n                                {state.orchestrationDetailsState.orchestrationId}\r\n                            </Typography>\r\n                        </Breadcrumbs>\r\n\r\n                        <Box width={5} />\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        {!state.orchestrationDetailsState.orchestrationId && (<MainMenu state={state.mainMenuState} />)}\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Route path=\"/\" exact component={() => (<Orchestrations state={state.orchestrationsState} />)} />\r\n\r\n                <Route path=\"/orchestrations/:id\" component={(props: any) => {\r\n                    state.orchestrationDetailsState.orchestrationId = props.match.params.id;\r\n                    return (<OrchestrationDetails state={state.orchestrationDetailsState} />);\r\n                }} />\r\n\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            this.connectionString = response.data.connectionString;\r\n            this._oldConnectionString = this.connectionString;\r\n            this.hubName = response.data.hubName;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        axios.put(uri, {connectionString: this.connectionString, hubName: this.hubName}).then(() => {\r\n\r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            if (this._oldConnectionString !== this.connectionString) {\r\n                // Didn't find a way to automatically pick up the new Connection String, so just asking user to restart the app\r\n                alert(`You've changed the Connection String, and the new value cannot currently be picked up automatically. Please, restart the Function Host.`);\r\n            } else {\r\n                // Refreshing the window\r\n                location.reload();\r\n            }\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    private _oldConnectionString: string;\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n\r\n    details: any = {};\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n    set orchestrationId(val: string) {\r\n        this._orchestrationId = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._sendEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._sendEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri, requestBody).then(() => { \r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')`;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            if (!response.data) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            this.details = response.data;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrationId: string;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _sendEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\n\r\n// Main Application State\r\nexport class MainState {\r\n    mainMenuState: MainMenuState = new MainMenuState();\r\n    orchestrationsState: OrchestrationsState = new OrchestrationsState();\r\n    orchestrationDetailsState: OrchestrationDetailsState = new OrchestrationDetailsState();\r\n}"],"sourceRoot":""}