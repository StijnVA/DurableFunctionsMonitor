{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","components/OrchestrationLink.tsx","components/Orchestrations.tsx","components/OrchestrationDetails.tsx","components/Main.tsx","services/BackendClient.ts","states/ErrorMessageState.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","LoginIcon_LoginIcon","_super","LoginIcon","tslib_es6","prototype","render","this","props","react","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","mobx_react_module","ErrorMessage_ErrorMessage","ErrorMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","Close_default","mobx_module","bound","MainMenu_MainMenu","MainMenu","Menu_default","showConnectionParamsDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","InputLabelProps","shrink","placeholder","isConnectionStringReadonly","connectionString","DialogActions","saveConnectionParams","HistoryEventFields","DurableOrchestrationStatus","DurableOrchestrationStatusFields","OrchestrationLink_OrchestrationLink","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","UriSuffix","call","Orchestrations_Orchestrations","Orchestrations","componentDidMount","_this","loadOrchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","type","formatDateTime","timeFrom","getDateTimeValue","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Select","filteredColumn","inputProps","id","map","col","filterOperator","style","flex","autoRefresh","Checkbox","checked","timeTillEnabled","timeTill","applyTimeTill","filterValue","applyFilterValue","size","reloadOrchestrations","Refresh_default","FormHelperText","orchestrations","length","renderTable","renderEmptyTable","Table","TableHead","TableRow","TableCell","TableSortLabel","active","orderBy","direction","orderByDirection","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toLowerCase","name","createdTime","lastUpdatedTime","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","customStatus","event","preventDefault","dt","Date","slice","toISOString","err","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","loadDetails","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","renderDetails","details","historyEvents","renderDialogs","rewind","terminate","eventName","rows","eventData","raiseEvent","Grid","container","item","xs","sm","md","zeroMinWidth","InputProps","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","logo","Main_Main","Main","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","BackendClient_BackendClient","BackendClient","_getAuthorizationHeaderAsync","Object","defineProperty","method","url","data","Promise","resolve","reject","headers","axios_default","request","r","ErrorMessageState_ErrorMessageState","ErrorMessageState","LoginState_LoginState","LoginState","_isLoggedIn","login","_userName","get","LoginState_BackendBaseUri","loginWithEasyAuthConfig","response","_aadApp","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","lib_es6","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState_MainMenuState","MainMenuState","_backendClient","_inProgress","_oldConnectionString","finally","alert","reload","OrchestrationsState_OrchestrationsState","OrchestrationsState","_localStorage","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_noMorePagesToLoad","_pageSize","_oldFilterValue","timeFromString","getItem","setDate","getDate","_timeFrom","timeTillString","_timeTill","filteredColumnString","filterOperatorString","filterValueString","autoRefreshString","Number","val","setItem","toString","_oldTimeFrom","_oldTimeTill","setItems","fieldName","isAutoRefresh","skip","filterClause","StartsWith","Contains","orderByClause","uri","_a","push","apply","_autoRefreshToken","clearTimeout","setTimeout","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_orchestrationId","_sendEventDialogOpen","requestBody","parse","TypedLocalStorage","_prefix","localStorage","items","_i","items_1","removeItem","VsCodeBackendClient","_vsCodeApi","_requests","requestPromise","requestId","Math","random","postMessage","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","MainState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","uriSuffix","MainState_UriSuffix","pathname","startsWith","substr","react_dom","getElementById","URL","origin","fetch","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90491890.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) { this._timeFrom = val; }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) { this._timeTill = val; }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n\r\n        var timeFrom: Date;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            timeFrom = new Date(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            timeFrom = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n        }\r\n        this._timeFrom = timeFrom;\r\n\r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = new Date(timeTillString);\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"error-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Setings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            The below values will be saved to host.json and local.settings.json respectively.\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder={state.isConnectionStringReadonly ? \"[Change it via 'AzureWebJobsStorage' env variable]\" : \"\"}\r\n                            disabled={state.inProgress || state.isConnectionStringReadonly}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.hubName || (!state.isConnectionStringReadonly && !state.connectionString) || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    runtimeStatus: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`${UriSuffix}/orchestrations/${this.props.orchestrationId}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormHelperText, InputBase, InputLabel, LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Box width={10} />\r\n                    \r\n                    <TextField\r\n                        className=\"from-input\"\r\n                        label=\"From &nbsp;&nbsp; (UTC)\"\r\n                        type=\"datetime-local\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={this.formatDateTime(state.timeFrom)}\r\n                        onChange={(evt) => { state.timeFrom = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeFrom()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select filtered-column-input\"\r\n                            value={state.filteredColumn}\r\n                            onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                            inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                            <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                            {DurableOrchestrationStatusFields.map(col => {\r\n                                return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filterOperator}\r\n                            onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                            inputProps={{ id: \"filter-operator-select\" }}>\r\n                            <MenuItem value={0}>Equals</MenuItem>\r\n                            <MenuItem value={1}>Starts With</MenuItem>\r\n                            <MenuItem value={2}>Contains</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={50} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            inputProps={{ id: \"auto-refresh-select\" }}\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        >\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    \r\n                </Toolbar>\r\n                \r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <FormControl>\r\n                        <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                        <Checkbox\r\n                            id=\"till-checkbox\"\r\n                            className=\"till-checkbox\"\r\n                            checked={state.timeTillEnabled}\r\n                            onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        className=\"till-input\"\r\n                        label=\"(UTC)\"\r\n                        placeholder=\"[Now]\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                        disabled={!state.timeTillEnabled}\r\n                        value={state.timeTillEnabled ? this.formatDateTime(state.timeTill) : ''}\r\n                        onChange={(evt) => { state.timeTill = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeTill()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n\r\n                    <TextField\r\n                        className=\"filter-value-input\"\r\n                        label=\"Filter Value\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"[some text or 'null']\"\r\n                        disabled={state.filteredColumn === '0'}\r\n                        value={state.filterValue}\r\n                        onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                        onBlur={() => state.applyFilterValue()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        onClick={() => state.reloadOrchestrations()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n                    \r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.customStatus}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    private formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, Grid, InputBase, InputLabel, LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, Toolbar, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                    Rewind\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                    Terminate\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                    Raise Event\r\n                </Button>\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {this.renderDetails(state.details)}\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!state.details.historyEvents ? state.details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {(!!state.details.historyEvents && state.details.historyEvents.length) ?\r\n                this.renderTable(state.details.historyEvents) :\r\n                this.renderEmptyTable()}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n            {this.renderDialogs(state)}\r\n        </div>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        \r\n        return (<div>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        </div>);\r\n    }\r\n\r\n    private renderDetails(details: any): JSX.Element {\r\n\r\n        return (\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={details.customStatus ? details.customStatus : \"\"}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any>): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>{col}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly \r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={UriSuffix}>\r\n                                    / orchestrations\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendBaseUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendBaseUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isConnectionStringReadonly(): boolean { return !this._oldConnectionString };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = response.connectionString;\r\n            this._oldConnectionString = this.connectionString;\r\n            this.hubName = response.hubName;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', { connectionString: this.connectionString, hubName: this.hubName }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            if (this._oldConnectionString !== this.connectionString) {\r\n                // Didn't find a way to automatically pick up the new Connection String, so just asking user to restart the app\r\n                alert(`You've changed the Connection String, and the new value cannot currently be picked up automatically. Please, restart the Function Host.`);\r\n            } else {\r\n                // Refreshing the window\r\n                location.reload();\r\n            }\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _oldConnectionString: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._sendEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._sendEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _sendEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const response = event.data;\r\n\r\n            const requestPromise = this._requests[response.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!response.data) {\r\n                requestPromise.resolve(response.data);\r\n            } else {\r\n                requestPromise.reject(response.err);\r\n            }\r\n\r\n            delete this._requests[response.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Main Application State\r\nexport class MainState {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `${UriSuffix}/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}