{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","components/Orchestrations.tsx","components/OrchestrationDetails.tsx","components/Main.tsx","states/ErrorMessageState.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","LoginIcon_LoginIcon","_super","LoginIcon","tslib_es6","prototype","render","this","props","react","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","mobx_react_module","ErrorMessage_ErrorMessage","ErrorMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","Close_default","mobx_module","bound","MainMenu_MainMenu","MainMenu","Menu_default","showConnectionParamsDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","InputLabelProps","shrink","placeholder","isConnectionStringReadonly","connectionString","DialogActions","saveConnectionParams","HistoryEventFields","DurableOrchestrationStatus","DurableOrchestrationStatusFields","Orchestrations_Orchestrations","Orchestrations","componentDidMount","_this","loadOrchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","type","formatDateTime","timeFrom","getDateTimeValue","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","timeTill","applyTimeTill","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","applyFilterValue","style","flex","autoRefresh","size","reloadOrchestrations","Refresh_default","FormHelperText","orchestrations","length","renderTable","renderEmptyTable","Table","TableHead","TableRow","TableCell","TableSortLabel","active","orderBy","direction","orderByDirection","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toLowerCase","Link","href","UriSuffix","name","createdTime","lastUpdatedTime","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","event","preventDefault","dt","Date","slice","toISOString","err","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","loadDetails","renderDetails","details","historyEvents","renderDialogs","orchestrationId","rewind","terminate","eventName","rows","eventData","raiseEvent","Grid","container","item","xs","sm","md","zeroMinWidth","InputProps","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","logo","Main_Main","Main","react_router_dom","basename","AppBar","position","loginState","orchestrationDetailsState","mainMenuState","src","Breadcrumbs","react_router","path","exact","component","orchestrationsState","params","ErrorMessageState_ErrorMessageState","ErrorMessageState","LoginState_LoginState","LoginState","call","_isLoggedIn","login","Object","defineProperty","_userName","axios_default","get","BackendBaseUri","loginWithEasyAuthConfig","response","data","_aadApp","getAuthorizationHeaderAsync","Promise","resolve","reject","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","lib_es6","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState_MainMenuState","MainMenuState","_getAuthorizationHeaderAsync","_inProgress","_oldConnectionString","headers","MainMenuState_BackendBaseUri","finally","put","alert","reload","OrchestrationsState_OrchestrationsState","OrchestrationsState","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_noMorePagesToLoad","_pageSize","_oldFilterValue","setDate","getDate","_timeFrom","val","_timeTill","_oldTimeFrom","_oldTimeTill","isAutoRefresh","skip","filterClause","StartsWith","Contains","orderByClause","uri","OrchestrationsState_BackendBaseUri","_a","push","apply","_autoRefreshToken","clearTimeout","setTimeout","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_sendEventDialogOpen","_orchestrationId","OrchestrationDetailsState_BackendBaseUri","post","requestBody","parse","appState","react_dom","getElementById","URL","toString","origin","fetch","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18676408.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) { this._timeFrom = val; }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) { this._timeTill = val; }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n        super();\r\n\r\n        const dt = new Date();\r\n        dt.setDate(dt.getDate() - 1);\r\n        this._timeFrom = dt;\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => {\r\n            axios.get(uri, { headers }).then(response => {\r\n\r\n                if (!response.data.length) {\r\n                    // Stop the infinite scrolling\r\n                    this._noMorePagesToLoad = true;\r\n                } else {\r\n                    if (isAutoRefresh) {\r\n                        this._orchestrations = response.data;\r\n                    } else {\r\n                        this._orchestrations.push(...response.data);\r\n                    }\r\n                }\r\n\r\n                // Doing auto-refresh\r\n                if (!!this._autoRefresh) {\r\n\r\n                    if (!!this._autoRefreshToken) {\r\n                        clearTimeout(this._autoRefreshToken);\r\n                    }\r\n                    this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n                }\r\n\r\n            }, err => {\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"error-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Setings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            The below values will be saved to host.json and local.settings.json respectively.\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder={state.isConnectionStringReadonly ? \"[Change it via 'AzureWebJobsStorage' env variable]\" : \"\"}\r\n                            disabled={state.inProgress || state.isConnectionStringReadonly}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.hubName || (!state.isConnectionStringReadonly && !state.connectionString) || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    runtimeStatus: string;\r\n    input: any;\r\n    customStatus: string | null;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'input',\r\n    'output'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormHelperText, InputBase, InputLabel, LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationsState } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <TextField\r\n                        label=\"From &nbsp;&nbsp; (UTC)\"\r\n                        type=\"datetime-local\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={this.formatDateTime(state.timeFrom)}\r\n                        onChange={(evt) => { state.timeFrom = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeFrom()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />                    \r\n\r\n                    <Box width={20}/>\r\n\r\n                    <FormControl>\r\n                        <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                        <Checkbox\r\n                            id=\"till-checkbox\"\r\n                            className=\"till-checkbox\"\r\n                            checked={state.timeTillEnabled}\r\n                            onChange={(evt) => state.timeTillEnabled = evt.target.checked }\r\n                        />\r\n                    </FormControl>\r\n                    \r\n                    <TextField\r\n                        className=\"till-input\"\r\n                        label=\"(UTC)\"\r\n                        placeholder=\"[Now]\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                        disabled={!state.timeTillEnabled}\r\n                        value={state.timeTillEnabled ? this.formatDateTime(state.timeTill) : ''}\r\n                        onChange={(evt) => { state.timeTill = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeTill()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filteredColumn}\r\n                            onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                            inputProps={{ id: \"filtered-column-select\" }}>\r\n                            \r\n                            <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                            {DurableOrchestrationStatusFields.map(col => {\r\n                                return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filterOperator}\r\n                            onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                            inputProps={{ id: \"filter-operator-select\" }}>\r\n                            <MenuItem value={0}>Equals</MenuItem>\r\n                            <MenuItem value={1}>Starts With</MenuItem>\r\n                            <MenuItem value={2}>Contains</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <TextField\r\n                        label=\"Filter Value\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"[some text or 'null']\"\r\n                        disabled={state.filteredColumn === '0'}\r\n                        value={state.filterValue}\r\n                        onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                        onBlur={() => state.applyFilterValue()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={10} />\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n                    \r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            inputProps={{ id: \"auto-refresh-select\" }}\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        >\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n                    \r\n                    <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.reloadOrchestrations()} >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {state.orchestrations.length} items shown\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <Link href={`${UriSuffix}/orchestrations/${orchestration.instanceId}`} target='_blank'>\r\n                                        {orchestration.instanceId}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    private formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, Grid, InputBase, InputLabel, LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, Toolbar, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                    Rewind\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                    Terminate\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                    Raise Event\r\n                </Button>\r\n                \r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {this.renderDetails(state.details)}\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!state.details.historyEvents ? state.details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {(!!state.details.historyEvents && state.details.historyEvents.length) ?\r\n                this.renderTable(state.details.historyEvents) :\r\n                this.renderEmptyTable()}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n            {this.renderDialogs(state)}\r\n        </div>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        \r\n        return (<div>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        </div>);\r\n    }\r\n\r\n    private renderDetails(details: any): JSX.Element {\r\n\r\n        return (\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any>): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>{col}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly \r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <BrowserRouter basename={UriSuffix}>\r\n                <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                    <Toolbar>\r\n\r\n                        {state.loginState.isLoggedIn && !state.orchestrationDetailsState.orchestrationId && (\r\n                            <MainMenu state={state.mainMenuState} />\r\n                        )}\r\n\r\n                        <img src={logo} width=\"30px\"></img>\r\n                        <Box width={5} />\r\n\r\n                        <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                            Durable Functions Monitor\r\n                        </Typography>\r\n\r\n                        <Breadcrumbs color=\"inherit\">\r\n                            <Link color=\"inherit\" href={UriSuffix}>\r\n                                / orchestrations\r\n                            </Link>\r\n                            <Typography color=\"inherit\">\r\n                                {state.orchestrationDetailsState.orchestrationId}\r\n                            </Typography>\r\n                        </Breadcrumbs>\r\n\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        <LoginIcon state={state.loginState}/>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {state.loginState.isLoggedIn && (\r\n                    <div>\r\n                        <Route path=\"/\" exact component={() => (<Orchestrations state={state.orchestrationsState} />)} />\r\n\r\n                        <Route path=\"/orchestrations/:id\" component={(props: any) => {\r\n                            state.orchestrationDetailsState.orchestrationId = props.match.params.id;\r\n                            return (<OrchestrationDetails state={state.orchestrationDetailsState} />);\r\n                        }} />\r\n                    </div>\r\n                )}\r\n\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendBaseUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isConnectionStringReadonly(): boolean { return !this._oldConnectionString };\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => { \r\n            axios.get(uri, { headers }).then(response => {\r\n\r\n                this.connectionString = response.data.connectionString;\r\n                this._oldConnectionString = this.connectionString;\r\n                this.hubName = response.data.hubName;\r\n\r\n            }, err => {\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => {\r\n            axios.put(uri, { connectionString: this.connectionString, hubName: this.hubName }, { headers }).then(() => {\r\n\r\n                this.connectionParamsDialogOpen = false;\r\n\r\n                if (this._oldConnectionString !== this.connectionString) {\r\n                    // Didn't find a way to automatically pick up the new Connection String, so just asking user to restart the app\r\n                    alert(`You've changed the Connection String, and the new value cannot currently be picked up automatically. Please, restart the Function Host.`);\r\n                } else {\r\n                    // Refreshing the window\r\n                    location.reload();\r\n                }\r\n\r\n            }, err => {\r\n                this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _oldConnectionString: string;\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n    set orchestrationId(val: string) {\r\n        this._orchestrationId = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._sendEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._sendEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n        super();\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => {\r\n            axios.post(uri, undefined, { headers }).then(() => {\r\n                this.loadDetails();\r\n            }, err => {\r\n                this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => {\r\n            axios.post(uri, undefined, { headers }).then(() => {\r\n                this.loadDetails();\r\n            }, err => {\r\n                this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => { \r\n            axios.post(uri, requestBody, { headers }).then(() => {\r\n                this.loadDetails();\r\n            }, err => {\r\n                this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._getAuthorizationHeaderAsync().then(headers => {\r\n            axios.get(uri, { headers }).then(response => {\r\n\r\n                if (!response.data) {\r\n                    this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                    // Cancelling auto-refresh just in case\r\n                    this._autoRefresh = 0;\r\n                    return;\r\n                }\r\n\r\n                this.details = response.data;\r\n\r\n                // Doing auto-refresh\r\n                if (!!this._autoRefresh) {\r\n\r\n                    if (!!this._autoRefreshToken) {\r\n                        clearTimeout(this._autoRefreshToken);\r\n                    }\r\n                    this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n                }\r\n\r\n            }, err => {\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n\r\n                this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n            }).finally(() => {\r\n                this._inProgress = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrationId: string;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _sendEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Main Application State\r\nexport class MainState {\r\n    \r\n    loginState: LoginState = new LoginState();\r\n    mainMenuState: MainMenuState = new MainMenuState(this.loginState.getAuthorizationHeaderAsync);\r\n    orchestrationsState: OrchestrationsState = new OrchestrationsState(this.loginState.getAuthorizationHeaderAsync);\r\n    orchestrationDetailsState: OrchestrationDetailsState = new OrchestrationDetailsState(this.loginState.getAuthorizationHeaderAsync);\r\n}"],"sourceRoot":""}