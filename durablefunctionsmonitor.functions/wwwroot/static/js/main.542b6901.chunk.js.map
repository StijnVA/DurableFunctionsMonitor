{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/ErrorMessage.tsx","components/MainMenu.tsx","states/DurableOrchestrationStatus.ts","components/Orchestrations.tsx","components/OrchestrationDetails.tsx","components/Main.tsx","states/ErrorMessageState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","ErrorMessage_ErrorMessage","_super","ErrorMessage","tslib_es6","prototype","render","this","props","react","Snackbar","className","anchorOrigin","vertical","horizontal","open","errorMessage","autoHideDuration","onClose","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","color","onClick","Close_default","mobx_module","bound","mobx_react_module","MainMenu_MainMenu","MainMenu","edge","Menu_default","evt","menuAnchorElement","currentTarget","Menu","anchorEl","keepMounted","undefined","MenuItem","showConnectionParamsDialog","Dialog","connectionParamsDialogOpen","DialogTitle","DialogContent","inProgress","LinearProgress","Box","height","DialogContentText","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","InputLabelProps","shrink","placeholder","isConnectionStringReadonly","connectionString","DialogActions","Button","saveConnectionParams","HistoryEventFields","DurableOrchestrationStatus","DurableOrchestrationStatusFields","Orchestrations_Orchestrations","Orchestrations","componentDidMount","_this","loadOrchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","type","formatDateTime","timeFrom","getDateTimeValue","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","width","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","timeTill","applyTimeTill","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","applyFilterValue","Typography","style","flex","autoRefresh","size","reloadOrchestrations","Refresh_default","FormHelperText","orchestrations","length","renderTable","renderEmptyTable","Table","TableHead","TableRow","TableCell","TableSortLabel","active","orderBy","direction","orderByDirection","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toLowerCase","Link","href","UriSuffix","name","createdTime","lastUpdatedTime","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","event","preventDefault","Date","slice","dt","toISOString","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","loadDetails","renderDetails","details","historyEvents","renderDialogs","orchestrationId","rewind","terminate","eventName","rows","eventData","raiseEvent","Grid","container","item","xs","sm","md","zeroMinWidth","InputProps","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","logo","Main_Main","Main","react_router_dom","basename","AppBar","position","src","Breadcrumbs","orchestrationDetailsState","mainMenuState","react_router","path","exact","component","orchestrationsState","params","ErrorMessageState_ErrorMessageState","ErrorMessageState","MainMenuState_MainMenuState","MainMenuState","apply","arguments","_inProgress","Object","defineProperty","_oldConnectionString","axios_default","get","MainMenuState_BackendBaseUri","response","data","err","finally","put","alert","reload","OrchestrationsState_OrchestrationsState","OrchestrationsState","call","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_noMorePagesToLoad","_pageSize","_oldFilterValue","setDate","getDate","_timeFrom","val","_timeTill","_oldTimeFrom","_oldTimeTill","isAutoRefresh","skip","filterClause","StartsWith","Contains","orderByClause","uri","OrchestrationsState_BackendBaseUri","_a","push","_autoRefreshToken","clearTimeout","setTimeout","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_sendEventDialogOpen","_orchestrationId","OrchestrationDetailsState_BackendBaseUri","post","requestBody","parse","appState","react_dom","getElementById","URL","toString","origin","fetch","status","headers","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.542b6901.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) { this._timeFrom = val; }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) { this._timeTill = val; }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const dt = new Date();\r\n        dt.setDate(dt.getDate() - 1);\r\n        this._timeFrom = dt;\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            if (!response.data.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response.data;\r\n                } else {\r\n                    this._orchestrations.push(...response.data);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);                \r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n            \r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n                \r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"error-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress, Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton edge=\"start\" color=\"inherit\">\r\n                    <MenuIcon onClick={evt => state.menuAnchorElement = evt.currentTarget} />\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Setings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            The below values will be saved to host.json and local.settings.json respectively.\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder={state.isConnectionStringReadonly ? \"[Change it via 'AzureWebJobsStorage' env variable]\" : \"\"}\r\n                            disabled={state.inProgress || state.isConnectionStringReadonly}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.hubName || (!state.isConnectionStringReadonly && !state.connectionString) || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    runtimeStatus: string;\r\n    input: any;\r\n    customStatus: string | null;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'input',\r\n    'output'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormHelperText, InputBase, InputLabel, LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationsState } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <TextField\r\n                        label=\"From &nbsp;&nbsp; (UTC)\"\r\n                        type=\"datetime-local\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        value={this.formatDateTime(state.timeFrom)}\r\n                        onChange={(evt) => { state.timeFrom = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeFrom()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />                    \r\n\r\n                    <Box width={20}/>\r\n\r\n                    <FormControl>\r\n                        <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                        <Checkbox\r\n                            id=\"till-checkbox\"\r\n                            className=\"till-checkbox\"\r\n                            checked={state.timeTillEnabled}\r\n                            onChange={(evt) => state.timeTillEnabled = evt.target.checked }\r\n                        />\r\n                    </FormControl>\r\n                    \r\n                    <TextField\r\n                        className=\"till-input\"\r\n                        label=\"(UTC)\"\r\n                        placeholder=\"[Now]\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                        disabled={!state.timeTillEnabled}\r\n                        value={state.timeTillEnabled ? this.formatDateTime(state.timeTill) : ''}\r\n                        onChange={(evt) => { state.timeTill = this.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeTill()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filteredColumn}\r\n                            onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                            inputProps={{ id: \"filtered-column-select\" }}>\r\n                            \r\n                            <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                            {DurableOrchestrationStatusFields.map(col => {\r\n                                return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            value={state.filterOperator}\r\n                            onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                            inputProps={{ id: \"filter-operator-select\" }}>\r\n                            <MenuItem value={0}>Equals</MenuItem>\r\n                            <MenuItem value={1}>Starts With</MenuItem>\r\n                            <MenuItem value={2}>Contains</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <TextField\r\n                        label=\"Filter Value\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"[some text or 'null']\"\r\n                        disabled={state.filteredColumn === '0'}\r\n                        value={state.filterValue}\r\n                        onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                        onBlur={() => state.applyFilterValue()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={10} />\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n                    \r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            inputProps={{ id: \"auto-refresh-select\" }}\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        >\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n                    \r\n                    <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.reloadOrchestrations()} >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n\r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {state.orchestrations.length} items shown\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>\r\n                                    <TableSortLabel\r\n                                        active={state.orderBy === col}\r\n                                        direction={state.orderByDirection}\r\n                                        onClick={() => state.orderBy = col}\r\n                                    >\r\n                                        {col}\r\n                                    </TableSortLabel>\r\n                                </TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <Link href={`${UriSuffix}/orchestrations/${orchestration.instanceId}`} target='_blank'>\r\n                                        {orchestration.instanceId}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    private getDateTimeValue(evt: any): Date {\r\n        return new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n    }\r\n\r\n    private formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, Grid, InputBase, InputLabel, LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, Toolbar, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                    Rewind\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                    Terminate\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                    Raise Event\r\n                </Button>\r\n                \r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {this.renderDetails(state.details)}\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!state.details.historyEvents ? state.details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {(!!state.details.historyEvents && state.details.historyEvents.length) ?\r\n                this.renderTable(state.details.historyEvents) :\r\n                this.renderEmptyTable()}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n            {this.renderDialogs(state)}\r\n        </div>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        \r\n        return (<div>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        </div>);\r\n    }\r\n\r\n    private renderDetails(details: any): JSX.Element {\r\n\r\n        return (\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any>): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>{col}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly \r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { MainMenu } from './MainMenu';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <BrowserRouter basename={UriSuffix}>\r\n                <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                    <Toolbar>\r\n                        <img src={logo} width=\"30px\"></img>\r\n\r\n                        <Box width={5} />\r\n\r\n                        <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                            Durable Functions Monitor\r\n                        </Typography>\r\n\r\n                        <Breadcrumbs color=\"inherit\">\r\n                            <Link color=\"inherit\" href={UriSuffix}>\r\n                                / orchestrations\r\n                            </Link>\r\n                            <Typography color=\"inherit\">\r\n                                {state.orchestrationDetailsState.orchestrationId}\r\n                            </Typography>\r\n                        </Breadcrumbs>\r\n\r\n                        <Box width={5} />\r\n                        <Typography style={{ flex: 1 }} />\r\n\r\n                        {!state.orchestrationDetailsState.orchestrationId && (<MainMenu state={state.mainMenuState} />)}\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Route path=\"/\" exact component={() => (<Orchestrations state={state.orchestrationsState} />)} />\r\n\r\n                <Route path=\"/orchestrations/:id\" component={(props: any) => {\r\n                    state.orchestrationDetailsState.orchestrationId = props.match.params.id;\r\n                    return (<OrchestrationDetails state={state.orchestrationDetailsState} />);\r\n                }} />\r\n\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isConnectionStringReadonly(): boolean { return !this._oldConnectionString };\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            this.connectionString = response.data.connectionString;\r\n            this._oldConnectionString = this.connectionString;\r\n            this.hubName = response.data.hubName;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        const uri = `${BackendBaseUri}/manage-connection`;\r\n        this._inProgress = true;\r\n\r\n        axios.put(uri, {connectionString: this.connectionString, hubName: this.hubName}).then(() => {\r\n\r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            if (this._oldConnectionString !== this.connectionString) {\r\n                // Didn't find a way to automatically pick up the new Connection String, so just asking user to restart the app\r\n                alert(`You've changed the Connection String, and the new value cannot currently be picked up automatically. Please, restart the Function Host.`);\r\n            } else {\r\n                // Refreshing the window\r\n                location.reload();\r\n            }\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _oldConnectionString: string;\r\n}","import { observable, computed } from 'mobx'\r\nimport axios from 'axios';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n    set orchestrationId(val: string) {\r\n        this._orchestrationId = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._sendEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._sendEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        axios.post(uri, requestBody).then(() => { \r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        })\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `${BackendBaseUri}/orchestrations('${this._orchestrationId}')`;\r\n\r\n        axios.get(uri).then(response => {\r\n\r\n            if (!response.data) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            this.details = response.data;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _orchestrationId: string;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _sendEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\n\r\n// Main Application State\r\nexport class MainState {\r\n    mainMenuState: MainMenuState = new MainMenuState();\r\n    orchestrationsState: OrchestrationsState = new OrchestrationsState();\r\n    orchestrationDetailsState: OrchestrationDetailsState = new OrchestrationDetailsState();\r\n}"],"sourceRoot":""}