{"version":3,"sources":["logo.svg","registerServiceWorker.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/OrchestrationsState.ts","components/OrchestrationLink.tsx","states/ErrorMessageState.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","LoginIcon","observer","React","render","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","hubName","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","FilterOperatorEnum","ShowEntityTypeEnum","DurableOrchestrationStatusFields","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","call","s","replace","ErrorMessageState","observable","OrchestrationsState","_inProgress","_orchestrations","_autoRefresh","val","_localStorage","setItem","toString","loadOrchestrations","_timeFrom","resetOrderBy","_timeTill","reloadOrchestrations","_orderByDirection","_orderBy","_filterValue","_filterOperator","_filteredColumn","_showEntityType","_oldFilterValue","_backendClient","constructor","momentFrom","super","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","setItems","fieldName","isAutoRefresh","timeFrom","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","skip","length","orderByClause","orderByDirection","uri","response","push","clearTimeout","setTimeout","err","data","finally","computed","ShowBoth","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","placeholder","type","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","TableBody","orchestration","cellStyle","verticalAlign","toLowerCase","InputBase","multiline","rowsMax","JSON","stringify","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields","details","sm","md","zeroMinWidth","OrchestrationButtons","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","setCustomStatusDialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","newCustomStatus","setCustomStatus","isCustomStatusDirty","OrchestrationFields","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","logo","require","Main","utils","MomentUtils","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient","_getAuthorizationHeaderAsync","method","url","Promise","resolve","reject","headers","axios","request","process","r","LoginState","_isLoggedIn","_userName","_aadApp","login","get","loginWithEasyAuthConfig","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","Msal","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","isReadOnly","alert","accountName","version","OrchestrationDetailsState","_orchestrationId","_raiseEventDialogOpen","_setCustomStatusDialogOpen","requestBody","parse","history","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","setPurgeHistoryHandler","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","pathname","startsWith","substr","ReactDOM","getElementById","URL","origin","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34c2782a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            {\r\n                                state.isReadonly ?\r\n                                    \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                    \"The below values will be saved to local.settings.json file.\"\r\n                            }\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        {(!state.isReadonly) && (\r\n                            <Button\r\n                                onClick={() => state.saveConnectionParams()}\r\n                                disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                                color=\"secondary\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        )}\r\n\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`/orchestrations/${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, InputBase, InputLabel,\r\n    LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography, Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Grid container className=\"toolbar-grid1\">\r\n                    <Grid item xs={12}>\r\n\r\n                        <KeyboardDateTimePicker\r\n                            className=\"from-input\"\r\n                            style={{ marginLeft: 10 }}\r\n                            ampm={false}\r\n                            autoOk={true}\r\n                            label=\"From &nbsp;&nbsp; (UTC)\"\r\n                            invalidDateMessage=\"\"\r\n                            format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                            disabled={state.inProgress}\r\n                            value={state.timeFrom}\r\n                            onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            onBlur={() => state.applyTimeFrom()}\r\n                            onAccept={() => state.applyTimeFrom()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                        <FormControl>\r\n                            <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                            <Checkbox\r\n                                id=\"till-checkbox\"\r\n                                className=\"till-checkbox\"\r\n                                disabled={state.inProgress}\r\n                                checked={state.timeTillEnabled}\r\n                                onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        {state.timeTillEnabled ? (\r\n                            <KeyboardDateTimePicker\r\n                                className=\"till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"(UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeTill()}\r\n                                onAccept={() => state.applyTimeTill()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        ) : (\r\n                            <TextField\r\n                                className=\"till-input\"\r\n                                label=\"(UTC)\"\r\n                                placeholder=\"[Now]\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                type=\"text\"\r\n                                disabled={true}\r\n                            />\r\n                        )}                        \r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"toolbar-grid2\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl>\r\n                            <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select filtered-column-input\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filteredColumn}\r\n                                onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                {DurableOrchestrationStatusFields.map(col => {\r\n                                    return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                })}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className=\"toolbar-grid2-item1-select\">\r\n                            <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filterOperator}\r\n                                onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                inputProps={{ id: \"filter-operator-select\" }}>\r\n                                <MenuItem value={0}>Equals</MenuItem>\r\n                                <MenuItem value={1}>Starts With</MenuItem>\r\n                                <MenuItem value={2}>Contains</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                        <TextField\r\n                            className=\"filter-value-input\"\r\n                            label=\"Filter Value\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder=\"[some text or 'null']\"\r\n                            disabled={state.filteredColumn === '0' || state.inProgress}\r\n                            value={state.filterValue}\r\n                            onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                            onBlur={() => state.applyFilterValue()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <RadioGroup\r\n                    value={state.showEntityType}\r\n                    onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                >\r\n                    <FormControlLabel                            \r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                    />\r\n                </RadioGroup>\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Grid container className=\"toolbar-grid3\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl className=\"form-control-float-right\">\r\n                            <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                inputProps={{ id: \"auto-refresh-select\" }}\r\n                                value={state.autoRefresh}\r\n                                onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            >\r\n                                <MenuItem value={0}>Never</MenuItem>\r\n                                <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                        <Button\r\n                            className=\"refresh-button form-control-float-right\"\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            size=\"large\"\r\n                            onClick={() => state.reloadOrchestrations()}\r\n                        >\r\n                            <RefreshIcon />\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Toolbar>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n            </FormHelperText>\r\n\r\n            {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n            {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.customStatus)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Grid, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n                </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                {state.details.entityType === \"Orchestration\" && (\r\n                    <OrchestrationButtons state={state} />\r\n                )}\r\n                {state.details.entityType === \"DurableEntity\" && (\r\n                    <DurableEntityButtons state={state} />\r\n                )}\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"details-refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {state.details.entityType === \"Orchestration\" && (\r\n                <OrchestrationFields details={state.details} />\r\n            )}\r\n            {state.details.entityType === \"DurableEntity\" && (\r\n                <DurableEntityFields details={state.details} />\r\n            )}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </div>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"Till (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === \"Orchestration\" && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nconst logo = require('../logo.svg');\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href=\"\">\r\n                                    / instances\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendUri = process.env.REACT_APP_BACKEND_BASE_URI + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this.details.customStatus ? JSON.stringify(this.details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this.details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this.details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n    \r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <Main state={appState}/>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n\r\nregisterServiceWorker();\r\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}