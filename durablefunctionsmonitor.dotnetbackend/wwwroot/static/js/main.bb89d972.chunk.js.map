{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","components/OrchestrationLink.tsx","states/ErrorMessageState.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","states/MainState.ts","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","ShowEntityTypeEnum","LoginIcon","observer","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","React","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","hubName","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","dt","Date","slice","toISOString","err","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","DurableOrchestrationStatusFields","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","call","s","replace","ErrorMessageState","observable","OrchestrationsState","_backendClient","_localStorage","timeFrom","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldFilterValue","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","setDate","getDate","_timeFrom","timeTillString","_timeTill","filteredColumnString","_filteredColumn","filterOperatorString","_filterOperator","filterValueString","_filterValue","showEntityTypeString","_showEntityType","autoRefreshString","_autoRefresh","Number","orderByString","_orderBy","orderByDirectionString","_orderByDirection","_inProgress","_orchestrations","val","setItem","toString","loadOrchestrations","resetOrderBy","reloadOrchestrations","setItems","fieldName","isAutoRefresh","skip","length","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","orderByClause","orderByDirection","uri","response","push","clearTimeout","setTimeout","data","finally","computed","ShowBoth","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","Grid","container","item","xs","style","marginLeft","type","formatDateTime","getDateTimeValue","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","placeholder","applyTimeTill","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","applyFilterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","TableBody","orchestration","cellStyle","verticalAlign","toLowerCase","InputBase","multiline","rowsMax","JSON","stringify","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields","details","sm","md","zeroMinWidth","OrchestrationButtons","rewindConfirmationOpen","terminateConfirmationOpen","dialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","OrchestrationFields","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","PurgeHistoryDialog","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","isValid","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","logo","require","Main","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient","_getAuthorizationHeaderAsync","method","url","Promise","resolve","reject","headers","axios","request","process","r","LoginState","_aadApp","login","_isLoggedIn","_userName","get","loginWithEasyAuthConfig","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","Msal","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState","_purgeHistoryDialogState","_oldConnectionString","_oldHubName","_isReadOnly","isReadOnly","alert","accountName","version","OrchestrationDetailsState","_orchestrationId","_dialogOpen","requestBody","parse","history","PurgeHistoryDialogState","_instancesDeleted","_statuses","Set","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","vsCodeApi","acquireVsCodeApi","setPurgeHistoryHandler","getAuthorizationHeaderAsync","OrchestrationIdFromVsCode","pathname","startsWith","substr","ReactDOM","getElementById","URL","origin","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bb89d972.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n        \r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n\r\n        var timeFrom: Date;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            timeFrom = new Date(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            timeFrom = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n        }\r\n        this._timeFrom = timeFrom;\r\n        this._oldTimeFrom = timeFrom;\r\n\r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = new Date(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            {\r\n                                state.isReadonly ?\r\n                                    \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively\" :\r\n                                    \"The below values will be saved to local.settings.json file.\"\r\n                            }\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        {(!state.isReadonly) && (\r\n                            <Button\r\n                                onClick={() => state.saveConnectionParams()}\r\n                                disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                                color=\"secondary\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        )}\r\n\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\nexport class DateTimeHelpers\r\n{\r\n    public static getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`/orchestrations/${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, InputBase, InputLabel,\r\n    LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography, Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                                onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n                            <TextField\r\n                                className=\"till-input\"\r\n                                label=\"(UTC)\"\r\n                                placeholder=\"[Now]\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                                disabled={!state.timeTillEnabled || state.inProgress}\r\n                                value={state.timeTillEnabled ? DateTimeHelpers.formatDateTime(state.timeTill) : ''}\r\n                                onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                                onBlur={() => state.applyTimeTill()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={0}>Equals</MenuItem>\r\n                                    <MenuItem value={1}>Starts With</MenuItem>\r\n                                    <MenuItem value={2}>Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <RadioGroup\r\n                        value={state.showEntityType}\r\n                        onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                    >\r\n                        <FormControlLabel                            \r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                        />\r\n                    </RadioGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.reloadOrchestrations()}\r\n                            >\r\n                                <RefreshIcon />\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.customStatus)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Grid, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n                </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.dialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.dialogOpen}\r\n                onClose={() => state.dialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                {state.details.entityType === \"Orchestration\" && (\r\n                    <OrchestrationButtons state={state} />\r\n                )}\r\n                {state.details.entityType === \"DurableEntity\" && (\r\n                    <DurableEntityButtons state={state} />\r\n                )}\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {state.details.entityType === \"Orchestration\" && (\r\n                <OrchestrationFields details={state.details} />\r\n            )}\r\n            {state.details.entityType === \"DurableEntity\" && (\r\n                <DurableEntityFields details={state.details} />\r\n            )}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </div>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, TextField, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <TextField\r\n                                className=\"purge-history-from-input\"\r\n                                label=\"From (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                                onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <TextField\r\n                                className=\"purge-history-till-input\"\r\n                                label=\"Till (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeTill)}\r\n                                onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === \"Orchestration\" && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nconst logo = require('../logo.svg');\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href=\"\">\r\n                                    / instances\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendUri = process.env.REACT_APP_BACKEND_BASE_URI + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; }\r\n    set dialogOpen(val: boolean) {\r\n        this._dialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.dialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _dialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            var timeFrom: Date = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n            this.timeFrom = timeFrom;\r\n\r\n            this.timeTill = new Date();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean { return this._statuses.size > 0; };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom,\r\n            timeTill: this.timeTill,\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: Date = new Date();\r\n    @observable\r\n    timeTill: Date = new Date();\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        console.log('VsCodeBackendClient ctor');\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n\r\n            const message = event.data;\r\n\r\n            console.log('Message: ' + JSON.stringify(message));\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                console.log('Executing handler for messageId ' + message.id + ' - ' + JSON.stringify(requestHandler));\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n\r\n                    console.log('handler succeeded');\r\n                    \r\n                } catch(err) {\r\n                    console.log('Error: ' + err);\r\n                }\r\n\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.data) {\r\n                requestPromise.resolve(message.data);\r\n            } else {\r\n                requestPromise.reject(message.err);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}