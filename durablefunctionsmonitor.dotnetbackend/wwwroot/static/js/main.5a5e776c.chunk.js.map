{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/OrchestrationsState.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","components/OrchestrationLink.tsx","states/ErrorMessageState.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","FilterOperatorEnum","ShowEntityTypeEnum","LoginIcon_LoginIcon","_super","LoginIcon","Object","tslib_es6","prototype","render","this","props","react","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","mobx_react_module","ErrorMessage_ErrorMessage","ErrorMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","Close_default","mobx_module","bound","MainMenu_MainMenu","MainMenu","componentDidMount","setWindowTitle","Menu_default","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","InputLabelProps","shrink","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","getDateTimeValue","dt","Date","slice","toISOString","err","formatDateTime","HistoryEventFields","DurableOrchestrationStatus","DurableOrchestrationStatusFields","OrchestrationLink_OrchestrationLink","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","UriSuffix","call","ErrorMessageState_ErrorMessageState","ErrorMessageState","OrchestrationsState_OrchestrationsState","OrchestrationsState","_backendClient","_localStorage","timeFrom","_this","_inProgress","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_showEntityType","ShowBoth","_noMorePagesToLoad","_pageSize","_oldFilterValue","timeFromString","getItem","setDate","getDate","_timeFrom","_oldTimeFrom","timeTillString","_timeTill","_oldTimeTill","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","defineProperty","val","setItem","toString","loadOrchestrations","resetOrderBy","reloadOrchestrations","applyTimeFrom","applyTimeTill","applyFilterValue","setItems","fieldName","isAutoRefresh","skip","length","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","StartsWith","Contains","orderByClause","orderByDirection","uri","response","_a","push","apply","_autoRefreshToken","clearTimeout","setTimeout","data","finally","Orchestrations_Orchestrations","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","Grid","container","item","xs","style","marginLeft","type","onBlur","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","placeholder","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","Refresh_default","FormHelperText","orchestrations","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toLowerCase","name","createdTime","lastUpdatedTime","lastEvent","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","customStatus","event","preventDefault","DurableEntityButtons_DurableEntityButtons","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields_DurableEntityFields","DurableEntityFields","details","sm","md","zeroMinWidth","entityId","InputProps","OrchestrationButtons_OrchestrationButtons","OrchestrationButtons","rewindConfirmationOpen","terminateConfirmationOpen","dialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","OrchestrationFields_OrchestrationFields","OrchestrationFields","historyEvents","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","loadDetails","entityType","PurgeHistoryDialog_PurgeHistoryDialog","PurgeHistoryDialog","instancesDeleted","FormLabel","FormGroup","row","PurgeHistoryDialog_RuntimeStatusCheckbox","purgeHistory","isValid","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","logo","Main_Main","Main","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient_BackendClient","BackendClient","_getAuthorizationHeaderAsync","method","url","Promise","resolve","reject","headers","axios_default","request","r","LoginState_LoginState","LoginState","_isLoggedIn","login","_userName","get","LoginState_BackendBaseUri","loginWithEasyAuthConfig","_aadApp","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","lib_es6","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState_MainMenuState","MainMenuState","_purgeHistoryDialogState","_isReadOnly","_oldConnectionString","_oldHubName","isReadOnly","alert","accountName","version","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_orchestrationId","_dialogOpen","requestBody","parse","history","PurgeHistoryDialogState_PurgeHistoryDialogState","PurgeHistoryDialogState","_statuses","Set","_instancesDeleted","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","_i","items_1","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","setPurgeHistoryHandler","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","MainState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","uriSuffix","MainState_UriSuffix","pathname","startsWith","substr","react_dom","getElementById","URL","origin","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5a5e776c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n        \r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n\r\n        var timeFrom: Date;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            timeFrom = new Date(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            timeFrom = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n        }\r\n        this._timeFrom = timeFrom;\r\n        this._oldTimeFrom = timeFrom;\r\n\r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = new Date(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Orchestration Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            {\r\n                                state.isReadonly ?\r\n                                    \"Change the below values via your application settings ('DfmHubName' and 'AzureWebJobsStorage' respectively\" :\r\n                                    \"The below values will be saved to local.settings.json file.\"\r\n                            }\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress || state.isReadonly}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            InputLabelProps={{ shrink: true }}\r\n                            disabled={state.inProgress || state.isReadonly}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.isDirty || state.isReadonly || !state.hubName || !state.connectionString || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\nexport class DateTimeHelpers\r\n{\r\n    public static getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`${UriSuffix}/orchestrations/${this.props.orchestrationId}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormControlLabel, FormLabel, FormHelperText, Grid, InputBase, InputLabel,\r\n    LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography, Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Grid container className=\"toolbar-grid1\">\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                className=\"from-input\"\r\n                                style={{ marginLeft: 10 }}\r\n                                label=\"From &nbsp;&nbsp; (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                                onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                                onBlur={() => state.applyTimeFrom()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                            <FormControl>\r\n                                <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                                <Checkbox\r\n                                    id=\"till-checkbox\"\r\n                                    className=\"till-checkbox\"\r\n                                    disabled={state.inProgress}\r\n                                    checked={state.timeTillEnabled}\r\n                                    onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                                />\r\n                            </FormControl>\r\n                            <TextField\r\n                                className=\"till-input\"\r\n                                label=\"(UTC)\"\r\n                                placeholder=\"[Now]\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                                disabled={!state.timeTillEnabled || state.inProgress}\r\n                                value={state.timeTillEnabled ? DateTimeHelpers.formatDateTime(state.timeTill) : ''}\r\n                                onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                                onBlur={() => state.applyTimeTill()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"toolbar-grid2\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl>\r\n                                <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select filtered-column-input\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filteredColumn}\r\n                                    onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                    inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                    <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                    {DurableOrchestrationStatusFields.map(col => {\r\n                                        return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                    })}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className=\"toolbar-grid2-item1-select\">\r\n                                <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    disabled={state.inProgress}\r\n                                    value={state.filterOperator}\r\n                                    onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                    inputProps={{ id: \"filter-operator-select\" }}>\r\n                                    <MenuItem value={0}>Equals</MenuItem>\r\n                                    <MenuItem value={1}>Starts With</MenuItem>\r\n                                    <MenuItem value={2}>Contains</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                            <TextField\r\n                                className=\"filter-value-input\"\r\n                                label=\"Filter Value\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                placeholder=\"[some text or 'null']\"\r\n                                disabled={state.filteredColumn === '0' || state.inProgress}\r\n                                value={state.filterValue}\r\n                                onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                                onBlur={() => state.applyFilterValue()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <RadioGroup\r\n                        value={state.showEntityType}\r\n                        onChange={(evt) => state.showEntityType = (evt.target as HTMLSelectElement).value}\r\n                    >\r\n                        <FormControlLabel                            \r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"entity-type-radio\"\r\n                            disabled={state.inProgress}\r\n                            value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                            control={<Radio />}\r\n                            label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                        />\r\n                    </RadioGroup>\r\n\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Grid container className=\"toolbar-grid3\">\r\n                        <Grid item xs={12}>\r\n                            <FormControl className=\"form-control-float-right\">\r\n                                <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                                <Select\r\n                                    className=\"toolbar-select\"\r\n                                    inputProps={{ id: \"auto-refresh-select\" }}\r\n                                    value={state.autoRefresh}\r\n                                    onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                                >\r\n                                    <MenuItem value={0}>Never</MenuItem>\r\n                                    <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                    <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                    <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                            <Button\r\n                                className=\"refresh-button form-control-float-right\"\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                size=\"large\"\r\n                                onClick={() => state.reloadOrchestrations()}\r\n                            >\r\n                                <RefreshIcon />\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.customStatus)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Grid, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n                </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.dialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.dialogOpen}\r\n                onClose={() => state.dialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>{col}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                {state.details.entityType === \"Orchestration\" && (\r\n                    <OrchestrationButtons state={state} />\r\n                )}\r\n                {state.details.entityType === \"DurableEntity\" && (\r\n                    <DurableEntityButtons state={state} />\r\n                )}\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {state.details.entityType === \"Orchestration\" && (\r\n                <OrchestrationFields details={state.details} />\r\n            )}\r\n            {state.details.entityType === \"DurableEntity\" && (\r\n                <DurableEntityFields details={state.details} />\r\n            )}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </div>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, TextField\r\n} from '@material-ui/core';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Orchestration Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops orchestration states from the underlying storage and cannot be undone.\r\n                            </DialogContentText>\r\n\r\n                            <TextField\r\n                                className=\"purge-history-from-input\"\r\n                                label=\"From (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                                onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <TextField\r\n                                className=\"purge-history-till-input\"\r\n                                label=\"Till (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeTill)}\r\n                                onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>Remove orchestrations with the following status:</FormLabel>\r\n                                <FormGroup row>\r\n\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                    <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n\r\n                                </FormGroup>\r\n                                <FormLabel>(Only these three are supported by the API, sorry)</FormLabel>\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={UriSuffix}>\r\n                                    / instances\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendBaseUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendBaseUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; }\r\n    set dialogOpen(val: boolean) {\r\n        this._dialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.dialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _dialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            var timeFrom: Date = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n            this.timeFrom = timeFrom;\r\n\r\n            this.timeTill = new Date();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean { return this._statuses.size > 0; };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            timeFrom: this.timeFrom,\r\n            timeTill: this.timeTill,\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: Date = new Date();\r\n    @observable\r\n    timeTill: Date = new Date();\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n                requestHandler(message.data);\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.data) {\r\n                requestPromise.resolve(message.data);\r\n            } else {\r\n                requestPromise.reject(message.err);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `${UriSuffix}/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}