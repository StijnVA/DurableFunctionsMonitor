{"version":3,"sources":["logo.svg","registerServiceWorker.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","components/OrchestrationLink.tsx","states/ErrorMessageState.ts","states/OrchestrationsState.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","LoginIcon","observer","React","render","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","hubName","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","dt","Date","slice","toISOString","err","t","isValid","result","moment","utc","isAfter","MinMoment","isBefore","MaxMoment","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","DurableOrchestrationStatusFields","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","call","s","replace","ErrorMessageState","observable","FilterOperatorEnum","ShowEntityTypeEnum","OrchestrationsState","_inProgress","_orchestrations","_autoRefresh","val","_localStorage","setItem","toString","loadOrchestrations","_timeFrom","resetOrderBy","_timeTill","reloadOrchestrations","_orderByDirection","_orderBy","_filterValue","_filterOperator","_filteredColumn","_showEntityType","_oldFilterValue","_backendClient","constructor","momentFrom","super","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","setItems","fieldName","isAutoRefresh","timeFrom","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","skip","length","orderByClause","orderByDirection","uri","response","push","clearTimeout","setTimeout","data","finally","computed","ShowBoth","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","id","checked","timeTillEnabled","placeholder","type","Select","filteredColumn","inputProps","map","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","TableBody","orchestration","cellStyle","verticalAlign","toLowerCase","InputBase","multiline","rowsMax","JSON","stringify","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields","details","sm","md","zeroMinWidth","OrchestrationButtons","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","setCustomStatusDialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","newCustomStatus","setCustomStatus","isCustomStatusDirty","OrchestrationFields","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","OrchestrationDetails","loadDetails","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","logo","require","Main","utils","MomentUtils","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient","_getAuthorizationHeaderAsync","method","url","Promise","resolve","reject","headers","axios","request","process","r","LoginState","_isLoggedIn","_userName","_aadApp","login","get","loginWithEasyAuthConfig","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","Msal","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","isReadOnly","alert","accountName","version","OrchestrationDetailsState","_orchestrationId","_raiseEventDialogOpen","_setCustomStatusDialogOpen","requestBody","parse","history","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","setPurgeHistoryHandler","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","pathname","startsWith","substr","ReactDOM","getElementById","URL","origin","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yUAAAA,EAAOC,QAAU,IAA0B,kC,2DCW3C,MAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAMC,IACLH,QAAQG,MAAM,4CAA6CA,K,oNCrEjE,IAAaC,EADZC,YACD,EADA,cAC+BC,YAE3BC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OACI,2BACI,gBAACY,EAAA,EAAD,CAAQC,MAAOb,EAAMc,sBAAwB,YAAc,UACvDC,QAASC,GAAOhB,EAAMiB,kBAAoBD,EAAIE,eAE9C,gBAACC,EAAA,EAAD,MACA,gBAACC,EAAA,EAAD,CAAKC,MAAO,IACZ,gBAACC,EAAA,EAAD,CAASC,MAAOvB,EAAMc,sBAAwB,qDAAuD,IACjG,gBAACU,EAAA,EAAD,CAAYX,MAAOb,EAAMc,sBAAwB,YAAc,WAC1Dd,EAAMc,sBAAwB,YAAcd,EAAMyB,aAK7DzB,EAAMc,uBACJ,gBAACY,EAAA,EAAD,CACIC,SAAU3B,EAAMiB,kBAChBW,aAAW,EACXC,OAAQ7B,EAAMiB,kBACda,QAAS,IAAM9B,EAAMiB,uBAAoBc,GAEzC,gBAACC,EAAA,EAAD,CAAUjB,QAAS,IAAMf,EAAMiC,UAA/B,iCAIR,gBAACC,EAAA,EAAD,CAAQL,MAAO7B,EAAMmC,YACjB,gBAACC,EAAA,EAAD,MAEMpC,EAAMqC,cACJ,2BACI,gBAACC,EAAA,EAAD,CAAWC,UAAU,kBACjB,gBAACC,EAAA,EAAD,OAEJ,gBAACC,EAAA,EAAD,gCAGLzC,EAAMqC,cACL,2BACI,gBAACC,EAAA,EAAD,CAAWC,UAAU,kBACjB,gBAACG,EAAA,EAAD,CAAO7B,MAAM,YAAY8B,SAAS,WAEtC,gBAACF,EAAA,EAAD,CAAmB5B,MAAM,aAAzB,iBAAoDb,EAAMqC,sBA9C1F,E,iJCFA,IAAaO,GAAb,EAsCKC,IAAOC,MAvCXvC,aACD,EADA,cACkCC,YAE9BC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OAEI,gBAAC+C,EAAA,EAAD,CACIR,UAAU,mBACVS,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CrB,OAAQ7B,EAAMqC,aACdc,iBAAkB,IAClBrB,QAASpB,KAAK0C,aAEd,gBAACC,EAAA,EAAD,CACId,UAAU,yBACVe,QACI,4BACI,gBAAC,IAAD,CAAWf,UAAU,eACpBvC,EAAMqC,cAGfQ,OAAQ,CACJ,gBAACU,EAAA,EAAD,CACIC,IAAI,QACJC,aAAW,QACX5C,MAAM,UACNE,QAASL,KAAK0C,aAEd,gBAAC,IAAD,WAUhBA,cACJ1C,KAAKC,MAAMX,MAAMqC,aAAe,KAxCxC,4H,MCCA,IAAaqB,EADZnD,YACD,EADA,cAC8BC,YAE1BmD,oBAEIjD,KAAKC,MAAMX,MAAM4D,iBAGrBnD,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OACI,2BAEI,gBAACuD,EAAA,EAAD,CAAY1C,MAAM,UACdE,QAASC,GAAOhB,EAAMiB,kBAAoBD,EAAIE,eAE9C,gBAAC,IAAD,OAGJ,gBAACQ,EAAA,EAAD,CACIC,SAAU3B,EAAMiB,kBAChBW,aAAW,EACXC,OAAQ7B,EAAMiB,kBACda,QAAS,IAAM9B,EAAMiB,uBAAoBc,GAEzC,gBAACC,EAAA,EAAD,CAAUjB,QAAS,IAAMf,EAAM6D,8BAA/B,yCACA,gBAAC7B,EAAA,EAAD,CAAUjB,QAAS,IAAMf,EAAM8D,0BAA/B,8BAGJ,gBAAC5B,EAAA,EAAD,CACIL,KAAM7B,EAAM+D,2BACZjC,QAAS,IAAM9B,EAAM+D,4BAA6B,GAElD,gBAACC,EAAA,EAAD,2CACA,gBAAC5B,EAAA,EAAD,KAEKpC,EAAMiE,WAAc,gBAACC,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IAEzD,gBAAC1B,EAAA,EAAD,KAEQzC,EAAMoE,WACF,+GACA,+DAIZ,gBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,MAAM,WACNC,WAAS,EACTC,SAAU1E,EAAMiE,WAChBU,WAAY,CAAEC,SAAU5E,EAAMoE,YAC9BS,gBAAiB,CAAEC,QAAQ,GAC3BC,MAAO/E,EAAMgF,QACbC,SAAWjE,GAAQhB,EAAMgF,QAAUhE,EAAIkE,OAAOH,QAGlD,gBAACV,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,MAAM,kCACNC,WAAS,EACTC,SAAU1E,EAAMiE,WAChBU,WAAY,CAAEC,SAAU5E,EAAMoE,YAC9BS,gBAAiB,CAAEC,QAAQ,GAC3BC,MAAO/E,EAAMmF,iBACbF,SAAWjE,GAAQhB,EAAMmF,iBAAmBnE,EAAIkE,OAAOH,QAG3D,gBAAC,EAAD,CAAc/E,MAAOA,KAGzB,gBAACoF,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAM+D,4BAA6B,EAAOlD,MAAM,WAAvE,WAIGb,EAAMoE,YACL,gBAACxD,EAAA,EAAD,CACIG,QAAS,IAAMf,EAAMqF,uBACrBX,UAAW1E,EAAMsF,UAAYtF,EAAMgF,UAAYhF,EAAMmF,kBAAoBnF,EAAMiE,WAC/EpD,MAAM,aAHV,eA/E5B,E,2NCbO,MAAM0E,GAET,wBAA+BvE,GAE3B,IAAIwE,EAAK,IAAIC,KAAKzE,EAAIkE,OAAOH,MAAMW,MAAM,EAAG,IAAM,QAGlD,IACIF,EAAGG,cACL,MAAOC,GACLJ,EAAK,IAAIC,KAGb,OAAOD,EAGX,mBAA0BK,GAEtB,IAAKA,IAAMA,EAAEC,UACT,OAAOD,EAIX,MAAME,EAASC,KAAOH,EAAEF,aAAY,GAAMD,MAAM,EAAG,IAAM,KAEzD,OADAK,EAAOE,MACAF,EAOX,qBAA4BF,GACxB,QAASA,GAAKA,EAAEC,WAAaD,EAAEK,QAAQX,GAAgBY,YAAcN,EAAEO,SAASb,GAAgBc,WAGpG,sBAA6Bb,GACzB,OAAOA,EAAGG,cAAcD,MAAM,EAAG,KArC5BH,GA6BMY,UAAYH,KAAO,cAAcC,MA7BvCV,GA8BMc,UAAYL,KAAO,cAAcC,MCpB7C,MAAMK,GAAqB,CAC9B,YACA,YACA,OACA,gBACA,SACA,WAaG,MAAMC,GAA4B,cAAD,KACpCC,gBADoC,OAEpCC,UAFoC,OAGpCC,cAHoC,OAIpCC,mBAJoC,OAKpCC,gBALoC,OAMpCC,eANoC,OAOpCC,WAPoC,OAQpCC,kBARoC,OASpCC,YAToC,OAUpCC,iBAVoC,OAWpCC,qBAXoC,OAYpCC,mBAZoC,GAgBjC,MAAMC,GAAmC,CAC5C,aACA,OACA,cACA,kBACA,gBACA,YACA,QACA,SACA,gB,aC9CJ,IAAaC,IAAb,GAqBKxE,IAAOC,MAtBXvC,aACD,GADA,cACuCC,YAEnCC,SAEI,OAAIC,KAAKC,MAAM2G,cAAcC,SAGrB,gBAACC,EAAA,EAAD,CAAMC,KAAK,IAAI1G,QAASL,KAAKgH,eACxBhH,KAAKC,MAAMgH,iBAMhB,gBAACH,EAAA,EAAD,CAAMC,KAAI,0BAAqB/G,KAAKkH,2BAA2BlH,KAAKC,MAAMgH,kBAAoBzC,OAAO,UAChGxE,KAAKC,MAAMgH,iBAOpBD,gBACJhH,KAAKC,MAAM2G,cAAcO,KAAK,kBAAmBnH,KAAKC,MAAMgH,iBAIxDC,2BAA2BE,GAC/B,OAAOA,EAAEC,QAAQ,gBAAiB,MA5B1C,uI,yBCPO,IAAMC,IAAb,GAAO,MAAyB,cAAD,4CAA/B,4CAEKC,KAFL,wEAG2B,MAH3B,I,wCCMO,IAAKC,GAMAC,I,SANAD,O,mBAAAA,I,2BAAAA,I,wBAAAA,Q,cAMAC,O,uBAAAA,I,2CAAAA,I,8CAAAA,Q,KAOL,IAAMC,IAAb,GAAO,cAAkCJ,GAErC,iBAC4B,OAAOtH,KAAK2H,YAExC,qBACqD,OAAO3H,KAAK4H,gBAEjE,kBAC4B,OAAO5H,KAAK6H,aACxC,gBAAgBC,GACZ9H,KAAK6H,aAAeC,EACpB9H,KAAK+H,cAAcC,QAAQ,cAAehI,KAAK6H,aAAaI,YAC5DjI,KAAKkI,oBAAmB,GAG5B,eACgC,OAAOlI,KAAKmI,UAC5C,aAAaL,GACT9H,KAAKmI,UAAYL,EACjB9H,KAAKoI,eAGT,eACgC,OAASpI,KAAKqI,UAA8BrI,KAAKqI,UAAtB/C,OAASC,MACpE,aAAauC,GACT9H,KAAKqI,UAAYP,EACjB9H,KAAKoI,eAGT,sBACiC,QAASpI,KAAKqI,UAC/C,oBAAoBP,GAEhB9H,KAAKqI,UAAYP,EAAMxC,OAASC,MAAQ,KAEnCuC,IACD9H,KAAKoI,eACLpI,KAAKsI,wBAIb,uBAC2C,OAAOtI,KAAKuI,kBAEvD,cACyB,OAAOvI,KAAKwI,SACrC,YAAYV,GAEJ9H,KAAKwI,WAAaV,EAClB9H,KAAKwI,SAAWV,EAGhB9H,KAAKuI,kBAAgD,SAA3BvI,KAAKuI,kBAAgC,MAAQ,OAG3EvI,KAAKsI,uBAGT,kBAC4B,OAAOtI,KAAKyI,aACxC,gBAAgBX,GAAe9H,KAAKyI,aAAeX,EAEnD,qBAC2C,OAAO9H,KAAK0I,gBACvD,mBAAmBZ,GAEf9H,KAAK0I,gBAAkBZ,EAEjB9H,KAAKyI,cAAyC,MAAzBzI,KAAK2I,iBAE5B3I,KAAKsI,uBAIb,qBAC+B,OAAOtI,KAAK2I,gBAC3C,mBAAmBb,GAEf9H,KAAK2I,gBAAkBb,EAElB9H,KAAKyI,eAImB,MAAzBzI,KAAK2I,kBACL3I,KAAKyI,aAAe,IAGxBzI,KAAKsI,wBAGT,qBAC+B,OAAOb,GAAmBzH,KAAK4I,iBAC9D,mBAAmBd,GAEf9H,KAAK4I,gBAAkBnB,GAAmBK,GAE1C9H,KAAKsI,uBAGT,0BAGI,MAAgC,cAAzBtI,KAAK2I,mBAAsC3I,KAAK6I,gBAG3D,oBAAsC,OAAO7I,KAAK8I,eAElDC,YAAoBD,EAAwCf,GAGxD,IAAIiB,EAFJC,QADgH,KAAhGH,iBAAgG,KAAxDf,gBAAwD,ydAiN5GmB,oBAA8B,EAjN8E,KAkNnGC,UAAY,GAlNuF,KAmN5GC,uBAnN4G,OAoN5GP,gBAA0B,GApNkF,KAsN5GQ,kBAtN4G,OAuN5GC,kBAvN4G,EAIhH,MAAMC,EAAiBvJ,KAAK+H,cAAcyB,QAAQ,aAE9CR,EADEO,EACWjE,KAAOiE,GAGPjE,OAASmE,SAAS,EAAG,SAE3BlE,MAEXvF,KAAKmI,UAAYa,EACjBhJ,KAAKqJ,aAAeL,EAEpB,MAAMU,EAAiB1J,KAAK+H,cAAcyB,QAAQ,YAC5CE,IACF1J,KAAKqI,UAAY/C,KAAOoE,GACxB1J,KAAKqI,UAAU9C,MACfvF,KAAKsJ,aAAetJ,KAAKqI,WAG7B,MAAMsB,EAAuB3J,KAAK+H,cAAcyB,QAAQ,kBAClDG,IACF3J,KAAK2I,gBAAkBgB,GAG3B,MAAMC,EAAuB5J,KAAK+H,cAAcyB,QAAQ,kBAClDI,IACF5J,KAAK0I,gBAAkBlB,GAAmBoC,IAG9C,MAAMC,EAAoB7J,KAAK+H,cAAcyB,QAAQ,eAC/CK,IACF7J,KAAKyI,aAAeoB,EACpB7J,KAAK6I,gBAAkBgB,GAG3B,MAAMC,EAAuB9J,KAAK+H,cAAcyB,QAAQ,kBAClDM,IACF9J,KAAK4I,gBAAkBnB,GAAmBqC,IAG9C,MAAMC,EAAoB/J,KAAK+H,cAAcyB,QAAQ,eAC/CO,IACF/J,KAAK6H,aAAemC,OAAOD,IAG/B,MAAME,EAAgBjK,KAAK+H,cAAcyB,QAAQ,WAC3CS,IACFjK,KAAKwI,SAAWyB,GAGpB,MAAMC,EAAyBlK,KAAK+H,cAAcyB,QAAQ,oBACpDU,IACFlK,KAAKuI,kBAAoB2B,GAIjCC,gBACQtF,GAAgBuF,cAAcpK,KAAKmI,YAAcnI,KAAKqJ,eAAiBrJ,KAAKmI,WAC5EnI,KAAKsI,uBAIb+B,gBACQxF,GAAgBuF,cAAcpK,KAAKqI,YAAcrI,KAAKsJ,eAAiBtJ,KAAKqI,WAC5ErI,KAAKsI,uBAIbgC,mBACQtK,KAAK6I,kBAAoB7I,KAAKyI,cAC9BzI,KAAKsI,uBAIbA,uBACItI,KAAK4H,gBAAkB,GACvB5H,KAAKkJ,oBAAqB,EAGrBrE,GAAgBuF,cAAcpK,KAAKmI,aACpCnI,KAAKmI,UAAYnI,KAAKqJ,cAEpBrJ,KAAKqI,YAAcxD,GAAgBuF,cAAcpK,KAAKqI,aACxDrI,KAAKqI,UAAYrI,KAAKsJ,cAI1BtJ,KAAK+H,cAAcwC,SAAS,CACxB,CAAEC,UAAW,WAAYnG,MAAOrE,KAAKmI,UAAUlD,eAC/C,CAAEuF,UAAW,WAAYnG,MAASrE,KAAKqI,UAAYrI,KAAKqI,UAAUpD,cAAgB,MAClF,CAAEuF,UAAW,iBAAkBnG,MAAOrE,KAAK2I,iBAC3C,CAAE6B,UAAW,iBAAkBnG,MAAOmD,GAAmBxH,KAAK0I,kBAC9D,CAAE8B,UAAW,cAAenG,MAASrE,KAAKyI,aAAezI,KAAKyI,aAAe,MAC7E,CAAE+B,UAAW,iBAAkBnG,MAAOoD,GAAmBzH,KAAK4I,kBAC9D,CAAE4B,UAAW,UAAWnG,MAAOrE,KAAKwI,UACpC,CAAEgC,UAAW,mBAAoBnG,MAAOrE,KAAKuI,qBAGjDvI,KAAKkI,qBAELlI,KAAK6I,gBAAkB7I,KAAKyI,aAC5BzI,KAAKqJ,aAAerJ,KAAKmI,UACzBnI,KAAKsJ,aAAetJ,KAAKqI,UAG7BH,mBAAmBuC,GAAyB,GAExC,GAAMzK,KAAKuD,YAAiBvD,KAAKkJ,qBAAuBlJ,KAAK6H,aACzD,OAEJ7H,KAAK2H,aAAc,EAEnB,MAAM+C,EAAW1K,KAAKmI,UAAUlD,cAC1B0F,EAAa3K,KAAKqI,UAAYrI,KAAKqI,UAAUpD,cAAgBK,OAASC,MAAMN,cAClF,IAAI2F,EAAY,mCAA+BF,EAA/B,iCAAgEC,EAAhE,KAShB,GAPI3K,KAAK4I,kBAAoBnB,GAAmBoD,mBAC5CD,GAAY,qCAEP5K,KAAK4I,kBAAoBnB,GAAmBqD,sBACjDF,GAAY,sCAGV5K,KAAKyI,cAAyC,MAAzBzI,KAAK2I,gBAI5B,OAFAiC,GAAgB,QAER5K,KAAK0I,iBACT,KAAKlB,GAAmBuD,OACpBH,GAAY,UAAO5K,KAAK2I,gBAAZ,gBAAmC3I,KAAKyI,aAAxC,KAChB,MACA,KAAKjB,GAAmBwD,WACpBJ,GAAY,qBAAkB5K,KAAK2I,gBAAvB,cAA4C3I,KAAKyI,aAAjD,MAChB,MACA,KAAKjB,GAAmByD,SACpBL,GAAY,mBAAgB5K,KAAK2I,gBAArB,cAA0C3I,KAAKyI,aAA/C,MAMxB,MAAMyC,EAAOT,EAAgB,EAAIzK,KAAK4H,gBAAgBuD,OAEhDC,EAAkBpL,KAAKwI,SAAP,oBAA+BxI,KAAKwI,SAApC,YAAgDxI,KAAKqL,kBAAqB,GAC1FC,EAAG,+BAA2BtL,KAAKmJ,UAAhC,kBAAmD+B,GAAnD,OAA0DN,GAA1D,OAAyEQ,GAElFpL,KAAK8I,eAAe3B,KAAK,MAAOmE,GAAKtM,KAAKuM,IAEjCA,EAASJ,OAINV,EACAzK,KAAK4H,gBAAkB2D,EAEvBvL,KAAK4H,gBAAgB4D,QAAQD,GALjCvL,KAAKkJ,oBAAqB,EAUxBlJ,KAAK6H,eAED7H,KAAKoJ,mBACPqC,aAAazL,KAAKoJ,mBAEtBpJ,KAAKoJ,kBAAoBsC,WAAW,IAAM1L,KAAKkI,oBAAmB,GAA2B,IAApBlI,KAAK6H,gBAGnF3C,IAGClF,KAAK6H,aAAe,EAEpB7H,KAAK2B,aAAL,uBAAoCuD,EAAItC,QAAxC,YAAsDsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAzF,OAEDC,QAAQ,KACP5L,KAAK2H,aAAc,IAqCnBS,eACJpI,KAAKwI,SAAW,GAChBxI,KAAKuI,kBAAoB,QAxUjC,uCAEKsD,KAFL,oHAKKA,KALL,qHAQKA,KARL,+GAgBKA,KAhBL,4GAuBKA,KAvBL,mHA8BKA,KA9BL,2HA0CKA,KA1CL,mHA6CKA,KA7CL,8GA2DKA,KA3DL,qHA+DKA,KA/DL,wHA2EKA,KA3EL,wHA4FKA,KA5FL,6HAqGKA,KArGL,6HAqSKtE,KArSL,yEAsSmC,KAtSnC,+CAuSKA,KAvSL,wEAwS4D,MAxS5D,iDAySKA,KAzSL,wEA0SkD,SA1SlD,wCA2SKA,KA3SL,wEA4S+B,MA5S/B,4CA6SKA,KA7SL,yEA8SmC,KA9SnC,yCAgTKA,KAhTL,uGAkTKA,KAlTL,0GAqTKA,KArTL,wEAsTmC,MAtTnC,+CAuTKA,KAvTL,yEAwTkDC,GAAmBuD,UAxTrE,+CAyTKxD,KAzTL,wEA0TsC,OA1TtC,+CA2TKA,KA3TL,yEA4TkDE,GAAmBqE,YA5TrE,I,aCEO,IAAMC,IAAb,GAiTK5J,IAAOC,MAlTXvC,aACD,GADA,cACoCC,YAEhCmD,oBAGIjD,KAAKC,MAAMX,MAAM4I,qBAGjB8D,SAASC,iBAAiB,SAAW3L,IAEjC,MAAM4L,EAAoB5L,EAAIkE,OAAoB0H,iBAClD,IAAKA,EACD,OAGcA,EAAiBC,aAAe5N,OAAO6N,YAAcF,EAAiBG,UAC7D,KAGvBrM,KAAKC,MAAMX,MAAM4I,uBAK7BnI,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OAAQ,gCAEHA,EAAMiE,WAAc,gBAACC,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IAEzD,gBAAC6I,EAAA,EAAD,CAASC,QAAQ,QAAQ1K,UAAU,eAE/B,gBAAC2K,EAAA,EAAD,CAAMC,WAAS,EAAC5K,UAAU,iBACtB,gBAAC2K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAEX,gBAAC,KAAD,CACI9K,UAAU,aACV+K,MAAO,CAAEC,WAAY,IACrBC,MAAM,EACNC,QAAQ,EACRjJ,MAAM,sBACNkJ,mBAAmB,GACnBC,OAAQ,sBACRjJ,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAMoL,SACbnG,SAAWY,GAAM7F,EAAMoL,SAAW7F,GAAgBqI,YAAY/H,GAC9DgI,OAAQ,IAAM7N,EAAM6K,gBACpBiD,SAAU,IAAM9N,EAAM6K,gBACtBkD,WAAYrN,KAAKsN,kBAIzB,gBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI9K,UAAU,uBACzB,gBAAC0L,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAY3L,UAAU,aAAa4L,QAAQ,gBAAgBrJ,QAAM,GAAjE,QACA,gBAACsJ,EAAA,EAAD,CACIC,GAAG,gBACH9L,UAAU,gBACVmC,SAAU1E,EAAMiE,WAChBqK,QAAStO,EAAMuO,gBACftJ,SAAWjE,GAAQhB,EAAMuO,gBAAkBvN,EAAIkE,OAAOoJ,WAI7DtO,EAAMuO,gBACH,gBAAC,KAAD,CACIhM,UAAU,aACViL,MAAM,EACNC,QAAQ,EACRjJ,MAAM,QACNkJ,mBAAmB,GACnBC,OAAQ,sBACRjJ,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAMqL,SACbpG,SAAWY,GAAM7F,EAAMqL,SAAW9F,GAAgBqI,YAAY/H,GAC9DgI,OAAQ,IAAM7N,EAAM+K,gBACpB+C,SAAU,IAAM9N,EAAM+K,gBACtBgD,WAAYrN,KAAKsN,iBAGrB,gBAAC3J,EAAA,EAAD,CACI9B,UAAU,aACViC,MAAM,QACNgK,YAAY,QACZ3J,gBAAiB,CAAEC,QAAQ,GAC3B2J,KAAK,OACL/J,UAAU,MAO1B,gBAACwI,EAAA,EAAD,CAAMC,WAAS,EAAC5K,UAAU,iBACtB,gBAAC2K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAACY,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAYC,QAAQ,0BAApB,mBACA,gBAACO,GAAA,EAAD,CACInM,UAAU,uCACVmC,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAM2O,eACb1J,SAAWjE,GAAQhB,EAAM2O,eAAiB3N,EAAIkE,OAAOH,MACrD6J,WAAY,CAAEP,GAAI,2BAElB,gBAACrM,EAAA,EAAD,CAAU+C,MAAM,KAAhB,kBACCqC,GAAiCyH,IAAIC,GAC1B,gBAAC9M,EAAA,EAAD,CAAUwB,IAAKsL,EAAK/J,MAAO+J,GAAMA,MAKrD,gBAACb,EAAA,EAAD,CAAa1L,UAAU,8BACnB,gBAAC2L,EAAA,EAAD,CAAYC,QAAQ,0BAApB,mBACA,gBAACO,GAAA,EAAD,CACInM,UAAU,iBACVmC,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAM+O,eACb9J,SAAWjE,GAAQhB,EAAM+O,eAAiB/N,EAAIkE,OAAOH,MACrD6J,WAAY,CAAEP,GAAI,2BAClB,gBAACrM,EAAA,EAAD,CAAU+C,MAAO,GAAjB,UACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,eACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,eAIZ,gBAACmI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI9K,UAAU,uBACzB,gBAAC8B,EAAA,EAAD,CACI9B,UAAU,qBACViC,MAAM,eACNK,gBAAiB,CAAEC,QAAQ,GAC3B0J,YAAY,wBACZ9J,SAAmC,MAAzB1E,EAAM2O,gBAA0B3O,EAAMiE,WAChDc,MAAO/E,EAAMgP,YACb/J,SAAWjE,GAAQhB,EAAMgP,YAAchO,EAAIkE,OAAOH,MAClD8I,OAAQ,IAAM7N,EAAMgL,mBACpB+C,WAAYrN,KAAKsN,mBAK7B,gBAACiB,GAAA,EAAD,CACIlK,MAAO/E,EAAMkP,eACbjK,SAAWjE,GAAQhB,EAAMkP,eAAkBlO,EAAIkE,OAA4BH,OAE3E,gBAACoK,GAAA,EAAD,CACI5M,UAAU,oBACVmC,SAAU1E,EAAMiE,WAChBc,MAAOoD,GAAmBA,GAAmBqE,UAC7C4C,QAAS,gBAACC,GAAA,EAAD,MACT7K,MAAO,gBAAChD,EAAA,EAAD,CAAYyL,QAAQ,aAApB,eAEX,gBAACkC,GAAA,EAAD,CACI5M,UAAU,oBACVmC,SAAU1E,EAAMiE,WAChBc,MAAOoD,GAAmBA,GAAmBoD,oBAC7C6D,QAAS,gBAACC,GAAA,EAAD,MACT7K,MAAO,gBAAChD,EAAA,EAAD,CAAYyL,QAAQ,aAApB,yBAEX,gBAACkC,GAAA,EAAD,CACI5M,UAAU,oBACVmC,SAAU1E,EAAMiE,WAChBc,MAAOoD,GAAmBA,GAAmBqD,qBAC7C4D,QAAS,gBAACC,GAAA,EAAD,MACT7K,MAAO,gBAAChD,EAAA,EAAD,CAAYyL,QAAQ,aAApB,4BAIf,gBAACzL,EAAA,EAAD,CAAY8L,MAAO,CAAEgC,KAAM,KAE3B,gBAACpC,EAAA,EAAD,CAAMC,WAAS,EAAC5K,UAAU,iBACtB,gBAAC2K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,gBAACY,EAAA,EAAD,CAAa1L,UAAU,4BACnB,gBAAC2L,EAAA,EAAD,CAAYC,QAAQ,uBAApB,gBACA,gBAACO,GAAA,EAAD,CACInM,UAAU,iBACVqM,WAAY,CAAEP,GAAI,uBAClBtJ,MAAO/E,EAAMuP,YACbtK,SAAWjE,GAAQhB,EAAMuP,YAAcvO,EAAIkE,OAAOH,OAElD,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,SACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,gBACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,gBACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,IAAjB,oBAIZ,gBAACmI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI9K,UAAU,uBACzB,gBAAC3B,EAAA,EAAD,CACI2B,UAAU,0CACV0K,QAAQ,WACRpM,MAAM,UACN2O,KAAK,QACLzO,QAAS,IAAMf,EAAMgJ,wBAErB,gBAAC,KAAD,UAOhB,gBAACyG,GAAA,EAAD,CAAgBlN,UAAU,qBACnBvC,EAAM0P,eAAe7D,OAAvB,UAAmC7L,EAAM0P,eAAe7D,OAAxD,gBAA8E,IAGhF7L,EAAM0P,eAAe7D,OAASnL,KAAKiP,YAAY3P,GAASU,KAAKkP,mBAE/D5P,EAAMiE,YAAgBjE,EAAM0P,eAAe7D,OAAU,gBAAC3H,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IAC1F,gBAAC6I,EAAA,EAAD,CAASC,QAAQ,UAEjB,gBAAC,EAAD,CAAcjN,MAAOU,KAAKC,MAAMX,SAKhC4P,mBACJ,OACI,gBAACpO,EAAA,EAAD,CAAYyL,QAAQ,KAAK1K,UAAU,2BAAnC,sBAMAoN,YAAY3P,GAEhB,OACI,gBAAC6P,GAAA,EAAD,CAAOL,KAAK,SACR,gBAACM,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,KACK3I,GAEI4I,OAAOC,KAAKjQ,EAAMkQ,qBAAmC,cAAND,GAC/CpB,IAAIC,GAEG,gBAACqB,GAAA,EAAD,CAAW3M,IAAKsL,GACZ,gBAACsB,GAAA,EAAD,CACIC,OAAQrQ,EAAMsQ,UAAYxB,EAC1ByB,UAAWvQ,EAAM+L,iBACjBhL,QAAS,IAAMf,EAAMsQ,QAAUxB,GAE9BA,OAQ7B,gBAAC0B,GAAA,EAAD,KACKxQ,EAAM0P,eAAeb,IAAI4B,IAEtB,MAAMC,EAAY,CAAEC,cAAe,OACnC,OACI,gBAACZ,GAAA,EAAD,CACIvM,IAAKiN,EAAcjK,WACnBjE,UAAW,kBAAoBkO,EAAc9J,cAAcgC,WAAWiI,eAEtE,gBAACT,GAAA,EAAD,CAAW5N,UAAU,mBAAmB+K,MAAOoD,GAC3C,gBAAC,GAAD,CAAmB/I,gBAAiB8I,EAAcjK,WAAYc,cAAetH,EAAMsH,iBAEvF,gBAAC6I,GAAA,EAAD,CAAW5N,UAAU,YAAY+K,MAAOoD,GACnCD,EAAchK,MAEnB,gBAAC0J,GAAA,EAAD,CAAW5N,UAAU,gBAAgB+K,MAAOoD,GACvCD,EAAcxJ,aAEnB,gBAACkJ,GAAA,EAAD,CAAW5N,UAAU,gBAAgB+K,MAAOoD,GACvCD,EAAcvJ,iBAEnB,gBAACiJ,GAAA,EAAD,CAAW7C,MAAOoD,GACbD,EAAc9J,eAElB3G,EAAMkQ,qBAAwB,gBAACC,GAAA,EAAD,CAAW7C,MAAOoD,GAC5CD,EAAc5J,WAEnB,gBAACsJ,GAAA,EAAD,CAAW5N,UAAU,iBAAiB+K,MAAOoD,GACzC,gBAACG,GAAA,EAAD,CACItO,UAAU,uBACVuO,WAAS,EAACrM,WAAS,EAACsM,QAAS,EAAGnM,UAAQ,EACxCG,MAAOiM,KAAKC,UAAUR,EAAc3J,UAG5C,gBAACqJ,GAAA,EAAD,CAAW5N,UAAU,cAAc+K,MAAOoD,GACtC,gBAACG,GAAA,EAAD,CACItO,UAAU,uBACVuO,WAAS,EAACrM,WAAS,EAACsM,QAAS,EAAGnM,UAAQ,EACxCG,MAAOiM,KAAKC,UAAUR,EAAczJ,WAG5C,gBAACmJ,GAAA,EAAD,CAAW5N,UAAU,cAAc+K,MAAOoD,GACtC,gBAACG,GAAA,EAAD,CACItO,UAAU,uBACVuO,WAAS,EAACrM,WAAS,EAACsM,QAAS,EAAGnM,UAAQ,EACxCG,MAAOiM,KAAKC,UAAUR,EAAc1J,sBAYhEiH,eAAekD,GACD,UAAdA,EAAM1N,MAEN0N,EAAMC,iBAENzQ,KAAKC,MAAMX,MAAMgJ,0BAvT7B,yI,cCbA,IAAaoI,GADZ7Q,YACD,GADA,cAC0CC,YAEtCC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OAAQ,gCAEHU,KAAK2Q,cAAcrR,GAEpB,gBAACY,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,QAAQzO,QAAS,IAAMf,EAAMsR,uBAAwB,GAArG,UAMAD,cAAcrR,GAClB,OAAQ,gCAEJ,gBAACkC,EAAA,EAAD,CACIL,KAAM7B,EAAMsR,sBACZxP,QAAS,IAAM9B,EAAMsR,uBAAwB,GAE7C,gBAACtN,EAAA,EAAD,sBACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,sCACmCzC,EAAM2H,gBADzC,yGAIJ,gBAACvC,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMsR,uBAAwB,EAAOzQ,MAAM,UAAUyD,WAAS,GAArF,UAGA,gBAAC1D,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMuR,QAAS1Q,MAAM,aAA5C,qBAhCpB,G,OCAA,IAAa2Q,GADZjR,YACD,GADA,cACyCC,YAErCC,SACI,MAAMgR,EAAU/Q,KAAKC,MAAM8Q,QAE3B,OAAQ,gCACJ,gBAACvE,EAAA,EAAD,CAAMC,WAAS,EAAC5K,UAAU,kBACtB,gBAAC2K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,GAAIC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACrD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,gBACNO,MAAO0M,EAAQ/K,SAASD,KACxBlC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAIjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,eACNO,MAAO0M,EAAQ/K,SAASlD,IACxBe,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAIjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,cACNO,MAAO0M,EAAQxK,YACf1C,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,kBACNO,MAAO0M,EAAQvK,gBACf3C,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,gBACNO,MAAO0M,EAAQ9K,cACfpC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTlC,UAAakP,EAAQ9K,cAAgB,kBAAoB8K,EAAQ9K,cAAciK,cAAgB,MAIvG,gBAAC1D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIuE,cAAY,EAACrP,UAAU,aACtC,gBAAC8B,EAAA,EAAD,CACIG,MAAM,QACNO,MAAOiM,KAAKC,UAAUQ,EAAQ3K,MAAO,KAAM,GAC3CvC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTqM,WAAS,EACTC,QAAS,MAGjB,gBAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIuE,cAAY,EAACrP,UAAU,aACtC,gBAAC8B,EAAA,EAAD,CACIG,MAAM,eACNO,MAAOiM,KAAKC,UAAUQ,EAAQ1K,aAAc,KAAM,GAClDxC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTqM,WAAS,EACTC,QAAS,YAzFjC,G,OCAA,IAAac,GADZtR,YACD,GADA,cAC0CC,YAEtCC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OAAQ,gCAEHU,KAAK2Q,cAAcrR,GAEpB,gBAACY,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,SAASzO,QAAS,IAAMf,EAAM8R,wBAAyB,GAAvG,UAGA,gBAAC1Q,EAAA,EAAD,CAAKC,MAAO,KACZ,gBAACT,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,SAASzO,QAAS,IAAMf,EAAM+R,2BAA4B,GAA1G,aAGA,gBAAC3Q,EAAA,EAAD,CAAKC,MAAO,KACZ,gBAACT,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,SAASzO,QAAS,IAAMf,EAAMgS,sBAAuB,GAArG,eAGA,gBAAC5Q,EAAA,EAAD,CAAKC,MAAO,KACZ,gBAACT,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,SAASzO,QAAS,IAAMf,EAAMiS,2BAA4B,GAA1G,qBAGA,gBAAC7Q,EAAA,EAAD,CAAKC,MAAO,KACZ,gBAACT,EAAA,EAAD,CAAQqM,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,SAASzO,QAAS,IAAMf,EAAMsR,uBAAwB,GAAtG,UAOAD,cAAcrR,GAClB,OAAQ,gCAEJ,gBAACkC,EAAA,EAAD,CACIL,KAAM7B,EAAM8R,uBACZhQ,QAAS,IAAM9B,EAAM8R,wBAAyB,GAE9C,gBAAC9N,EAAA,EAAD,uBACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,8CAC2CzC,EAAM2H,gBADjD,qBAIJ,gBAACvC,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAM8R,wBAAyB,EAAOjR,MAAM,UAAUyD,WAAS,GAAtF,UAGA,gBAAC1D,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMkS,SAAUrR,MAAM,aAA7C,iBAMR,gBAACqB,EAAA,EAAD,CACIL,KAAM7B,EAAM+R,0BACZjQ,QAAS,IAAM9B,EAAM+R,2BAA4B,GAEjD,gBAAC/N,EAAA,EAAD,0BACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,iDAC8CzC,EAAM2H,gBADpD,sDAIJ,gBAACvC,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAM+R,2BAA4B,EAAOlR,MAAM,UAAUyD,WAAS,GAAzF,UAGA,gBAAC1D,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMmS,YAAatR,MAAM,aAAhD,oBAMR,gBAACqB,EAAA,EAAD,CACIuC,WAAW,EACX5C,KAAM7B,EAAMgS,qBACZlQ,QAAS,IAAM9B,EAAMgS,sBAAuB,GAE5C,gBAAChO,EAAA,EAAD,oBACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,oDAIA,gBAAC4B,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,MAAM,aACNK,gBAAiB,CAAEC,QAAQ,GAC3BL,WAAS,EACTM,MAAO/E,EAAMoS,UACbnN,SAAWjE,GAAQhB,EAAMoS,UAAYpR,EAAIkE,OAAOH,QAGpD,gBAACV,EAAA,EAAD,CACIE,OAAO,QACPC,MAAM,oBACNK,gBAAiB,CAAEC,QAAQ,GAC3BL,WAAS,EACTqM,WAAS,EACTuB,KAAM,EACNtN,MAAO/E,EAAMsS,UACbrN,SAAWjE,GAAQhB,EAAMsS,UAAYtR,EAAIkE,OAAOH,SAIxD,gBAACK,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMgS,sBAAuB,EAAOnR,MAAM,WAAjE,UAGA,gBAACD,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMuS,aAAc7N,UAAW1E,EAAMoS,UAAWvR,MAAM,aAA7E,WAMR,gBAACqB,EAAA,EAAD,CACIuC,WAAW,EACX5C,KAAM7B,EAAMiS,0BACZnQ,QAAS,IAAM9B,EAAMiS,2BAA4B,GAEjD,gBAACjO,EAAA,EAAD,yBACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,iKAIA,gBAAC4B,EAAA,EAAD,CACIE,OAAO,QACPM,gBAAiB,CAAEC,QAAQ,GAC3BN,MAAM,0BACNC,WAAS,EACTqM,WAAS,EACTuB,KAAM,GACNtN,MAAO/E,EAAMwS,gBACbvN,SAAWjE,GAAQhB,EAAMwS,gBAAkBxR,EAAIkE,OAAOH,SAI9D,gBAACK,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMiS,2BAA4B,EAAOpR,MAAM,WAAtE,UAGA,gBAACD,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMyS,kBAAmB/N,UAAW1E,EAAM0S,oBAAqB7R,MAAM,aAA5F,WAMR,gBAACqB,EAAA,EAAD,CACIL,KAAM7B,EAAMsR,sBACZxP,QAAS,IAAM9B,EAAMsR,uBAAwB,GAE7C,gBAACtN,EAAA,EAAD,sBACA,gBAAC5B,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,6CAC0CzC,EAAM2H,gBADhD,gHAIJ,gBAACvC,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMsR,uBAAwB,EAAOzQ,MAAM,UAAUyD,WAAS,GAArF,UAGA,gBAAC1D,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMuR,QAAS1Q,MAAM,aAA5C,qBArKpB,G,OCAO,IAAM8R,GADZpS,YACD,GADA,cACyCC,YAErCC,SACI,MAAMgR,EAAU/Q,KAAKC,MAAM8Q,QAE3B,OAAQ,gCACJ,gBAACvE,EAAA,EAAD,CAAMC,WAAS,EAAC5K,UAAU,kBACtB,gBAAC2K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,GAAIC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACrD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,OACNO,MAAO0M,EAAQhL,KACflC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,cACNO,MAAO0M,EAAQxK,YACf1C,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,kBACNO,MAAO0M,EAAQvK,gBACf3C,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,gBACNO,MAAO0M,EAAQ9K,cACfpC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTlC,UAAakP,EAAQ9K,cAAgB,kBAAoB8K,EAAQ9K,cAAciK,cAAgB,MAGvG,gBAAC1D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqE,GAAI,EAAGC,GAAI,EAAGC,cAAY,EAACrP,UAAU,aACpD,gBAAC8B,EAAA,EAAD,CACIG,MAAM,eACNO,MAAOiM,KAAKC,UAAUQ,EAAQ1K,cAC9BxC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,KAGjB,gBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIuE,cAAY,EAACrP,UAAU,aACtC,gBAAC8B,EAAA,EAAD,CACIG,MAAM,QACNO,MAAOiM,KAAKC,UAAUQ,EAAQ3K,MAAO,KAAM,GAC3CvC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTqM,WAAS,EACTC,QAAS,KAGjB,gBAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIuE,cAAY,EAACrP,UAAU,aACtC,gBAAC8B,EAAA,EAAD,CACIG,MAAM,SACNO,MAAOiM,KAAKC,UAAUQ,EAAQzK,OAAQ,KAAM,GAC5CzC,OAAO,SACPI,WAAY,CAAEC,UAAU,GACxBC,gBAAiB,CAAEC,QAAQ,GAC3BmI,QAAQ,WACRxI,WAAS,EACTqM,WAAS,EACTC,QAAS,MAKrB,gBAACtB,GAAA,EAAD,CAAgBlN,UAAU,8BAA1B,kBACsBkP,EAAQtK,cAAgBsK,EAAQtK,cAAc0E,OAAS,EAD7E,UAICnL,KAAKiP,YAAY8B,EAAQtK,gBAK1ByI,mBACJ,OACI,gBAACpO,EAAA,EAAD,CAAYyL,QAAQ,KAAK1K,UAAU,2BAAnC,sBAMAoN,YAAYiD,GAEhB,OAAKA,GAAWA,EAAO/G,OAKnB,gBAACgE,GAAA,EAAD,CAAOL,KAAK,SACR,gBAACM,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,KACKzJ,GAAmBuI,IAAIC,GACb,gBAACqB,GAAA,EAAD,CAAW3M,IAAKsL,GAAMA,MAIzC,gBAAC0B,GAAA,EAAD,KACKoC,EAAO/D,IAAI,CAACqC,EAAY2B,KAErB,MAAMnC,EAAY,CAAEC,cAAe,OACnC,OACI,gBAACZ,GAAA,EAAD,CAAUvM,IAAKqP,GACX,gBAAC1C,GAAA,EAAD,CAAW7C,MAAOoD,GACbQ,EAAM4B,WAEX,gBAAC3C,GAAA,EAAD,CAAW7C,MAAOoD,GACbQ,EAAM6B,WAEX,gBAAC5C,GAAA,EAAD,CAAW5N,UAAU,YAAY+K,MAAOoD,GACjCQ,EAAM8B,KAAO9B,EAAM8B,KAAO9B,EAAM+B,cAEvC,gBAAC9C,GAAA,EAAD,CAAW7C,MAAOoD,GACbQ,EAAMgC,eAEX,gBAAC/C,GAAA,EAAD,CAAW5N,UAAU,iBAAiB+K,MAAOoD,GACzC,gBAACG,GAAA,EAAD,CACItO,UAAU,uBACVuO,WAAS,EAACrM,WAAS,EAACsM,QAAS,EAAGnM,UAAQ,EACxCG,MAAOiM,KAAKC,UAAUC,EAAMiC,WAGpC,gBAAChD,GAAA,EAAD,CAAW5N,UAAU,iBAAiB+K,MAAOoD,GACzC,gBAACG,GAAA,EAAD,CACItO,UAAU,uBACVuO,WAAS,EAACrM,WAAS,EAACsM,QAAS,EAAGnM,UAAQ,EACxCG,MAAOmM,EAAMkC,gBAzClC1S,KAAKkP,uBA/GxB,G,OCSO,IAAMyD,GADZ9S,YACD,GADA,cAC0CC,YAEtCmD,oBAGIjD,KAAKC,MAAMX,MAAMsT,cAGrB7S,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OAAQ,2BACHA,EAAMiE,WAAc,gBAACC,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IAEzD,gBAAC6I,EAAA,EAAD,CAASC,QAAQ,QAAQ1K,UAAU,eAED,kBAA7BvC,EAAMyR,QAAQ7K,YACX,gBAAC,GAAD,CAAsB5G,MAAOA,IAEH,kBAA7BA,EAAMyR,QAAQ7K,YACX,gBAAC,GAAD,CAAsB5G,MAAOA,IAGjC,gBAACoB,EAAA,EAAD,CAAKC,MAAO,KACZ,gBAACG,EAAA,EAAD,CAAY8L,MAAO,CAAEgC,KAAM,KAE3B,gBAACrB,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAYC,QAAQ,uBAApB,gBACA,gBAACO,GAAA,EAAD,CACInM,UAAU,iBACVwC,MAAO/E,EAAMuP,YACbtK,SAAWjE,GAAQhB,EAAMuP,YAAcvO,EAAIkE,OAAOH,MAClD6J,WAAY,CAAEP,GAAI,wBAClB,gBAACrM,EAAA,EAAD,CAAU+C,MAAO,GAAjB,SACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,gBACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,GAAjB,gBACA,gBAAC/C,EAAA,EAAD,CAAU+C,MAAO,IAAjB,mBAIR,gBAAC3D,EAAA,EAAD,CAAKC,MAAO,KAEZ,gBAACT,EAAA,EAAD,CAAQ2B,UAAU,yBAAyB0K,QAAQ,WAAWpM,MAAM,UAAU2O,KAAK,QAAQzO,QAAS,IAAMf,EAAMsT,eAC5G,gBAAC,KAAD,QAKsB,kBAA7BtT,EAAMyR,QAAQ7K,YACX,gBAAC,GAAD,CAAqB6K,QAASzR,EAAMyR,UAEV,kBAA7BzR,EAAMyR,QAAQ7K,YACX,gBAAC,GAAD,CAAqB6K,QAASzR,EAAMyR,UAGvCzR,EAAMiE,WAAc,gBAACC,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IACzD,gBAAC/C,EAAA,EAAD,CAAK+C,OAAQ,KAEb,gBAAC,EAAD,CAAcnE,MAAOU,KAAKC,MAAMX,aA1D5C,G,qCCDA,IAAauT,GADZhT,YACD,GADA,cACwCC,YAEpCC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OACI,gBAACkC,EAAA,EAAD,CAAQL,KAAM7B,EAAMwT,WAAY1R,QAAS,KAAa9B,EAAMiE,aAAYjE,EAAMwT,YAAa,KAEvF,gBAACxP,EAAA,EAAD,+BAE4B,OAA3BhE,EAAMyT,kBACH,2BACI,gBAACrR,EAAA,EAAD,KAEKpC,EAAMiE,WAAc,gBAACC,EAAA,EAAD,MAAuB,gBAAC9C,EAAA,EAAD,CAAK+C,OAAQ,IAEzD,gBAAC1B,EAAA,EAAD,uGAG0B,kBAArBzC,EAAM4G,YACH,gBAACpF,EAAA,EAAD,CAAYX,MAAM,SAAlB,qHAQR,gBAACoN,EAAA,EAAD,CAAa1L,UAAU,yBAAyBmC,SAAU1E,EAAMiE,WAAYQ,WAAS,GACjF,gBAACiP,GAAA,EAAD,kBACA,gBAACzE,GAAA,EAAD,CAAY0E,KAAG,EACX5O,MAAO/E,EAAM4G,WACb3B,SAAWjE,GAAQhB,EAAM4G,WAAc5F,EAAIkE,OAA4BH,OAEvE,gBAACoK,GAAA,EAAD,CACIzK,SAAU1E,EAAMiE,WAChBc,MAAO,gBACPqK,QAAS,gBAACC,GAAA,EAAD,MACT7K,MAAM,mBAEV,gBAAC2K,GAAA,EAAD,CACIzK,SAAU1E,EAAMiE,WAChBc,MAAO,gBACPqK,QAAS,gBAACC,GAAA,EAAD,MACT7K,MAAM,uBAKlB,gBAAC,KAAD,CACIjC,UAAU,2BACViL,MAAM,EACNC,QAAQ,EACRjJ,MAAM,aACNmJ,OAAQ,sBACRV,QAAQ,SACRvI,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAMoL,SACbnG,SAAWY,GAAM7F,EAAMoL,SAAW7F,GAAgBqI,YAAY/H,KAGlE,gBAAC,KAAD,CACItD,UAAU,2BACViL,MAAM,EACNC,QAAQ,EACRjJ,MAAM,aACNmJ,OAAQ,sBACRV,QAAQ,SACRvI,SAAU1E,EAAMiE,WAChBc,MAAO/E,EAAMqL,SACbpG,SAAWY,GAAM7F,EAAMqL,SAAW9F,GAAgBqI,YAAY/H,KAGlE,gBAACoI,EAAA,EAAD,CAAa1L,UAAU,yBAAyBmC,SAAU1E,EAAMiE,YAC5D,gBAACyP,GAAA,EAAD,mCAEsB,kBAArB1T,EAAM4G,YACH,gBAACgN,GAAA,EAAD,CAAWD,KAAG,GACV,gBAAC,GAAD,CAAuB3T,MAAOA,EAAO2G,cAAc,cACnD,gBAAC,GAAD,CAAuB3G,MAAOA,EAAO2G,cAAc,WACnD,gBAAC,GAAD,CAAuB3G,MAAOA,EAAO2G,cAAc,gBAIrC,kBAArB3G,EAAM4G,YACH,gBAACgN,GAAA,EAAD,CAAWD,KAAG,GACV,gBAACrS,EAAA,EAAD,CAASC,MAAM,kDACX,gBAAC4N,GAAA,EAAD,CACIC,QAAS,gBAAChB,EAAA,EAAD,CACLE,SAAS,IACb9J,MAAM,UACNE,UAAU,OAO9B,gBAAC,EAAD,CAAc1E,MAAOA,KAGzB,gBAACoF,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMwT,YAAa,EAAO9O,SAAU1E,EAAMiE,WAAYpD,MAAM,WAAnF,UAGA,gBAACD,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAM6T,eAAgBnP,UAAW1E,EAAM8F,SAAW9F,EAAMiE,WAAYpD,MAAM,aAAjG,WAOgB,OAA3Bb,EAAMyT,kBACH,2BACI,gBAACrR,EAAA,EAAD,KACI,gBAACK,EAAA,EAAD,CAAmBF,UAAU,mBACxBvC,EAAMyT,iBADX,6BAIJ,gBAACrO,EAAA,EAAD,KACI,gBAACxE,EAAA,EAAD,CAAQG,QAAS,IAAMf,EAAMwT,YAAa,EAAO3S,MAAM,WAAvD,gBAxH5B,GAqIMiT,GADLvT,Y,GAAD,cACoCC,YAEhCC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MACnB2G,EAAgBjG,KAAKC,MAAMgG,cAEjC,OACI,gBAACwI,GAAA,EAAD,CACIC,QAAS,gBAAChB,EAAA,EAAD,CACLE,QAAStO,EAAM+T,kBAAkBpN,GACjC1B,SAAWjE,GAAQhB,EAAMgU,kBAAkBrN,EAAe3F,EAAIkE,OAAOoJ,WACzE9J,MAAOmC,Q,UCnJvB,MAAMsN,GAAOC,EAAQ,KAId,IAAMC,GADZ5T,YACD,GADA,cAC0BC,YAEtBC,SACI,MAAMT,EAAQU,KAAKC,MAAMX,MAEzB,OACI,gBAAC,IAAD,CAAyBoU,MAAOC,KAAa,iCAEvCrU,EAAMsU,YACJ,gBAAClT,EAAA,EAAD,CAAK+C,OAAQ,OAGdnE,EAAMsU,YACL,gBAACC,EAAA,EAAD,CAAQC,SAAS,SAAS3T,MAAM,UAAU0B,UAAU,WAChD,gBAACyK,EAAA,EAAD,KAEKhN,EAAMsU,WAAWnS,cAAgBnC,EAAMyU,eACpC,gBAAC,EAAD,CAAUzU,MAAOA,EAAMyU,gBAG3B,uBAAKC,IAAKT,GAAM5S,MAAM,SACtB,gBAACD,EAAA,EAAD,CAAKC,MAAO,IAEZ,gBAACG,EAAA,EAAD,CAAYyL,QAAQ,KAAKpM,MAAM,UAAU0B,UAAU,oBAAnD,6BAIA,gBAACoS,EAAA,EAAD,CAAa9T,MAAM,WACf,gBAAC2G,EAAA,EAAD,CAAM3G,MAAM,UAAU4G,KAAK,IAA3B,iBAGGzH,EAAM4U,2BACL,gBAACpT,EAAA,EAAD,CAAYX,MAAM,WACbb,EAAM4U,0BAA0BjN,kBAK7C,gBAACnG,EAAA,EAAD,CAAY8L,MAAO,CAAEgC,KAAM,KAE3B,gBAAC,EAAD,CAAWtP,MAAOA,EAAMsU,iBAKjCtU,EAAM6U,uBAAyB7U,EAAMsU,YAActU,EAAMsU,WAAWnS,aACnE,gBAAC,GAAD,CAAgBnC,MAAOA,EAAM6U,wBAG9B7U,EAAM4U,6BAA+B5U,EAAMsU,YAActU,EAAMsU,WAAWnS,aACzE,gBAAC,GAAD,CAAsBnC,MAAOA,EAAM4U,4BAGvC,gBAAC,GAAD,CAAoB5U,MAAOA,EAAM8U,gCArDjD,G,wBCdO,MAAMC,GAET,eAA0B,OAAO,EAEjCtL,YAAoBuL,GAAyE,KAAzEA,+BAGpBnN,KAAKoN,EAAgBC,EAAa7I,GAC9B,OAAO,IAAI8I,QAAa,CAACC,EAASC,KAE9B3U,KAAKsU,+BAA+BtV,KAAK4V,IAErCC,KAAMC,QAAQ,CACVN,IAhB+CO,SAgB7BP,EAClBD,SAAQ5I,OAAMiJ,YACf5V,KAAKgW,IAAON,EAAQM,EAAErJ,OAAUgJ,Q,mCCZ5C,IAAMM,IAAb,GA+BK9S,IAAOC,MA/BZ,GA6EKD,IAAOC,MA7EZ,GA8GKD,IAAOC,MA9GZ,GAAO,cAAyBkF,GAE5B,iBAC4B,OAAOtH,KAAKkV,YAExC,4BACuC,OAAQlV,KAAKmV,UAEpD,eACyB,OAAOnV,KAAKmV,UAKrCpM,cACIE,QADU,oIA6DNmM,aA7DM,EAEVpV,KAAKqV,QAGTA,QACI,MAAM/J,EAAG,UD1BkDyJ,SC0BlD,oBACTF,KAAMS,IAAIhK,GAAKtM,KAAKgB,KAAKuV,wBAAyBrQ,IAC9ClF,KAAK2B,aAAL,UAAuBuD,EAAItC,QAA3B,YAAyCsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,MAIpFpK,SACIvB,KAAKO,uBAAoBc,EACzBrB,KAAKoV,QAAQ7T,SAIjBiU,8BAGI,OAAKxV,KAAKoV,QAIH,IAAIX,QAAmC,CAACC,EAASC,KAEpD,MAAMc,EAA4C,CAC9CC,OAAQ,CAAC1V,KAAKoV,QAAQO,0BAA0BC,KAAKC,WAGzD7V,KAAKoV,QAAQU,mBAAmBL,GAC3BzW,KAAM+W,IAEH,IAAIC,EAAcD,EAAaC,YAC1BA,IAIDxW,QAAQC,IAAI,iEACZuW,EAAcD,EAAaE,QAAQC,YAGvCxB,EAAQ,CAAEyB,cAAc,UAAD,OAAYH,MAEpC9Q,IAIC1F,QAAQC,IAAR,4CAAiDyF,EAAjD,4CACAlF,KAAKoV,QAAQgB,qBAAqBX,OA5BnC,IAAIhB,QAAmC,CAACC,EAASC,IAAWD,KA0CnEa,wBAAwBc,GAE5B,MAAMC,EAASD,EAAuB1K,KACtC,IAAK2K,EAAOT,SAGR,YADA7V,KAAKkV,aAAc,GAKvBlV,KAAKoV,QAAU,IAAImB,KAA0B,CACzCX,KAAM,CACFC,SAAUS,EAAOT,SACjBW,UAAWF,EAAOE,aAK1BxW,KAAKoV,QAAQqB,uBAAuB,OAAWzW,KAAK0W,8BACpD,MAAMC,EAAU3W,KAAKoV,QAAQwB,aAExBD,GAMD3W,KAAKmV,UAAYwB,EAAQ5V,SACzBf,KAAKkV,aAAc,IALnB1V,QAAQC,IAAI,6CACZO,KAAKoV,QAAQyB,iBASbH,6BAA6BI,EAAyBC,GAC1D/W,KAAK2B,aAAL,iDAA8DmV,EAAQ/Q,KAAtE,sBAAwF+Q,EAAQlU,QAAhG,wBAAuHkU,EAAQE,UAA/H,2BAA2JF,EAAQnV,aAAnK,2BAAkMoV,KAhH1M,uCAEKlL,KAFL,2HAKKA,KALL,yHAQKA,KARL,wHAWKtE,KAXL,+PAqEKA,KArEL,yEAsEmC,KAtEnC,yCAwEKA,KAxEL,wW,yBCFO,IAAM0P,IAAb,GAAO,cAA4B3P,GAa/B,iBAC4B,OAAOtH,KAAK2H,YAExC,iBAC4B,OAAO3H,KAAKkX,YAExC,cAEI,OAAQlX,KAAKyE,mBAAqBzE,KAAKmX,sBAA0BnX,KAAKsE,UAAYtE,KAAKoX,YAG3FrO,YAAoBD,EAAwCuO,GACxDpO,QAD2G,KAA3FH,iBAA2F,KAAnDuO,2BAAmD,iRA8DvGF,0BA9DuG,OA+DvGC,iBA/DuG,EAI/GjU,6BACInD,KAAKO,uBAAoBc,EAEzBrB,KAAKqD,4BAA6B,EAClCrD,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,MAAO,sBAAsBnI,KAAKuM,IAEvDvL,KAAKyE,iBAAmBzE,KAAKmX,qBAAuB5L,EAAS9G,iBAC7DzE,KAAKsE,QAAUtE,KAAKoX,YAAc7L,EAASjH,QAC3CtE,KAAKkX,YAAc3L,EAAS+L,YAE7BpS,IACClF,KAAK2B,aAAL,uBAAoCuD,EAAItC,QAAxC,YAAsDsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAzF,OACDC,QAAQ,KACP5L,KAAK2H,aAAc,IAI3BhD,uBAEI3E,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,MAAO,qBAAsB,CAClD1C,iBAAkBzE,KAAKyE,mBAAqBzE,KAAKmX,qBAAuBnX,KAAKyE,iBAAmB,GAChGH,QAAStE,KAAKsE,UACftF,KAAK,KAEJgB,KAAKqD,4BAA6B,EAElCkU,MAAM,gKAEPrS,IACClF,KAAK2B,aAAL,uBAAoCuD,EAAItC,QAAxC,YAAsDsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAzF,OACDC,QAAQ,KACP5L,KAAK2H,aAAc,IAI3BvE,yBACIpD,KAAKO,uBAAoBc,EAEzBrB,KAAKqX,yBAAyBvE,YAAa,EAG/C5P,iBAEIlD,KAAK8I,eAAe3B,KAAK,MAAO,UAAUnI,KAAKuM,IAC3CS,SAASnL,MAAT,qCAA+C0K,EAASiM,YAAxD,YAAuEjM,EAASjH,QAAhF,cAA6FiH,EAASkM,aA5ElH,iDAEKlQ,KAFL,qGAKKA,KALL,8GAOKA,KAPL,wHAUKA,KAVL,yEAW0C,KAX1C,uCAaKsE,KAbL,gHAgBKA,KAhBL,6GAmBKA,KAnBL,iHAgFKtE,KAhFL,yEAiFmC,KAjFnC,2CAmFKA,KAnFL,yEAoFmC,KApFnC,I,wCCCO,IAAMmQ,IAAb,GAAO,cAAwCpQ,GAK3C,sBACgC,OAAOtH,KAAK2X,iBAE5C,iBAC4B,OAAO3X,KAAK2H,YAExC,kBAC4B,OAAO3H,KAAK6H,aACxC,gBAAgBC,GACZ9H,KAAK6H,aAAeC,EACpB9H,KAAK+H,cAAcC,QAAQ,cAAehI,KAAK6H,aAAaI,YAC5DjI,KAAK4S,cAGT,2BACsC,OAAO5S,KAAK4X,sBAClD,yBAAyB9P,GACrB9H,KAAK4X,sBAAwB9P,EAC7B9H,KAAK0R,UAAY,GACjB1R,KAAK4R,UAAY,GAGrB,gCAC2C,OAAO5R,KAAK6X,2BACvD,8BAA8B/P,GAC1B9H,KAAK6X,2BAA6B/P,EAClC9H,KAAK8R,gBAAoB9R,KAAK+Q,QAAQ1K,aAAeiK,KAAKC,UAAUvQ,KAAK+Q,QAAQ1K,cAAgB,GAGrG,0BAGI,OAAKrG,KAAK+Q,QAAQ1K,aAIXrG,KAAK8R,kBAAoBxB,KAAKC,UAAUvQ,KAAK+Q,QAAQ1K,gBAH/CrG,KAAK8R,gBAoBtB/I,YAAoB4O,EACR7O,EACAf,GACRkB,QADsE,KAFtD0O,mBAEsD,KAD9D7O,iBAC8D,KAA9Df,gBAA8D,igBAqKlEqB,uBArKkE,EAGtE,MAAMW,EAAoB/J,KAAK+H,cAAcyB,QAAQ,eAC/CO,IACF/J,KAAK6H,aAAemC,OAAOD,IAInCyH,SACIxR,KAAKoR,wBAAyB,EAE9B,MAAM9F,EAAG,2BAAuBtL,KAAK2X,iBAA5B,aACT3X,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQmE,GAAKtM,KAAK,KACvCgB,KAAK2H,aAAc,EACnB3H,KAAK4S,eACN1N,IACClF,KAAK2H,aAAc,EACnB3H,KAAK2B,aAAL,4BAAyCuD,EAAItC,QAA7C,YAA2DsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAA9F,OAIR8F,YACIzR,KAAKqR,2BAA4B,EAEjC,MAAM/F,EAAG,2BAAuBtL,KAAK2X,iBAA5B,gBACT3X,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQmE,GAAKtM,KAAK,KACvCgB,KAAK2H,aAAc,EACnB3H,KAAK4S,eACN1N,IACClF,KAAK2H,aAAc,EACnB3H,KAAK2B,aAAL,+BAA4CuD,EAAItC,QAAhD,YAA8DsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAjG,OAIRkF,QACI7Q,KAAK4Q,uBAAwB,EAE7B,MAAMtF,EAAG,2BAAuBtL,KAAK2X,iBAA5B,YACT3X,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQmE,GAAKtM,KAAK,KACvCgB,KAAK2H,aAAc,EACnB3H,KAAK+Q,QAAU,IAAIlL,IACpBX,IACClF,KAAK2H,aAAc,EACnB3H,KAAK2B,aAAL,2BAAwCuD,EAAItC,QAA5C,YAA0DsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAA7F,OAIRkG,aAEI,MAAMvG,EAAG,2BAAuBtL,KAAK2X,iBAA5B,kBACHG,EAAc,CAAE/R,KAAM/F,KAAK0R,UAAW/F,KAAM,MAElD,IACImM,EAAYnM,KAAO2E,KAAKyH,MAAM/X,KAAK4R,WACrC,MAAO1M,GAEL,YADAlF,KAAK2B,aAAL,sCAAmDuD,EAAItC,UAH3D,QAMI5C,KAAKsR,sBAAuB,EAGhCtR,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQmE,EAAKwM,GAAa9Y,KAAK,KACpDgB,KAAK2H,aAAc,EACnB3H,KAAK4S,eACN1N,IACClF,KAAK2H,aAAc,EACnB3H,KAAK2B,aAAL,oCAAiDuD,EAAItC,QAArD,YAAmEsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAtG,OAIRoG,kBAEI,MAAMzG,EAAG,2BAAuBtL,KAAK2X,iBAA5B,wBACT,IAAIG,EAAc,KAElB,IAEU9X,KAAK8R,kBACPgG,EAAcxH,KAAKyH,MAAM/X,KAAK8R,kBAGpC,MAAO5M,GAEL,YADAlF,KAAK2B,aAAL,yCAAsDuD,EAAItC,UAP9D,QAUI5C,KAAKuR,2BAA4B,EAGrCvR,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQmE,EAAKwM,GAAa9Y,KAAK,KACpDgB,KAAK2H,aAAc,EACnB3H,KAAK4S,eACN1N,IACClF,KAAK2H,aAAc,EACnB3H,KAAK2B,aAAL,uCAAoDuD,EAAItC,QAAxD,YAAsEsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAzG,OAIRiH,cAEI,GAAM5S,KAAKuD,WACP,OAEJvD,KAAK2H,aAAc,EAEnB,MAAM2D,EAAG,2BAAuBtL,KAAK2X,iBAA5B,MAET3X,KAAK8I,eAAe3B,KAAK,MAAOmE,GAAKtM,KAAKuM,IAEtC,IAAKA,EAKD,OAJAvL,KAAK2B,aAAL,yBAAsC3B,KAAK2X,iBAA3C,qBAGA3X,KAAK6H,aAAe,GAMlB0D,EAASyM,UACXzM,EAAS9E,cAAgB8E,EAASyM,SAGtChY,KAAK+Q,QAAUxF,EAGTvL,KAAK6H,eAED7H,KAAKoJ,mBACPqC,aAAazL,KAAKoJ,mBAEtBpJ,KAAKoJ,kBAAoBsC,WAAW,IAAM1L,KAAK4S,cAAmC,IAApB5S,KAAK6H,gBAGxE3C,IAGClF,KAAK6H,aAAe,EAEpB7H,KAAK2B,aAAL,uBAAoCuD,EAAItC,QAAxC,YAAsDsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAzF,OAEDC,QAAQ,KACP5L,KAAK2H,aAAc,MApN/B,uCAEKJ,KAFL,yEAG0C,IAAI1B,MAH9C,4CAKKgG,KALL,qHAQKA,KARL,iHAWKA,KAXL,2HAmBKA,KAnBL,yIA2BKA,KA3BL,wIAkCKA,KAlCL,wIA4CKtE,KA5CL,yEA6CsC,KA7CtC,yDA8CKA,KA9CL,yEA+CyC,KA/CzC,qDAgDKA,KAhDL,yEAiDqC,KAjDrC,yCAmDKA,KAnDL,uGAqDKA,KArDL,6GAuDKA,KAvDL,yGAwNKA,KAxNL,yEAyNmC,KAzNnC,qDA0NKA,KA1NL,yEA2NqC,KA3NrC,0DA4NKA,KA5NL,yEA6N0C,KA7N1C,4CA8NKA,KA9NL,yEA+NmC,KA/NnC,I,4BCCO,IAAM0Q,IAAb,GAAO,cAAsC3Q,GAEzC,iBAC4B,OAAOtH,KAAKkY,YACxC,eAAe7T,GACXrE,KAAKkY,YAAc7T,EAEfA,IAEArE,KAAKmY,kBAAoB,KAEzBnY,KAAK0K,SAAWpF,OAASmE,SAAS,EAAG,QAAQlE,MAC7CvF,KAAK2K,SAAWrF,OAASC,MAEzBvF,KAAKoY,UAAY,IAAIC,IAAmB,CAAC,YAAa,eAEtDrY,KAAKkG,WAAa,iBAI1B,uBACwC,OAAOlG,KAAKmY,kBAEpD,iBAC4B,OAAOnY,KAAK2H,YAExC,cAEI,OAAO3H,KAAKoY,UAAUtJ,KAAO,GAAKjK,GAAgBuF,cAAcpK,KAAK0K,WAAa7F,GAAgBuF,cAAcpK,KAAK2K,UAGzH5B,YAAoBD,GAChBG,QADgD,KAAhCH,iBAAgC,4RAIpDqK,eAEInT,KAAK2H,aAAc,EAEnB3H,KAAK8I,eAAe3B,KAAK,OAAQ,iBAAkB,CAC/CjB,WAAYlG,KAAKkG,WACjBwE,SAAU1K,KAAK0K,SAASzF,cACxB0F,SAAU3K,KAAK2K,SAAS1F,cACxBqT,SAAUC,MAAMC,KAAKxY,KAAKoY,UAAUK,YACrCzZ,KAAKuM,IAEJvL,KAAKmY,kBAAoB5M,EAASwH,kBAEnC7N,IACClF,KAAK2B,aAAL,gCAA6CuD,EAAItC,QAAjD,YAA+DsC,EAAIqG,SAAWrG,EAAIqG,SAASI,KAAO,GAAlG,OACDC,QAAQ,KACP5L,KAAK2H,aAAc,IAY3B0L,kBAAkBqF,GACd,OAAO1Y,KAAKoY,UAAUO,IAAID,GAG9BpF,kBAAkBoF,EAAuBE,GACjCA,EACA5Y,KAAKoY,UAAUS,IAAIH,GAEnB1Y,KAAKoY,UAAUU,OAAOJ,KAvElC,uCAEK7M,KAFL,sHAoBKA,KApBL,sHAuBKA,KAvBL,6GA0BKA,KA1BL,8GAuDKtE,KAvDL,sGAyDKA,KAzDL,wGA4DKA,KA5DL,wEA6D6B,mBA7D7B,yCA2EKA,KA3EL,yEA4E4C,IAAI8Q,OA5EhD,2CA8EK9Q,KA9EL,yEA+EmC,KA/EnC,2CAiFKA,KAjFL,yEAkFmC,KAlFnC,iDAoFKA,KApFL,yEAqF+C,QArF/C,I,aCNO,MAAMwR,GAEThQ,YAAoBiQ,GAAkB,KAAlBA,UAEpBhR,QAAQwC,EAAqCnG,GACzC4U,aAAajR,QAAb,UAAwBhI,KAAKgZ,QAA7B,aAAyCxO,GAAanG,GAG1DkG,SAAS2O,GAAyE,IAAD,iBAC1DA,GAD0D,IAC7E,2BAA0B,CAAC,MAAhBxM,EAAe,QACH,OAAfA,EAAKrI,MACL4U,aAAaE,WAAb,UAA2BnZ,KAAKgZ,QAAhC,aAA4CtM,EAAKlC,YAEjDyO,aAAajR,QAAb,UAAwBhI,KAAKgZ,QAA7B,aAAyCtM,EAAKlC,WAAakC,EAAKrI,QALK,+BAUjFmF,QAAQgB,GACJ,OAAOyO,aAAazP,QAAb,UAAwBxJ,KAAKgZ,QAA7B,aAAyCxO,IAGpD2O,WAAW3O,GACPyO,aAAaE,WAAb,UAA2BnZ,KAAKgZ,QAAhC,aAA4CxO,KCtB7C,MAAM4O,GAET,eAA0B,OAAO,EAEjCrQ,YAAoBsQ,GAAkB,KAAlBA,aAAiB,KAwD7BC,UAEJ,GA1DiC,KA4D7BC,UAKJ,GA9DAhb,OAAO0N,iBAAiB,UAAWuE,IAE/B,MAAM5N,EAAU4N,EAAM7E,KAGhB6N,EAAiBxZ,KAAKsZ,UAAU1W,EAAQ+K,IAC9C,GAAM6L,EAAgB,CAElB,IACIA,EAAe5W,EAAQ+I,MACzB,MAAMzG,GACJ1F,QAAQC,IAAI,0CAA4CyF,GAG5D,OAIJ,MAAMuU,EAAiBzZ,KAAKuZ,UAAU3W,EAAQ+K,IACzC8L,IAIC7W,EAAQsC,IACVuU,EAAe9E,OAAO/R,EAAQsC,KAE9BuU,EAAe/E,QAAQ9R,EAAQ+I,aAG5B3L,KAAKuZ,UAAU3W,EAAQ+K,OAItCxG,KAAKoN,EAAoCC,EAAa7I,GAElD,MAAM+N,EAAYC,KAAKC,SAAS3R,WAKhC,OAFAjI,KAAKqZ,WAAWQ,YAAY,CAAElM,GAAI+L,EAAWnF,SAAQC,MAAK7I,SAEnD,IAAI8I,QAAa,CAACC,EAASC,KAC9B3U,KAAKuZ,UAAUG,GAAa,CAAEhF,UAASC,YAI/CmF,uBAAuBC,GACnB/Z,KAAKsZ,UAAL,aAAiCS,EAIjC/Z,KAAKqZ,WAAWQ,YAAY,CAAEtF,OAAQ,cC1DvC,MAAMyF,GAETjR,YAAoBiQ,EAAyBK,GAAkB,KAA3CL,UAA0C,KAAjBK,aAEzC,MAAMY,EAAWja,KAAKqZ,WAAWa,WACjCF,GAAwBG,MAASF,GAAW,GAGhDjS,QAAQwC,EAAqCnG,GAEzC2V,GAAwBG,MAAxB,UAAiCna,KAAKgZ,QAAtC,aAAkDxO,IAAenG,EACjErE,KAAKqZ,WAAWe,SAASJ,GAAwBG,OAGrD5P,SAAS2O,GAAyE,IAAD,iBAE1DA,GAF0D,IAE7E,2BAA0B,CAAC,MAAhBxM,EAAe,QAEH,OAAfA,EAAKrI,aACE2V,GAAwBG,MAAxB,UAAiCna,KAAKgZ,QAAtC,aAAkDtM,EAAKlC,YAE9DwP,GAAwBG,MAAxB,UAAiCna,KAAKgZ,QAAtC,aAAkDtM,EAAKlC,YAAekC,EAAKrI,OAPN,8BAU7ErE,KAAKqZ,WAAWe,SAASJ,GAAwBG,OAGrD3Q,QAAQgB,GACJ,OAAOwP,GAAwBG,MAAxB,UAAiCna,KAAKgZ,QAAtC,aAAkDxO,IAG7D2O,WAAW3O,UAEAwP,GAAwBG,MAAxB,UAAiCna,KAAKgZ,QAAtC,aAAkDxO,IACzDxK,KAAKqZ,WAAWe,SAASJ,GAAwBG,QAlC5CH,GAqCMG,MAAQ,GC3B3B,MAAME,GAAW,ICIV,MAQHtR,cAAe,KANf6K,gBAMc,OALdG,mBAKc,OAJdI,yBAIc,OAHdD,+BAGc,OAFdE,6BAEc,EAGV,IAAIkG,OAAiBjZ,EACrB,IACIiZ,EAAYC,mBACd,UAEF,GAAMD,EAAW,CAEb,MAAM1T,EAAgB,IAAIwS,GAAoBkB,GAE9Cta,KAAKoU,wBAA0B,IAAI6D,GAAwBrR,GAErD5G,KAAKiH,gBACPjH,KAAKkU,0BAA4B,IAAIwD,GAA0B1X,KAAKiH,gBAChEL,EACA,IAAIoT,GAAmD,4BAA6BM,KAExFta,KAAKmU,oBAAsB,IAAIzM,GAAoBd,EAC/C,IAAIoT,GAA6C,sBAAuBM,IAE5E1T,EAAckT,uBAAuB,IAAM9Z,KAAKoU,wBAAwBtB,YAAa,QAGtF,CAEH9S,KAAK4T,WAAa,IAAIqB,GAEtB,MAAMrO,EAAgB,IAAIyN,GAAcrU,KAAK4T,WAAW4B,6BAExDxV,KAAKoU,wBAA0B,IAAI6D,GAAwBrR,GAErD5G,KAAKiH,gBACPjH,KAAKkU,0BAA4B,IAAIwD,GAA0B1X,KAAKiH,gBAChEL,EACA,IAAImS,GAA6C,+BAErD/Y,KAAK+T,cAAgB,IAAIkD,GAAcrQ,EAAe5G,KAAKoU,yBAC3DpU,KAAKmU,oBAAsB,IAAIzM,GAAoBd,EAC/C,IAAImS,GAAuC,0BAM3D,sBAEI,GAAMyB,0BACF,OAAOA,0BAIX,OAAKjc,OAAOC,SAASic,SAASC,WADf,oBAKRnc,OAAOC,SAASic,SAASE,OALjB,mBAKkCxP,QAHtC,KDhEnByP,SACI,gBAAC,GAAD,CAAMtb,MAAO+a,KACbrO,SAAS6O,eAAe,SzBIb,WACb,GAA6C,kBAAmBhc,UAAW,CAMzE,GAJkB,IAAIic,IACpB/F,GACAxW,OAAOC,SAASyJ,YAEJ8S,SAAWxc,OAAOC,SAASuc,OAIvC,OAGFxc,OAAO0N,iBAAiB,OAAQ,KAC9B,MAAMrN,EAAK,UAAMmW,GAAN,sBAEP1W,IAmDV,SAAiCO,GAE/Boc,MAAMpc,GACHI,KAAKuM,IAGkB,MAApBA,EAASmN,SACwD,IAAjEnN,EAASqJ,QAAQU,IAAI,gBAAiB2F,QAAQ,cAG9Cpc,UAAUC,cAAcoc,MAAMlc,KAAKC,IACjCA,EAAakc,aAAanc,KAAK,KAC7BT,OAAOC,SAAS4c,aAKpBzc,EAAgBC,KAGnBc,MAAM,KACLF,QAAQC,IACN,mEAvEA4b,CAAwBzc,GAIxBC,UAAUC,cAAcoc,MAAMlc,KAAK,KACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MyBhCxB0c,K","file":"static/js/main.7f7e55bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            {\r\n                                state.isReadonly ?\r\n                                    \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively\" :\r\n                                    \"The below values will be saved to local.settings.json file.\"\r\n                            }\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        {(!state.isReadonly) && (\r\n                            <Button\r\n                                onClick={() => state.saveConnectionParams()}\r\n                                disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                                color=\"secondary\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        )}\r\n\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`/orchestrations/${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, InputBase, InputLabel,\r\n    LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography, Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Grid container className=\"toolbar-grid1\">\r\n                    <Grid item xs={12}>\r\n\r\n                        <KeyboardDateTimePicker\r\n                            className=\"from-input\"\r\n                            style={{ marginLeft: 10 }}\r\n                            ampm={false}\r\n                            autoOk={true}\r\n                            label=\"From &nbsp;&nbsp; (UTC)\"\r\n                            invalidDateMessage=\"\"\r\n                            format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                            disabled={state.inProgress}\r\n                            value={state.timeFrom}\r\n                            onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            onBlur={() => state.applyTimeFrom()}\r\n                            onAccept={() => state.applyTimeFrom()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                        <FormControl>\r\n                            <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                            <Checkbox\r\n                                id=\"till-checkbox\"\r\n                                className=\"till-checkbox\"\r\n                                disabled={state.inProgress}\r\n                                checked={state.timeTillEnabled}\r\n                                onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        {state.timeTillEnabled ? (\r\n                            <KeyboardDateTimePicker\r\n                                className=\"till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"(UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeTill()}\r\n                                onAccept={() => state.applyTimeTill()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        ) : (\r\n                            <TextField\r\n                                className=\"till-input\"\r\n                                label=\"(UTC)\"\r\n                                placeholder=\"[Now]\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                type=\"text\"\r\n                                disabled={true}\r\n                            />\r\n                        )}                        \r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"toolbar-grid2\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl>\r\n                            <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select filtered-column-input\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filteredColumn}\r\n                                onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                {DurableOrchestrationStatusFields.map(col => {\r\n                                    return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                })}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className=\"toolbar-grid2-item1-select\">\r\n                            <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filterOperator}\r\n                                onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                inputProps={{ id: \"filter-operator-select\" }}>\r\n                                <MenuItem value={0}>Equals</MenuItem>\r\n                                <MenuItem value={1}>Starts With</MenuItem>\r\n                                <MenuItem value={2}>Contains</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                        <TextField\r\n                            className=\"filter-value-input\"\r\n                            label=\"Filter Value\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder=\"[some text or 'null']\"\r\n                            disabled={state.filteredColumn === '0' || state.inProgress}\r\n                            value={state.filterValue}\r\n                            onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                            onBlur={() => state.applyFilterValue()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <RadioGroup\r\n                    value={state.showEntityType}\r\n                    onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                >\r\n                    <FormControlLabel                            \r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                    />\r\n                </RadioGroup>\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Grid container className=\"toolbar-grid3\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl className=\"form-control-float-right\">\r\n                            <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                inputProps={{ id: \"auto-refresh-select\" }}\r\n                                value={state.autoRefresh}\r\n                                onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            >\r\n                                <MenuItem value={0}>Never</MenuItem>\r\n                                <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                        <Button\r\n                            className=\"refresh-button form-control-float-right\"\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            size=\"large\"\r\n                            onClick={() => state.reloadOrchestrations()}\r\n                        >\r\n                            <RefreshIcon />\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Toolbar>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n            </FormHelperText>\r\n\r\n            {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n            {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.customStatus)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Grid, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n                </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                {state.details.entityType === \"Orchestration\" && (\r\n                    <OrchestrationButtons state={state} />\r\n                )}\r\n                {state.details.entityType === \"DurableEntity\" && (\r\n                    <DurableEntityButtons state={state} />\r\n                )}\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"details-refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {state.details.entityType === \"Orchestration\" && (\r\n                <OrchestrationFields details={state.details} />\r\n            )}\r\n            {state.details.entityType === \"DurableEntity\" && (\r\n                <DurableEntityFields details={state.details} />\r\n            )}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </div>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"Till (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === \"Orchestration\" && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nconst logo = require('../logo.svg');\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href=\"\">\r\n                                    / instances\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendUri = process.env.REACT_APP_BACKEND_BASE_URI + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this.details.customStatus ? JSON.stringify(this.details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this.details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this.details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n    \r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}