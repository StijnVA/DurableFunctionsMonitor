{"version":3,"sources":["logo.svg","registerServiceWorker.ts","states/DurableOrchestrationStatus.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/OrchestrationsState.ts","components/OrchestrationLink.tsx","components/Orchestrations.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/ErrorMessageState.ts","states/LoginState.ts","states/MainMenuState.ts","states/OrchestrationDetailsState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","OrchestrationStatusEnum","LoginIcon_LoginIcon","_super","LoginIcon","tslib_es6","prototype","render","this","props","react","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","Error","fontSize","mobx_react_module","ErrorMessage_ErrorMessage","ErrorMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","Error_default","a","action","IconButton","key","aria-label","Close_default","mobx_module","bound","MainMenu_MainMenu","MainMenu","Menu_default","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","TextField","autoFocus","margin","label","fullWidth","disabled","value","hubName","onChange","target","InputLabelProps","shrink","placeholder","isConnectionStringReadonly","connectionString","DialogActions","saveConnectionParams","DateTimeHelpers","getDateTimeValue","dt","Date","slice","toISOString","err","formatDateTime","HistoryEventFields","FilterOperatorEnum","DurableOrchestrationStatus","DurableOrchestrationStatusFields","OrchestrationLink_OrchestrationLink","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","UriSuffix","call","Orchestrations_Orchestrations","Orchestrations","componentDidMount","_this","loadOrchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","type","timeFrom","onBlur","applyTimeFrom","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Select","filteredColumn","inputProps","id","map","col","filterOperator","style","flex","autoRefresh","Checkbox","checked","timeTillEnabled","timeTill","applyTimeTill","filterValue","applyFilterValue","size","reloadOrchestrations","Refresh_default","FormHelperText","orchestrations","length","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","orderByDirection","TableBody","orchestration","cellStyle","verticalAlign","instanceId","runtimeStatus","toString","toLowerCase","name","createdTime","lastUpdatedTime","lastEvent","InputBase","multiline","rowsMax","readOnly","JSON","stringify","input","output","customStatus","event","preventDefault","OrchestrationDetails_OrchestrationDetails","OrchestrationDetails","loadDetails","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","renderDetails","details","historyEvents","renderDialogs","rewind","terminate","eventName","rows","eventData","raiseEvent","Grid","container","item","xs","sm","md","zeroMinWidth","InputProps","events","index","Timestamp","EventType","Name","FunctionName","ScheduledTime","Result","Details","PurgeHistoryDialog_PurgeHistoryDialog","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","FormGroup","row","FormControlLabel","control","getStatusIncluded","Running","setStatusIncluded","Completed","ContinuedAsNew","Failed","Canceled","Terminated","Pending","purgeHistory","isValid","logo","Main_Main","Main","loginState","AppBar","position","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient_BackendClient","BackendClient","_getAuthorizationHeaderAsync","Object","defineProperty","method","url","data","Promise","resolve","reject","headers","axios_default","request","r","ErrorMessageState_ErrorMessageState","ErrorMessageState","LoginState_LoginState","LoginState","_isLoggedIn","login","_userName","get","LoginState_BackendBaseUri","loginWithEasyAuthConfig","response","_aadApp","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","lib_es6","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState_MainMenuState","MainMenuState","_backendClient","_purgeHistoryDialogState","_inProgress","_oldConnectionString","finally","alert","reload","OrchestrationsState_OrchestrationsState","OrchestrationsState","_localStorage","_orchestrations","_orderByDirection","_orderBy","_autoRefresh","_filterValue","_filterOperator","Equals","_filteredColumn","_noMorePagesToLoad","_pageSize","_oldFilterValue","timeFromString","getItem","setDate","getDate","_timeFrom","_oldTimeFrom","timeTillString","_timeTill","_oldTimeTill","filteredColumnString","filterOperatorString","filterValueString","autoRefreshString","Number","val","setItem","setItems","fieldName","isAutoRefresh","skip","filterClause","StartsWith","Contains","orderByClause","uri","_a","push","apply","_autoRefreshToken","clearTimeout","setTimeout","OrchestrationDetailsState_OrchestrationDetailsState","OrchestrationDetailsState","_orchestrationId","_sendEventDialogOpen","requestBody","parse","history","PurgeHistoryDialogState_PurgeHistoryDialogState","PurgeHistoryDialogState","_statuses","Set","_dialogOpen","_instancesDeleted","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","_i","items_1","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","setPurgeHistoryHandler","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","MainState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","uriSuffix","MainState_UriSuffix","pathname","startsWith","substr","react_dom","getElementById","URL","origin","fetch","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.115cb0e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    ScheduledTime: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport enum OrchestrationStatusEnum {\r\n    Running = 0,\r\n    Completed = 1,\r\n    ContinuedAsNew = 2,\r\n    Failed = 3,\r\n    Canceled = 4,\r\n    Terminated = 5,\r\n    Pending = 6\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    runtimeStatus: OrchestrationStatusEnum;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Orchestration Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Setings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            The below values will be saved to host.json and local.settings.json respectively.\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder={state.isConnectionStringReadonly ? \"[Change it via 'AzureWebJobsStorage' env variable]\" : \"\"}\r\n                            disabled={state.inProgress || state.isConnectionStringReadonly}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => state.saveConnectionParams()}\r\n                            disabled={!state.hubName || (!state.isConnectionStringReadonly && !state.connectionString) || state.inProgress}\r\n                            color=\"secondary\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\nexport class DateTimeHelpers\r\n{\r\n    public static getDateTimeValue(evt: any): Date {\r\n\r\n        var dt = new Date(evt.target.value.slice(0, 16) + ':00Z');\r\n\r\n        // If invalid date entered, then setting it to current date\r\n        try {\r\n            dt.toISOString();\r\n        } catch (err) {\r\n            dt = new Date();\r\n        }\r\n\r\n        return dt;\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): Date { return this._timeFrom; }\r\n    set timeFrom(val: Date) { this._timeFrom = val; }\r\n    \r\n    @computed\r\n    get timeTill(): Date { return (!this._timeTill) ? new Date() : this._timeTill!; }\r\n    set timeTill(val: Date) { this._timeTill = val; }\r\n\r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? new Date() : undefined;\r\n\r\n        if (!val) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n\r\n        var timeFrom: Date;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            timeFrom = new Date(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            timeFrom = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n        }\r\n        this._timeFrom = timeFrom;\r\n        this._oldTimeFrom = timeFrom;\r\n\r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = new Date(timeTillString);\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const timeTill = !!this._timeTill ? this._timeTill : new Date();\r\n        var filterClause = `&$filter=createdTime ge '${this._timeFrom.toISOString()}' and createdTime le '${timeTill.toISOString()}'`;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n    @observable\r\n    private _timeFrom: Date;\r\n    @observable\r\n    private _timeTill?: Date;\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n    private _oldTimeFrom: Date;\r\n    private _oldTimeTill?: Date;\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`${UriSuffix}/orchestrations/${this.props.orchestrationId}`} target=\"_blank\">\r\n                    {this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormHelperText, InputBase, InputLabel, LinearProgress, Link, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState } from '../states/OrchestrationsState';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <Box width={10} />\r\n                    \r\n                    <TextField\r\n                        className=\"from-input\"\r\n                        label=\"From &nbsp;&nbsp; (UTC)\"\r\n                        type=\"datetime-local\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        disabled={state.inProgress}\r\n                        value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                        onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeFrom()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select filtered-column-input\"\r\n                            disabled={state.inProgress}\r\n                            value={state.filteredColumn}\r\n                            onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                            inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                            <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                            {DurableOrchestrationStatusFields.map(col => {\r\n                                return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={20} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            disabled={state.inProgress}\r\n                            value={state.filterOperator}\r\n                            onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                            inputProps={{ id: \"filter-operator-select\" }}>\r\n                            <MenuItem value={0}>Equals</MenuItem>\r\n                            <MenuItem value={1}>Starts With</MenuItem>\r\n                            <MenuItem value={2}>Contains</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box width={50} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                        <Select\r\n                            className=\"toolbar-select\"\r\n                            inputProps={{ id: \"auto-refresh-select\" }}\r\n                            value={state.autoRefresh}\r\n                            onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        >\r\n                            <MenuItem value={0}>Never</MenuItem>\r\n                            <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                            <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                            <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    \r\n                </Toolbar>\r\n                \r\n                <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                    <FormControl>\r\n                        <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                        <Checkbox\r\n                            id=\"till-checkbox\"\r\n                            className=\"till-checkbox\"\r\n                            disabled={state.inProgress}\r\n                            checked={state.timeTillEnabled}\r\n                            onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        className=\"till-input\"\r\n                        label=\"(UTC)\"\r\n                        placeholder=\"[Now]\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        type={state.timeTillEnabled ? \"datetime-local\" : \"text\"}\r\n                        disabled={!state.timeTillEnabled || state.inProgress}\r\n                        value={state.timeTillEnabled ? DateTimeHelpers.formatDateTime(state.timeTill) : ''}\r\n                        onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                        onBlur={() => state.applyTimeTill()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n\r\n                    <TextField\r\n                        className=\"filter-value-input\"\r\n                        label=\"Filter Value\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"[some text or 'null']\"\r\n                        disabled={state.filteredColumn === '0' || state.inProgress}\r\n                        value={state.filterValue}\r\n                        onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                        onBlur={() => state.applyFilterValue()}\r\n                        onKeyPress={this.handleKeyPress}\r\n                    />\r\n\r\n                    <Box width={50} />\r\n                    <Typography style={{ flex: 1 }} />\r\n\r\n                    <Button\r\n                        className=\"refresh-button\"\r\n                        variant=\"outlined\"\r\n                        color=\"default\"\r\n                        size=\"large\"\r\n                        onClick={() => state.reloadOrchestrations()}\r\n                    >\r\n                        <RefreshIcon />\r\n                    </Button>\r\n                    \r\n                </Toolbar>\r\n\r\n                <FormHelperText className=\"items-count-label\">\r\n                    {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n                </FormHelperText>\r\n\r\n                {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n                {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n                <Toolbar variant=\"dense\" />\r\n                \r\n                <ErrorMessage state={this.props.state}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.customStatus}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, Grid, InputBase, InputLabel, LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, Toolbar, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<div>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                    Rewind\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                    Terminate\r\n                </Button>\r\n                <Box width={20} />\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                    Raise Event\r\n                </Button>\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {this.renderDetails(state.details)}\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!state.details.historyEvents ? state.details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {(!!state.details.historyEvents && state.details.historyEvents.length) ?\r\n                this.renderTable(state.details.historyEvents) :\r\n                this.renderEmptyTable()}\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Box height={10} /> \r\n\r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n            {this.renderDialogs(state)}\r\n        </div>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        \r\n        return (<div>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />                    \r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n        </div>);\r\n    }\r\n\r\n    private renderDetails(details: any): JSX.Element {\r\n\r\n        return (\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={details.customStatus ? details.customStatus : \"\"}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={5}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any>): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return (\r\n                                <TableCell key={col}>{col}</TableCell>\r\n                            );\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {!!event.Name ? event.Name : event.FunctionName}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly \r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, TextField\r\n} from '@material-ui/core';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationStatusEnum } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Orchestration Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops orchestration states from the underlying storage and cannot be undone.\r\n                            </DialogContentText>\r\n\r\n                            <TextField\r\n                                className=\"purge-history-from-input\"\r\n                                label=\"From (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeFrom)}\r\n                                onChange={(evt) => { state.timeFrom = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <TextField\r\n                                className=\"purge-history-till-input\"\r\n                                label=\"Till (UTC)\"\r\n                                type=\"datetime-local\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                disabled={state.inProgress}\r\n                                value={DateTimeHelpers.formatDateTime(state.timeTill)}\r\n                                onChange={(evt) => { state.timeTill = DateTimeHelpers.getDateTimeValue(evt); }}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>Remove orchestrations with the following status:</FormLabel>\r\n                                <FormGroup row>\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Running)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Running, evt.target.checked)} />}\r\n                                        label=\"Running\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Completed)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Completed, evt.target.checked)} />}\r\n                                        label=\"Completed\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.ContinuedAsNew)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.ContinuedAsNew, evt.target.checked)} />}\r\n                                        label=\"ContinuedAsNew\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Failed)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Failed, evt.target.checked)} />}\r\n                                        label=\"Failed\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Canceled)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Canceled, evt.target.checked)} />}\r\n                                        label=\"Canceled\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Terminated)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Terminated, evt.target.checked)} />}\r\n                                        label=\"Terminated\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox\r\n                                            checked={state.getStatusIncluded(OrchestrationStatusEnum.Pending)}\r\n                                            onChange={(evt) => state.setStatusIncluded(OrchestrationStatusEnum.Pending, evt.target.checked)} />}\r\n                                        label=\"Pending\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst logo = require('../logo.svg');\r\nimport './Main.css';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href={UriSuffix}>\r\n                                    / orchestrations\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendBaseUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendBaseUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n\r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isConnectionStringReadonly(): boolean { return !this._oldConnectionString };\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = response.connectionString;\r\n            this._oldConnectionString = this.connectionString;\r\n            this.hubName = response.hubName;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', { connectionString: this.connectionString, hubName: this.hubName }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            if (this._oldConnectionString !== this.connectionString) {\r\n                // Didn't find a way to automatically pick up the new Connection String, so just asking user to restart the app\r\n                alert(`You've changed the Connection String, and the new value cannot currently be picked up automatically. Please, restart the Function Host.`);\r\n            } else {\r\n                // Refreshing the window\r\n                location.reload();\r\n            }\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _oldConnectionString: string;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._sendEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._sendEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Event Data failed to parse: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this.loadDetails();\r\n        }, err => {\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response) {\r\n                this.errorMessage = `Orchestration '${this._orchestrationId}' not found.`;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n                return;\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _sendEventDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationStatusEnum } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            var timeFrom: Date = new Date();\r\n            timeFrom.setDate(timeFrom.getDate() - 1);\r\n            this.timeFrom = timeFrom;\r\n\r\n            this.timeTill = new Date();\r\n\r\n            this._statuses = new Set<OrchestrationStatusEnum>([OrchestrationStatusEnum.Completed, OrchestrationStatusEnum.Terminated]);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean { return this._statuses.size > 0; };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            timeFrom: this.timeFrom,\r\n            timeTill: this.timeTill,\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: Date = new Date();\r\n    @observable\r\n    timeTill: Date = new Date();\r\n\r\n    getStatusIncluded(status: OrchestrationStatusEnum) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: OrchestrationStatusEnum, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<OrchestrationStatusEnum> = new Set<OrchestrationStatusEnum>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n                requestHandler(message.data);\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.data) {\r\n                requestPromise.resolve(message.data);\r\n            } else {\r\n                requestPromise.reject(message.err);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    <Main state={appState}/>,\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\nexport const UriSuffix = process.env.REACT_APP_URI_SUFFIX as string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `${UriSuffix}/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}