{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","logo.svg","registerServiceWorker.ts","components/LoginIcon.tsx","components/ErrorMessage.tsx","components/MainMenu.tsx","DateTimeHelpers.ts","states/DurableOrchestrationStatus.ts","states/OrchestrationsState.ts","components/OrchestrationLink.tsx","states/ErrorMessageState.ts","states/OrchestrationDetailsState.ts","components/Orchestrations.tsx","components/DurableEntityButtons.tsx","components/DurableEntityFields.tsx","components/OrchestrationButtons.tsx","components/OrchestrationFields.tsx","components/OrchestrationDetails.tsx","components/PurgeHistoryDialog.tsx","components/Main.tsx","services/BackendClient.ts","states/LoginState.ts","states/MainMenuState.ts","states/PurgeHistoryDialogState.ts","states/TypedLocalStorage.ts","services/VsCodeBackendClient.ts","states/VsCodeTypedLocalStorage.ts","index.tsx","states/MainState.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","LoginIcon","observer","React","render","this","props","Button","color","isLoggedInAnonymously","onClick","evt","menuAnchorElement","currentTarget","AccountCircle","Box","width","Tooltip","title","Typography","userName","Menu","anchorEl","keepMounted","open","onClose","undefined","MenuItem","logout","Dialog","isLoggedIn","DialogContent","errorMessage","Container","className","CircularProgress","DialogContentText","fontSize","ErrorMessage","action","bound","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","handleClose","SnackbarContent","message","IconButton","key","aria-label","MainMenu","componentDidMount","setWindowTitle","showConnectionParamsDialog","showPurgeHistoryDialog","connectionParamsDialogOpen","DialogTitle","inProgress","LinearProgress","height","isReadonly","TextField","autoFocus","margin","label","fullWidth","disabled","InputProps","readOnly","InputLabelProps","shrink","value","hubName","onChange","target","connectionString","DialogActions","saveConnectionParams","isDirty","DateTimeHelpers","t","isValid","result","moment","toISOString","slice","utc","isAfter","MinMoment","isBefore","MaxMoment","dt","HistoryEventFields","DurableOrchestrationStatus","instanceId","name","entityId","runtimeStatus","entityType","lastEvent","input","customStatus","output","createdTime","lastUpdatedTime","historyEvents","FilterOperatorEnum","ShowEntityTypeEnum","DurableOrchestrationStatusFields","OrchestrationLink","backendClient","isVsCode","Link","href","onLinkClicked","orchestrationId","extraSanitizeHrefComponent","call","s","replace","ErrorMessageState","observable","DetailsTabEnum","OrchestrationsState","_inProgress","_orchestrations","_autoRefresh","val","_localStorage","setItem","toString","loadOrchestrations","_timeFrom","resetOrderBy","_timeTill","reloadOrchestrations","_orderByDirection","_orderBy","_filterValue","_filterOperator","_filteredColumn","_showEntityType","_oldFilterValue","_backendClient","constructor","momentFrom","super","_noMorePagesToLoad","_pageSize","_autoRefreshToken","_oldTimeFrom","_oldTimeTill","timeFromString","getItem","subtract","timeTillString","filteredColumnString","filterOperatorString","filterValueString","showEntityTypeString","autoRefreshString","Number","orderByString","orderByDirectionString","applyTimeFrom","isValidMoment","applyTimeTill","applyFilterValue","setItems","fieldName","isAutoRefresh","timeFrom","timeTill","filterClause","OrchestrationsOnly","DurableEntitiesOnly","Equals","StartsWith","Contains","skip","length","orderByClause","orderByDirection","uri","response","push","clearTimeout","setTimeout","err","data","finally","computed","ShowBoth","Orchestrations","document","addEventListener","scrollingElement","scrollHeight","innerHeight","scrollTop","Toolbar","variant","Grid","container","item","xs","style","marginLeft","ampm","autoOk","invalidDateMessage","format","momentAsUtc","onBlur","onAccept","onKeyPress","handleKeyPress","FormControl","InputLabel","htmlFor","Checkbox","checked","timeTillEnabled","placeholder","type","Select","filteredColumn","inputProps","col","filterOperator","filterValue","RadioGroup","showEntityType","FormControlLabel","control","Radio","flex","autoRefresh","size","FormHelperText","orchestrations","renderTable","renderEmptyTable","Table","TableHead","TableRow","filter","f","showLastEventColumn","TableCell","TableSortLabel","active","orderBy","direction","TableBody","orchestration","cellStyle","verticalAlign","toLowerCase","InputBase","multiline","rowsMax","JSON","stringify","event","preventDefault","DurableEntityButtons","renderDialogs","purgeConfirmationOpen","purge","DurableEntityFields","details","sm","md","zeroMinWidth","OrchestrationButtons","rewindConfirmationOpen","terminateConfirmationOpen","raiseEventDialogOpen","setCustomStatusDialogOpen","rewind","terminate","eventName","rows","eventData","raiseEvent","newCustomStatus","setCustomStatus","isCustomStatusDirty","OrchestrationDetailsState","_selectedTab","_sequenceDiagramSvg","SequenceDiagram","loadSequenceDiagram","_orchestrationId","loadDetails","_raiseEventDialogOpen","_setCustomStatusDialogOpen","_mermaidInitialized","requestBody","parse","internalLoadDetails","subOrchestrationsUri","Promise","all","responses","history","subOrchestrationsResponse","subOrchestrationsHistory","he","EventType","subOrchestration","eventItemIndex","findIndex","FunctionName","subOrchestrationName","ScheduledTime","scheduledTime","SubOrchestrationId","splice","mermaid","initialize","startOnLoad","getSequenceForOrchestration","sequenceLines","sequence","join","svg","orchestrationName","parentOrchestrationName","results","nextLine","reject","Name","Details","OrchestrationFields","events","index","Timestamp","Result","OrchestrationDetails","AppBar","position","Tabs","selectedTab","ev","Tab","dangerouslySetInnerHTML","__html","sequenceDiagramSvg","PurgeHistoryDialog","dialogOpen","instancesDeleted","FormLabel","row","FormGroup","purgeHistory","RuntimeStatusCheckbox","getStatusIncluded","setStatusIncluded","logo","require","Main","utils","MomentUtils","loginState","mainMenuState","src","Breadcrumbs","orchestrationDetailsState","orchestrationsState","purgeHistoryDialogState","BackendClient","_getAuthorizationHeaderAsync","method","url","headers","axios","request","process","r","LoginState","_isLoggedIn","_userName","_aadApp","login","get","loginWithEasyAuthConfig","getAuthorizationHeaderAsync","authParams","scopes","getCurrentConfiguration","auth","clientId","acquireTokenSilent","authResponse","accessToken","idToken","rawIdToken","Authorization","acquireTokenRedirect","easyAuthConfigResponse","config","Msal","authority","handleRedirectCallback","handleRedirectCallbackFailed","account","getAccount","loginRedirect","authErr","accountState","errorCode","MainMenuState","_isReadOnly","_oldConnectionString","_oldHubName","_purgeHistoryDialogState","isReadOnly","alert","accountName","version","PurgeHistoryDialogState","_dialogOpen","_instancesDeleted","_statuses","Set","statuses","Array","from","values","status","has","included","add","delete","TypedLocalStorage","_prefix","localStorage","items","removeItem","VsCodeBackendClient","_vsCodeApi","_handlers","_requests","requestHandler","requestPromise","requestId","Math","random","postMessage","setPurgeHistoryHandler","handler","VsCodeTypedLocalStorage","oldState","getState","State","setState","appState","vsCodeApi","acquireVsCodeApi","OrchestrationIdFromVsCode","pathname","startsWith","substr","ReactDOM","getElementById","URL","origin","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e8f9683a.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 235,\n\t\"./locale.js\": 235\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 502;","module.exports = __webpack_public_path__ + \"static/media/logo.9b5d7869.svg\";","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Container, CircularProgress, Dialog, DialogContent, DialogContentText,\r\n    Menu, MenuItem, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { AccountCircle, Error } from '@material-ui/icons';\r\n\r\nimport './LoginIcon.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class LoginIcon extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n                <Button color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"}\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Tooltip title={state.isLoggedInAnonymously ? \"Ensure this endpoint is not exposed to the public!\" : \"\"} >\r\n                        <Typography color={state.isLoggedInAnonymously ? \"secondary\" : \"inherit\"} >\r\n                            {state.isLoggedInAnonymously ? \"Anonymous\" : state.userName}\r\n                        </Typography>\r\n                    </Tooltip>\r\n                </Button>\r\n\r\n                {!state.isLoggedInAnonymously && (\r\n                    <Menu\r\n                        anchorEl={state.menuAnchorElement}\r\n                        keepMounted\r\n                        open={!!state.menuAnchorElement}\r\n                        onClose={() => state.menuAnchorElement = undefined}\r\n                    >\r\n                        <MenuItem onClick={() => state.logout()}>Login under a different name</MenuItem>\r\n                    </Menu>\r\n                )}\r\n\r\n                <Dialog open={!state.isLoggedIn}>\r\n                    <DialogContent>\r\n\r\n                        {!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <CircularProgress />\r\n                                </Container>\r\n                                <DialogContentText>Login in progress...</DialogContentText>\r\n                            </div>)}\r\n\r\n                        {!!state.errorMessage && (\r\n                            <div>\r\n                                <Container className=\"login-progress\">\r\n                                    <Error color=\"secondary\" fontSize=\"large\" />\r\n                                </Container>\r\n                                <DialogContentText color=\"secondary\">Login failed. {state.errorMessage}</DialogContentText>\r\n                            </div>)}\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nimport './ErrorMessage.css';\r\n\r\nimport { ErrorMessageState } from '../states/ErrorMessageState';\r\n\r\n// Error Message Snackbar\r\n@observer\r\nexport class ErrorMessage extends React.Component<{ state: ErrorMessageState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n\r\n            <Snackbar\r\n                className=\"message-snackbar\"\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={!!state.errorMessage}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <SnackbarContent\r\n                    className=\"error-snackbar-content\"\r\n                    message={\r\n                        <span>\r\n                            <ErrorIcon className=\"error-icon\" />\r\n                            {state.errorMessage}\r\n                        </span>\r\n                    }\r\n                    action={[\r\n                        <IconButton\r\n                            key=\"close\"\r\n                            aria-label=\"Close\"\r\n                            color=\"inherit\"\r\n                            onClick={this.handleClose}\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>,\r\n                    ]}\r\n                />\r\n\r\n            </Snackbar>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleClose() {\r\n        this.props.state.errorMessage = '';\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, LinearProgress,\r\n    Menu, MenuItem, TextField\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { MainMenuState } from '../states/MainMenuState';\r\n\r\n// Main Menu view\r\n@observer\r\nexport class MainMenu extends React.Component<{ state: MainMenuState }> {\r\n\r\n    componentDidMount() {\r\n        // Querying the backend for connection info and displaying it in window title\r\n        this.props.state.setWindowTitle();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <IconButton color=\"inherit\"\r\n                    onClick={evt => state.menuAnchorElement = evt.currentTarget}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n\r\n                <Menu\r\n                    anchorEl={state.menuAnchorElement}\r\n                    keepMounted\r\n                    open={!!state.menuAnchorElement}\r\n                    onClose={() => state.menuAnchorElement = undefined}\r\n                >\r\n                    <MenuItem onClick={() => state.showConnectionParamsDialog()}>Manage Storage Connection Settings...</MenuItem>\r\n                    <MenuItem onClick={() => state.showPurgeHistoryDialog()}>Purge Instance History...</MenuItem>\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open={state.connectionParamsDialogOpen}\r\n                    onClose={() => state.connectionParamsDialogOpen = false}\r\n                >\r\n                    <DialogTitle>Manage Storage Connection Settings</DialogTitle>\r\n                    <DialogContent>\r\n\r\n                        {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n                        \r\n                        <DialogContentText>\r\n                            {\r\n                                state.isReadonly ?\r\n                                    \"Change the below values via your application settings ('DFM_HUB_NAME' and 'AzureWebJobsStorage' respectively)\" :\r\n                                    \"The below values will be saved to local.settings.json file.\"\r\n                            }\r\n                        </DialogContentText>\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Hub Name\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.hubName}\r\n                            onChange={(evt) => state.hubName = evt.target.value as string}\r\n                        />\r\n\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Azure Storage Connection String\"\r\n                            fullWidth\r\n                            disabled={state.inProgress }\r\n                            InputProps={{ readOnly: state.isReadonly }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            value={state.connectionString}\r\n                            onChange={(evt) => state.connectionString = evt.target.value as string}\r\n                        />\r\n\r\n                        <ErrorMessage state={state}/>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => state.connectionParamsDialogOpen = false} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        {(!state.isReadonly) && (\r\n                            <Button\r\n                                onClick={() => state.saveConnectionParams()}\r\n                                disabled={!state.isDirty || !state.hubName || !state.connectionString || state.inProgress}\r\n                                color=\"secondary\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        )}\r\n\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import moment from 'moment';\r\n\r\nexport class DateTimeHelpers\r\n{\r\n    public static momentAsUtc(t: moment.Moment): moment.Moment {\r\n        \r\n        if (!t || !t.isValid()) {\r\n            return t;\r\n        }\r\n\r\n        // Need to convert to UTC, because @material-ui/pickers always give us local moments\r\n        const result = moment(t.toISOString(true).slice(0, 19) + 'Z');\r\n        result.utc();\r\n        return result;\r\n    }\r\n\r\n    // This is the default range for @material-ui/pickers\r\n    private static MinMoment = moment('1900-01-01').utc();\r\n    private static MaxMoment = moment('2100-01-01').utc();\r\n\r\n    public static isValidMoment(t: moment.Moment): boolean {\r\n        return !!t && t.isValid() && t.isAfter(DateTimeHelpers.MinMoment) && t.isBefore(DateTimeHelpers.MaxMoment);\r\n    }\r\n\r\n    public static formatDateTime(dt: Date) {\r\n        return dt.toISOString().slice(0, 16);\r\n    }\r\n}","\r\n// A DTO used by DurableOrchestrationStatus.historyEvents\r\nexport class HistoryEvent {\r\n    Timestamp: string;\r\n    EventType: string;\r\n    Name: string;\r\n    FunctionName: string;\r\n    ScheduledTime: string;\r\n    SubOrchestrationId: string;\r\n    Result: any;\r\n    Details: any;\r\n}\r\n\r\n// Could instead just iterate through field names of HistoryEvent, but reflection in TypeScript still looks tricky\r\nexport const HistoryEventFields = [\r\n    'Timestamp',\r\n    'EventType',\r\n    'Name',\r\n    'ScheduledTime',\r\n    'Result',\r\n    'Details',\r\n];\r\n\r\nexport type RuntimeStatus = \"Running\" | \"Completed\" | \"ContinuedAsNew\" | \"Failed\" | \"Canceled\" | \"Terminated\" | \"Pending\";\r\n\r\nexport type EntityType = \"Orchestration\" | \"DurableEntity\";\r\n\r\nexport class EntityId {\r\n    name: string;\r\n    key: string;\r\n}\r\n\r\n// A DTO returned by DurableOrchestrationClient.getStatusAll()\r\nexport class DurableOrchestrationStatus {\r\n    instanceId: string;\r\n    name: string;\r\n    entityId: EntityId;\r\n    runtimeStatus: RuntimeStatus;\r\n    entityType: EntityType;\r\n    lastEvent: string;\r\n    input: any;\r\n    customStatus: string;\r\n    output: any;\r\n    createdTime: string;\r\n    lastUpdatedTime: string;\r\n    historyEvents?: HistoryEvent[];\r\n}\r\n\r\n// Could instead just iterate through field names of DurableOrchestrationStatus, but reflection in TypeScript still looks tricky\r\nexport const DurableOrchestrationStatusFields = [\r\n    'instanceId',\r\n    'name',\r\n    'createdTime',\r\n    'lastUpdatedTime',\r\n    'runtimeStatus',\r\n    'lastEvent',\r\n    'input',\r\n    'output',\r\n    'customStatus'\r\n];","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum FilterOperatorEnum {\r\n    Equals = 0,\r\n    StartsWith,\r\n    Contains\r\n}\r\n\r\nexport enum ShowEntityTypeEnum {\r\n    ShowBoth = 0,\r\n    OrchestrationsOnly,\r\n    DurableEntitiesOnly\r\n}\r\n\r\n// State of Orchestrations view\r\nexport class OrchestrationsState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get orchestrations(): DurableOrchestrationStatus[] { return this._orchestrations; }\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadOrchestrations(true);\r\n    }\r\n\r\n    @computed\r\n    get timeFrom(): moment.Moment { return this._timeFrom; }\r\n    set timeFrom(val: moment.Moment) {\r\n        this._timeFrom = val;\r\n        this.resetOrderBy();\r\n    }\r\n\r\n    @computed\r\n    get timeTill(): moment.Moment { return (!this._timeTill) ? moment().utc() : this._timeTill; }\r\n    set timeTill(val: moment.Moment) {\r\n        this._timeTill = val;\r\n        this.resetOrderBy();\r\n    }\r\n    \r\n    @computed\r\n    get timeTillEnabled(): boolean { return !!this._timeTill; }\r\n    set timeTillEnabled(val: boolean) {\r\n\r\n        this._timeTill = val ? moment().utc() : null;\r\n\r\n        if (!val) {\r\n            this.resetOrderBy();\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n    \r\n    @computed\r\n    get orderByDirection(): ('asc' | 'desc') { return this._orderByDirection;}\r\n\r\n    @computed\r\n    get orderBy() : string { return this._orderBy; }\r\n    set orderBy(val: string) {\r\n\r\n        if (this._orderBy !== val)  {\r\n            this._orderBy = val;\r\n        }\r\n        else {\r\n            this._orderByDirection = (this._orderByDirection === 'desc') ? 'asc' : 'desc';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get filterValue(): string { return this._filterValue; }\r\n    set filterValue(val: string) { this._filterValue = val; }\r\n\r\n    @computed\r\n    get filterOperator(): FilterOperatorEnum { return this._filterOperator; }\r\n    set filterOperator(val: FilterOperatorEnum) {\r\n        \r\n        this._filterOperator = val;\r\n\r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get filteredColumn(): string { return this._filteredColumn; }\r\n    set filteredColumn(val: string) {\r\n\r\n        this._filteredColumn = val;\r\n\r\n        if (!this._filterValue) {\r\n            return;\r\n        }\r\n\r\n        if (this._filteredColumn === '0') {\r\n            this._filterValue = '';\r\n        }\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showEntityType(): string { return ShowEntityTypeEnum[this._showEntityType]; }\r\n    set showEntityType(val: string) {\r\n\r\n        this._showEntityType = ShowEntityTypeEnum[val];\r\n\r\n        this.reloadOrchestrations();\r\n    }\r\n\r\n    @computed\r\n    get showLastEventColumn(): boolean {\r\n        // Only showing lastEvent field when being filtered by it (because otherwise it is not populated on the server)\r\n        return this._filteredColumn === 'lastEvent' && (!!this._oldFilterValue);\r\n    }\r\n    \r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _localStorage: ITypedLocalStorage<OrchestrationsState>) {\r\n        super();\r\n        \r\n        var momentFrom: moment.Moment;\r\n        const timeFromString = this._localStorage.getItem('timeFrom');\r\n        if (!!timeFromString) {\r\n            momentFrom = moment(timeFromString);\r\n        } else {\r\n            // By default setting it to 24 hours ago\r\n            momentFrom = moment().subtract(1, 'days');\r\n        }\r\n        momentFrom.utc();\r\n\r\n        this._timeFrom = momentFrom;\r\n        this._oldTimeFrom = momentFrom;\r\n       \r\n        const timeTillString = this._localStorage.getItem('timeTill');\r\n        if (!!timeTillString) {\r\n            this._timeTill = moment(timeTillString);\r\n            this._timeTill.utc();\r\n            this._oldTimeTill = this._timeTill;\r\n        }\r\n\r\n        const filteredColumnString = this._localStorage.getItem('filteredColumn');\r\n        if (!!filteredColumnString) {\r\n            this._filteredColumn = filteredColumnString;\r\n        }\r\n\r\n        const filterOperatorString = this._localStorage.getItem('filterOperator');\r\n        if (!!filterOperatorString) {\r\n            this._filterOperator = FilterOperatorEnum[filterOperatorString];\r\n        }\r\n\r\n        const filterValueString = this._localStorage.getItem('filterValue');\r\n        if (!!filterValueString) {\r\n            this._filterValue = filterValueString;\r\n            this._oldFilterValue = filterValueString;\r\n        }\r\n\r\n        const showEntityTypeString = this._localStorage.getItem('showEntityType');\r\n        if (!!showEntityTypeString) {\r\n            this._showEntityType = ShowEntityTypeEnum[showEntityTypeString];\r\n        }\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n\r\n        const orderByString = this._localStorage.getItem('orderBy');\r\n        if (!!orderByString) {\r\n            this._orderBy = orderByString;\r\n        }\r\n\r\n        const orderByDirectionString = this._localStorage.getItem('orderByDirection');\r\n        if (!!orderByDirectionString) {\r\n            this._orderByDirection = orderByDirectionString as 'asc' | 'desc';\r\n        }\r\n    }\r\n\r\n    applyTimeFrom() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeFrom) && this._oldTimeFrom !== this._timeFrom) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyTimeTill() {\r\n        if (DateTimeHelpers.isValidMoment(this._timeTill) && this._oldTimeTill !== this._timeTill) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    applyFilterValue() {\r\n        if (this._oldFilterValue !== this._filterValue) {\r\n            this.reloadOrchestrations();\r\n        }\r\n    }\r\n\r\n    reloadOrchestrations() {\r\n        this._orchestrations = [];\r\n        this._noMorePagesToLoad = false;\r\n\r\n        // If dates are invalid, reverting them to previous valid values\r\n        if (!DateTimeHelpers.isValidMoment(this._timeFrom)) {\r\n            this._timeFrom = this._oldTimeFrom;\r\n        }\r\n        if (!!this._timeTill && !DateTimeHelpers.isValidMoment(this._timeTill)) {\r\n            this._timeTill = this._oldTimeTill;\r\n        }\r\n\r\n        // persisting state as a batch\r\n        this._localStorage.setItems([\r\n            { fieldName: 'timeFrom', value: this._timeFrom.toISOString() },\r\n            { fieldName: 'timeTill', value: !!this._timeTill ? this._timeTill.toISOString() : null },\r\n            { fieldName: 'filteredColumn', value: this._filteredColumn },\r\n            { fieldName: 'filterOperator', value: FilterOperatorEnum[this._filterOperator] },\r\n            { fieldName: 'filterValue', value: !!this._filterValue ? this._filterValue : null },\r\n            { fieldName: 'showEntityType', value: ShowEntityTypeEnum[this._showEntityType] },\r\n            { fieldName: 'orderBy', value: this._orderBy },\r\n            { fieldName: 'orderByDirection', value: this._orderByDirection },\r\n        ]);\r\n\r\n        this.loadOrchestrations();\r\n\r\n        this._oldFilterValue = this._filterValue;\r\n        this._oldTimeFrom = this._timeFrom;\r\n        this._oldTimeTill = this._timeTill;\r\n    }\r\n\r\n    loadOrchestrations(isAutoRefresh: boolean = false) {\r\n\r\n        if (!!this.inProgress || (!!this._noMorePagesToLoad && !this._autoRefresh )) {\r\n            return;            \r\n        }\r\n        this._inProgress = true;\r\n        \r\n        const timeFrom = this._timeFrom.toISOString();\r\n        const timeTill = !!this._timeTill ? this._timeTill.toISOString() : moment().utc().toISOString();\r\n        var filterClause = `&$filter=createdTime ge '${timeFrom}' and createdTime le '${timeTill}'`;\r\n\r\n        if (this._showEntityType === ShowEntityTypeEnum.OrchestrationsOnly) {\r\n            filterClause += ` and entityType eq 'Orchestration'`;\r\n        }\r\n        else if (this._showEntityType === ShowEntityTypeEnum.DurableEntitiesOnly) {\r\n            filterClause += ` and entityType eq 'DurableEntity'`;\r\n        }\r\n        \r\n        if (!!this._filterValue && this._filteredColumn !== '0') {\r\n\r\n            filterClause += ' and ';\r\n\r\n            switch (this._filterOperator) {\r\n                case FilterOperatorEnum.Equals:\r\n                    filterClause += `${this._filteredColumn} eq '${this._filterValue}'`;\r\n                break;\r\n                case FilterOperatorEnum.StartsWith:\r\n                    filterClause += `startswith(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n                case FilterOperatorEnum.Contains:\r\n                    filterClause += `contains(${this._filteredColumn}, '${this._filterValue}')`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // In auto-refresh mode only refreshing the first page\r\n        const skip = isAutoRefresh ? 0 : this._orchestrations.length;\r\n\r\n        const orderByClause = !!this._orderBy ? `&$orderby=${this._orderBy} ${this.orderByDirection}` : '';\r\n        const uri = `/orchestrations?$top=${this._pageSize}&$skip=${skip}${filterClause}${orderByClause}`;\r\n\r\n        this._backendClient.call('GET', uri).then(response => {\r\n\r\n            if (!response.length) {\r\n                // Stop the infinite scrolling\r\n                this._noMorePagesToLoad = true;\r\n            } else {\r\n                if (isAutoRefresh) {\r\n                    this._orchestrations = response;\r\n                } else {\r\n                    this._orchestrations.push(...response);\r\n                }\r\n            }\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadOrchestrations(true), this._autoRefresh * 1000);\r\n            }\r\n\r\n        }, err => {\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    private _orchestrations: DurableOrchestrationStatus[] = [];\r\n    @observable\r\n    private _orderByDirection: ('asc' | 'desc') = 'asc';\r\n    @observable\r\n    private _orderBy: string = '';\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    @observable\r\n    private _timeFrom: moment.Moment;\r\n    @observable\r\n    private _timeTill: moment.Moment;\r\n\r\n    @observable\r\n    private _filterValue: string = '';\r\n    @observable\r\n    private _filterOperator: FilterOperatorEnum = FilterOperatorEnum.Equals;\r\n    @observable\r\n    private _filteredColumn: string = '0';\r\n    @observable\r\n    private _showEntityType: ShowEntityTypeEnum = ShowEntityTypeEnum.ShowBoth;\r\n\r\n    private _noMorePagesToLoad: boolean = false;\r\n    private readonly _pageSize = 50;\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _oldFilterValue: string = '';\r\n\r\n    private _oldTimeFrom: moment.Moment;\r\n    private _oldTimeTill: moment.Moment;\r\n\r\n    private resetOrderBy() {\r\n        this._orderBy = '';\r\n        this._orderByDirection = 'asc';\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport { IBackendClient } from '../services/IBackendClient';\r\n\r\n// Renders a link to be opened either in a new browser tab or in a new VsCode WebView\r\n@observer\r\nexport class OrchestrationLink extends React.Component<{ orchestrationId: string, title?: string, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        if (this.props.backendClient.isVsCode) {\r\n\r\n            return (\r\n                <Link href=\"#\" onClick={this.onLinkClicked} >\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );            \r\n        } else {\r\n\r\n            return (\r\n                <Link href={`/orchestrations/${this.extraSanitizeHrefComponent(this.props.orchestrationId)}`} target=\"_blank\">\r\n                    {this.props.title ?? this.props.orchestrationId}\r\n                </Link>\r\n            );\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private onLinkClicked() {\r\n        this.props.backendClient.call('OpenInNewWindow', this.props.orchestrationId);\r\n    }\r\n\r\n    // Just to be extra sure\r\n    private extraSanitizeHrefComponent(s: string): string{\r\n        return s.replace(/javascript:/gi, '');\r\n    }\r\n}","import { observable } from 'mobx'\r\n\r\n// State of Error Message snackbar\r\nexport class ErrorMessageState {\r\n\r\n    @observable\r\n    errorMessage: string = '';\r\n}","import { observable, computed } from 'mobx';\r\nimport mermaid from 'mermaid';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEvent } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\nexport enum DetailsTabEnum {\r\n    Details = 0,\r\n    SequenceDiagram\r\n}\r\n\r\n// State of OrchestrationDetails view\r\nexport class OrchestrationDetailsState extends ErrorMessageState {\r\n\r\n    // Tab currently selected\r\n    @computed\r\n    get selectedTab(): DetailsTabEnum { return this._selectedTab; }\r\n    set selectedTab(val: DetailsTabEnum) {\r\n        this._selectedTab = val;\r\n\r\n        if (!this._sequenceDiagramSvg && val === DetailsTabEnum.SequenceDiagram) {\r\n            this.loadSequenceDiagram();\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get sequenceDiagramSvg(): string { return this._sequenceDiagramSvg; };\r\n\r\n    @observable\r\n    details: DurableOrchestrationStatus = new DurableOrchestrationStatus();\r\n\r\n    @computed\r\n    get orchestrationId(): string { return this._orchestrationId; }\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get autoRefresh(): number { return this._autoRefresh; }\r\n    set autoRefresh(val: number) {\r\n        this._autoRefresh = val;\r\n        this._localStorage.setItem('autoRefresh', this._autoRefresh.toString());\r\n        this.loadDetails();\r\n    }\r\n\r\n    @computed\r\n    get raiseEventDialogOpen(): boolean { return this._raiseEventDialogOpen; }\r\n    set raiseEventDialogOpen(val: boolean) {\r\n        this._raiseEventDialogOpen = val;\r\n        this.eventName = '';\r\n        this.eventData = '';\r\n    }\r\n\r\n    @computed\r\n    get setCustomStatusDialogOpen(): boolean { return this._setCustomStatusDialogOpen; }\r\n    set setCustomStatusDialogOpen(val: boolean) {\r\n        this._setCustomStatusDialogOpen = val;\r\n        this.newCustomStatus = !!this.details.customStatus ? JSON.stringify(this.details.customStatus) : '';\r\n    }\r\n\r\n    @computed\r\n    get isCustomStatusDirty(): boolean { \r\n\r\n        if (!this.details.customStatus) {\r\n            return !!this.newCustomStatus;\r\n        }\r\n\r\n        return this.newCustomStatus !== JSON.stringify(this.details.customStatus);\r\n    }\r\n\r\n    @observable\r\n    rewindConfirmationOpen: boolean = false;\r\n    @observable\r\n    terminateConfirmationOpen: boolean = false;\r\n    @observable\r\n    purgeConfirmationOpen: boolean = false;\r\n\r\n    @observable\r\n    eventName: string;\r\n    @observable\r\n    eventData: string;\r\n    @observable\r\n    newCustomStatus: string;\r\n\r\n    get backendClient(): IBackendClient { return this._backendClient; }\r\n\r\n    constructor(private _orchestrationId: string,\r\n        private _backendClient: IBackendClient,\r\n        private _localStorage: ITypedLocalStorage<OrchestrationDetailsState>) {\r\n        super();\r\n\r\n        const autoRefreshString = this._localStorage.getItem('autoRefresh');\r\n        if (!!autoRefreshString) {\r\n            this._autoRefresh = Number(autoRefreshString);\r\n        }\r\n    }\r\n\r\n    rewind() {\r\n        this.rewindConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/rewind`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to rewind: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    terminate() {\r\n        this.terminateConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/terminate`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to terminate: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    purge() {\r\n        this.purgeConfirmationOpen = false;\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/purge`;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri).then(() => {\r\n            this._inProgress = false;\r\n            this.details = new DurableOrchestrationStatus();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to purge: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    raiseEvent() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/raise-event`;\r\n        const requestBody = { name: this.eventName, data: null };\r\n\r\n        try {\r\n            requestBody.data = JSON.parse(this.eventData);\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse event data: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.raiseEventDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to raise an event: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    setCustomStatus() {\r\n\r\n        const uri = `/orchestrations('${this._orchestrationId}')/set-custom-status`;\r\n        var requestBody = null;\r\n\r\n        try {\r\n\r\n            if (!!this.newCustomStatus) {\r\n                requestBody = JSON.parse(this.newCustomStatus);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.errorMessage = `Failed to parse custom status: ${err.message}`;\r\n            return;\r\n        } finally {\r\n            this.setCustomStatusDialogOpen = false;\r\n        }\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', uri, requestBody).then(() => {\r\n            this._inProgress = false;\r\n            this.loadDetails();\r\n        }, err => {\r\n            this._inProgress = false;\r\n            this.errorMessage = `Failed to set custom status: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n    \r\n    loadDetails() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n        this._sequenceDiagramSvg = '';\r\n\r\n        this.internalLoadDetails(this._orchestrationId).then(response => {\r\n        \r\n            this.details = response;\r\n\r\n            // Doing auto-refresh\r\n            if (!!this._autoRefresh) {\r\n\r\n                if (!!this._autoRefreshToken) {\r\n                    clearTimeout(this._autoRefreshToken);\r\n                }\r\n                this._autoRefreshToken = setTimeout(() => this.loadDetails(), this._autoRefresh * 1000);\r\n            }\r\n\r\n            this._inProgress = false;\r\n\r\n            // Reloading the sequence diagram as well\r\n            if (this._selectedTab === DetailsTabEnum.SequenceDiagram) {\r\n                this.loadSequenceDiagram();\r\n            }\r\n            \r\n        }, err => {\r\n            this._inProgress = false;\r\n\r\n            // Cancelling auto-refresh just in case\r\n            this._autoRefresh = 0;\r\n\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _selectedTab: DetailsTabEnum = DetailsTabEnum.Details;\r\n    @observable\r\n    private _sequenceDiagramSvg: string;\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n    @observable\r\n    _raiseEventDialogOpen: boolean = false;\r\n    @observable\r\n    _setCustomStatusDialogOpen: boolean = false;\r\n    @observable\r\n    private _autoRefresh: number = 0;\r\n\r\n    private _autoRefreshToken: NodeJS.Timeout;\r\n    private _mermaidInitialized = false;\r\n\r\n    private internalLoadDetails(orchestrationId: string): Promise<DurableOrchestrationStatus> {\r\n\r\n        const uri = `/orchestrations('${orchestrationId}')`;\r\n        const subOrchestrationsUri = uri + '/suborchestrations';\r\n\r\n        // Trying to get both details and suborchestrations\r\n        return Promise.all([\r\n            this._backendClient.call('GET', uri),\r\n            this._backendClient.call('GET', subOrchestrationsUri)\r\n        ]).then(responses => {\r\n\r\n            const response = responses[0];\r\n\r\n            if (!response) {\r\n                throw { message: `Orchestration '${orchestrationId}' not found.` };\r\n            }\r\n\r\n            // Based on backend implementation, this field can appear to be called differently ('historyEvents' vs. 'history')\r\n            // Fixing that here\r\n            if (!!response.history) {\r\n                response.historyEvents = response.history;\r\n            }\r\n\r\n            // Now trying to correlate suborchestrations (if it is an orchestration we're looking at)\r\n            if (response.entityType === \"Orchestration\") {\r\n\r\n                const subOrchestrationsResponse: any[] = responses[1];\r\n\r\n                const subOrchestrationsHistory: any[] = response.historyEvents\r\n                    .filter(he => he.EventType === 'SubOrchestrationInstanceCompleted');\r\n\r\n                for (const subOrchestration of subOrchestrationsResponse) {\r\n\r\n                    const eventItemIndex = subOrchestrationsHistory\r\n                        .findIndex(he => he.FunctionName === subOrchestration.subOrchestrationName\r\n                            && he.ScheduledTime === subOrchestration.scheduledTime);\r\n\r\n                    if (eventItemIndex < 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    const eventItem = subOrchestrationsHistory[eventItemIndex];\r\n\r\n                    eventItem.SubOrchestrationId = subOrchestration.instanceId;\r\n\r\n                    // Dropping this line, so that multiple suborchestrations are correlated correctly\r\n                    subOrchestrationsHistory.splice(eventItemIndex, 1);\r\n                }\r\n            }\r\n\r\n            return response;\r\n        });\r\n    }\r\n\r\n    private loadSequenceDiagram() {\r\n\r\n        if (!!this.inProgress) {\r\n            return;\r\n        }\r\n        this._inProgress = true;\r\n\r\n        if (!this._mermaidInitialized) {\r\n            mermaid.initialize({ startOnLoad: true });\r\n            this._mermaidInitialized = true;\r\n        }\r\n\r\n        Promise.all(this.getSequenceForOrchestration(this.details.name, '.', this.details.historyEvents))\r\n            .then(sequenceLines => {\r\n\r\n                const sequence = 'sequenceDiagram \\n' + sequenceLines.join('');\r\n\r\n                console.log(sequence);\r\n\r\n                try {\r\n                    \r\n                    mermaid.render('mermaidSvgId', sequence, (svg) => {\r\n                        this._sequenceDiagramSvg = svg;\r\n                    });\r\n\r\n                } catch (err) {\r\n                    this.errorMessage = `Failed to render diagram: ${err.message}`;\r\n                }\r\n\r\n                this._inProgress = false;\r\n            }, err => {\r\n\r\n                this._inProgress = false;\r\n\r\n                // Cancelling auto-refresh just in case\r\n                this._autoRefresh = 0;\r\n\r\n                this.errorMessage = `Diagram creation failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n            });\r\n    }\r\n\r\n    private getSequenceForOrchestration(orchestrationName: string,\r\n        parentOrchestrationName: string,\r\n        historyEvents: HistoryEvent[]): Promise<string>[] {\r\n\r\n        const externalActor = '.'\r\n\r\n        const results: Promise<string>[] = [];\r\n\r\n        for (var event of historyEvents) {\r\n\r\n            switch (event.EventType) {\r\n                case 'ExecutionStarted':\r\n\r\n                    var nextLine = `${parentOrchestrationName}->>+${orchestrationName}:[ExecutionStarted] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'SubOrchestrationInstanceCompleted':\r\n\r\n                    if (!!event.SubOrchestrationId) {\r\n\r\n                        results.push(new Promise<string>((resolve, reject) => {\r\n                            this.internalLoadDetails(event.SubOrchestrationId).then(details => {\r\n\r\n                                Promise.all(this.getSequenceForOrchestration(details.name, orchestrationName, details.historyEvents)).then(sequenceLines => {\r\n\r\n                                    resolve(sequenceLines.join(''));\r\n\r\n                                }, reject);\r\n                            }, reject);\r\n                        }));\r\n                    }\r\n\r\n                    break;\r\n                case 'TaskCompleted':\r\n\r\n                    var nextLine = `${orchestrationName}->>${orchestrationName}:${event.FunctionName} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TaskFailed':\r\n\r\n                    var nextLine = `${orchestrationName}-x${orchestrationName}:${event.FunctionName}(failed) \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'EventRaised':\r\n\r\n                    var nextLine = `${externalActor}->>${orchestrationName}:${event.Name} \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'TimerFired':\r\n\r\n                    var nextLine = `${externalActor}->>${orchestrationName}:[TimerFired] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n                case 'ExecutionCompleted':\r\n\r\n                    var nextLine = `${orchestrationName}-->>-${parentOrchestrationName}:[ExecutionCompleted] \\n`;\r\n                    results.push(Promise.resolve(nextLine));\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from 'mobx'\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, InputBase, InputLabel,\r\n    LinearProgress, MenuItem, Select,\r\n    Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Typography, Radio, RadioGroup\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './Orchestrations.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { DurableOrchestrationStatusFields } from '../states/DurableOrchestrationStatus';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\nimport { OrchestrationsState, ShowEntityTypeEnum } from '../states/OrchestrationsState';\r\n\r\n// Orchestrations view\r\n@observer\r\nexport class Orchestrations extends React.Component<{ state: OrchestrationsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadOrchestrations();\r\n\r\n        // Doing a simple infinite scroll\r\n        document.addEventListener('scroll', (evt) => {\r\n\r\n            const scrollingElement = (evt.target as Document).scrollingElement;\r\n            if (!scrollingElement) { \r\n                return;\r\n            }\r\n\r\n            const scrollPos = scrollingElement.scrollHeight - window.innerHeight - scrollingElement.scrollTop;\r\n            const scrollPosThreshold = 100;\r\n\r\n            if (scrollPos < scrollPosThreshold) {\r\n                this.props.state.loadOrchestrations();\r\n            }\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            \r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                <Grid container className=\"toolbar-grid1\">\r\n                    <Grid item xs={12}>\r\n\r\n                        <KeyboardDateTimePicker\r\n                            className=\"from-input\"\r\n                            style={{ marginLeft: 10 }}\r\n                            ampm={false}\r\n                            autoOk={true}\r\n                            label=\"From &nbsp;&nbsp; (UTC)\"\r\n                            invalidDateMessage=\"\"\r\n                            format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                            disabled={state.inProgress}\r\n                            value={state.timeFrom}\r\n                            onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            onBlur={() => state.applyTimeFrom()}\r\n                            onAccept={() => state.applyTimeFrom()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid1-item2\">\r\n                        <FormControl>\r\n                            <InputLabel className=\"till-label\" htmlFor=\"till-checkbox\" shrink >Till</InputLabel>\r\n                            <Checkbox\r\n                                id=\"till-checkbox\"\r\n                                className=\"till-checkbox\"\r\n                                disabled={state.inProgress}\r\n                                checked={state.timeTillEnabled}\r\n                                onChange={(evt) => state.timeTillEnabled = evt.target.checked}\r\n                            />\r\n                        </FormControl>\r\n\r\n                        {state.timeTillEnabled ? (\r\n                            <KeyboardDateTimePicker\r\n                                className=\"till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"(UTC)\"\r\n                                invalidDateMessage=\"\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                                onBlur={() => state.applyTimeTill()}\r\n                                onAccept={() => state.applyTimeTill()}\r\n                                onKeyPress={this.handleKeyPress}\r\n                            />\r\n                        ) : (\r\n                            <TextField\r\n                                className=\"till-input\"\r\n                                label=\"(UTC)\"\r\n                                placeholder=\"[Now]\"\r\n                                InputLabelProps={{ shrink: true }}\r\n                                type=\"text\"\r\n                                disabled={true}\r\n                            />\r\n                        )}                        \r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"toolbar-grid2\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl>\r\n                            <InputLabel htmlFor=\"filtered-column-select\">Filtered Column</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select filtered-column-input\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filteredColumn}\r\n                                onChange={(evt) => state.filteredColumn = evt.target.value as string}\r\n                                inputProps={{ id: \"filtered-column-select\" }}>\r\n\r\n                                <MenuItem value=\"0\">[Not Selected]</MenuItem>\r\n                                {DurableOrchestrationStatusFields.map(col => {\r\n                                    return (<MenuItem key={col} value={col}>{col}</MenuItem>);\r\n                                })}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className=\"toolbar-grid2-item1-select\">\r\n                            <InputLabel htmlFor=\"filter-operator-select\">Filter Operator</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                disabled={state.inProgress}\r\n                                value={state.filterOperator}\r\n                                onChange={(evt) => state.filterOperator = evt.target.value as number}\r\n                                inputProps={{ id: \"filter-operator-select\" }}>\r\n                                <MenuItem value={0}>Equals</MenuItem>\r\n                                <MenuItem value={1}>Starts With</MenuItem>\r\n                                <MenuItem value={2}>Contains</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid2-item2\">\r\n                        <TextField\r\n                            className=\"filter-value-input\"\r\n                            label=\"Filter Value\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            placeholder=\"[some text or 'null']\"\r\n                            disabled={state.filteredColumn === '0' || state.inProgress}\r\n                            value={state.filterValue}\r\n                            onChange={(evt) => state.filterValue = evt.target.value as string}\r\n                            onBlur={() => state.applyFilterValue()}\r\n                            onKeyPress={this.handleKeyPress}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <RadioGroup\r\n                    value={state.showEntityType}\r\n                    onChange={(evt) => state.showEntityType = (evt.target as HTMLInputElement).value}\r\n                >\r\n                    <FormControlLabel                            \r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.ShowBoth]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Show both</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.OrchestrationsOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Orchestrations only</Typography>}\r\n                    />\r\n                    <FormControlLabel\r\n                        className=\"entity-type-radio\"\r\n                        disabled={state.inProgress}\r\n                        value={ShowEntityTypeEnum[ShowEntityTypeEnum.DurableEntitiesOnly]}\r\n                        control={<Radio />}\r\n                        label={<Typography variant=\"subtitle2\">Durable Entities only</Typography>}\r\n                    />\r\n                </RadioGroup>\r\n\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <Grid container className=\"toolbar-grid3\">\r\n                    <Grid item xs={12}>\r\n                        <FormControl className=\"form-control-float-right\">\r\n                            <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                            <Select\r\n                                className=\"toolbar-select\"\r\n                                inputProps={{ id: \"auto-refresh-select\" }}\r\n                                value={state.autoRefresh}\r\n                                onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                            >\r\n                                <MenuItem value={0}>Never</MenuItem>\r\n                                <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                                <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                                <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} className=\"toolbar-grid3-item2\">\r\n                        <Button\r\n                            className=\"refresh-button form-control-float-right\"\r\n                            variant=\"outlined\"\r\n                            color=\"default\"\r\n                            size=\"large\"\r\n                            onClick={() => state.reloadOrchestrations()}\r\n                        >\r\n                            <RefreshIcon />\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Toolbar>\r\n\r\n            <FormHelperText className=\"items-count-label\">\r\n                {!!state.orchestrations.length ? `${state.orchestrations.length} items shown`: ''}\r\n            </FormHelperText>\r\n\r\n            {!!state.orchestrations.length ? this.renderTable(state) : this.renderEmptyTable()}\r\n\r\n            {state.inProgress && !!state.orchestrations.length ? (<LinearProgress />) : (<Box height={4} />)}\r\n            <Toolbar variant=\"dense\" />\r\n            \r\n            <ErrorMessage state={this.props.state} />\r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(state: OrchestrationsState): JSX.Element {\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {DurableOrchestrationStatusFields\r\n                            // hiding artificial 'lastEvent' column, when not used\r\n                            .filter(f => state.showLastEventColumn ? true : f !== 'lastEvent')\r\n                            .map(col => {\r\n                                return (\r\n                                    <TableCell key={col}>\r\n                                        <TableSortLabel\r\n                                            active={state.orderBy === col}\r\n                                            direction={state.orderByDirection}\r\n                                            onClick={() => state.orderBy = col}\r\n                                        >\r\n                                            {col}\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {state.orchestrations.map(orchestration => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow\r\n                                key={orchestration.instanceId}\r\n                                className={\"runtime-status-\" + orchestration.runtimeStatus.toString().toLowerCase()}\r\n                            >\r\n                                <TableCell className=\"instance-id-cell\" style={cellStyle}>\r\n                                    <OrchestrationLink orchestrationId={orchestration.instanceId} backendClient={state.backendClient}/>\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n                                    {orchestration.name}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.createdTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"datetime-cell\" style={cellStyle}>\r\n                                    {orchestration.lastUpdatedTime}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {orchestration.runtimeStatus}\r\n                                </TableCell>\r\n                                {state.showLastEventColumn && (<TableCell style={cellStyle}>\r\n                                    {orchestration.lastEvent}\r\n                                </TableCell>)}\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.input)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.output)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"output-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(orchestration.customStatus)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    private handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.reloadOrchestrations();\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed durable entity view\r\n@observer\r\nexport class DurableEntityButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge entity '{state.orchestrationId}'. This operation drops entity state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Grid, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus } from '../states/DurableOrchestrationStatus';\r\n\r\n// Fields for detailed durable entity view\r\n@observer\r\nexport class DurableEntityFields extends React.Component<{ details: DurableOrchestrationStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.name\"\r\n                        value={details.entityId.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"entityId.key\"\r\n                        value={details.entityId.key}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={10}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { OrchestrationDetailsState } from '../states/OrchestrationDetailsState';\r\n\r\n// Buttons for detailed orchestration view\r\n@observer\r\nexport class OrchestrationButtons extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n\r\n            {this.renderDialogs(state)}\r\n\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.rewindConfirmationOpen = true}>\r\n                Rewind\r\n                </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.terminateConfirmationOpen = true}>\r\n                Terminate\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.raiseEventDialogOpen = true}>\r\n                Raise Event\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.setCustomStatusDialogOpen = true}>\r\n                Set Custom Status\r\n            </Button>\r\n            <Box width={20} />\r\n            <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={() => state.purgeConfirmationOpen = true}>\r\n                Purge\r\n            </Button>            \r\n            \r\n        </>);\r\n    }\r\n\r\n    private renderDialogs(state: OrchestrationDetailsState): JSX.Element {\r\n        return (<>\r\n\r\n            <Dialog\r\n                open={state.rewindConfirmationOpen}\r\n                onClose={() => state.rewindConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Rewind</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to rewind orchestration '{state.orchestrationId}'. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.rewindConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.rewind()} color=\"secondary\">\r\n                        Yes, rewind\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.terminateConfirmationOpen}\r\n                onClose={() => state.terminateConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Terminate</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to terminate orchestration '{state.orchestrationId}'. This operation cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.terminateConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.terminate()} color=\"secondary\">\r\n                        Yes, terminate\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.raiseEventDialogOpen}\r\n                onClose={() => state.raiseEventDialogOpen = false}\r\n            >\r\n                <DialogTitle>Raise Event</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Provide event name and some additional data\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Event Name\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        value={state.eventName}\r\n                        onChange={(evt) => state.eventName = evt.target.value as string}\r\n                    />\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Event Data (JSON)\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={7}\r\n                        value={state.eventData}\r\n                        onChange={(evt) => state.eventData = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.raiseEventDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.raiseEvent()} disabled={!state.eventName} color=\"secondary\">\r\n                        Raise\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            \r\n            <Dialog\r\n                fullWidth={true}\r\n                open={state.setCustomStatusDialogOpen}\r\n                onClose={() => state.setCustomStatusDialogOpen = false}\r\n            >\r\n                <DialogTitle>Set customStatus</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        customStatus field is a way for external clients to differentiate instances of your orchestration. It does not affect the orchestration workflow itself.\r\n                    </DialogContentText>\r\n\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        label=\"New customStatus (JSON)\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={10}\r\n                        value={state.newCustomStatus}\r\n                        onChange={(evt) => state.newCustomStatus = evt.target.value as string}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.setCustomStatusDialogOpen = false} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.setCustomStatus()} disabled={!state.isCustomStatusDirty} color=\"secondary\">\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={state.purgeConfirmationOpen}\r\n                onClose={() => state.purgeConfirmationOpen = false}\r\n            >\r\n                <DialogTitle>Confirm Purge</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You're about to purge orchestration '{state.orchestrationId}'. This operation drops orchestration state from the underlying storage and cannot be undone. Are you sure?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => state.purgeConfirmationOpen = false} color=\"primary\" autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => state.purge()} color=\"secondary\">\r\n                        Yes, purge\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    FormHelperText, Grid, InputBase, Table, TableBody, TableCell, TableHead, TableRow, Typography, TextField\r\n} from '@material-ui/core';\r\n\r\nimport { DurableOrchestrationStatus, HistoryEventFields } from '../states/DurableOrchestrationStatus';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { OrchestrationLink } from './OrchestrationLink';\r\n\r\n// Fields for detailed orchestration view\r\n@observer\r\nexport class OrchestrationFields extends React.Component<{ details: DurableOrchestrationStatus, backendClient: IBackendClient }> {\r\n\r\n    render(): JSX.Element {\r\n        const details = this.props.details;\r\n\r\n        return (<>\r\n            <Grid container className=\"grid-container\">\r\n                <Grid item xs={12} sm={12} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"name\"\r\n                        value={details.name}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"createdTime\"\r\n                        value={details.createdTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"lastUpdatedTime\"\r\n                        value={details.lastUpdatedTime}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={2} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"runtimeStatus\"\r\n                        value={details.runtimeStatus}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        className={!!details.runtimeStatus ? \"runtime-status-\" + details.runtimeStatus.toLowerCase() : \"\"}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"customStatus\"\r\n                        value={JSON.stringify(details.customStatus)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"input\"\r\n                        value={JSON.stringify(details.input, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} zeroMinWidth className=\"grid-item\">\r\n                    <TextField\r\n                        label=\"output\"\r\n                        value={JSON.stringify(details.output, null, 3)}\r\n                        margin=\"normal\"\r\n                        InputProps={{ readOnly: true }}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={8}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormHelperText className=\"history-events-count-label\">\r\n                historyEvents: {!!details.historyEvents ? details.historyEvents.length : 0} items\r\n            </FormHelperText>\r\n\r\n            {this.renderTable(details.historyEvents)}\r\n\r\n        </>);\r\n    }\r\n\r\n    private renderEmptyTable(): JSX.Element {\r\n        return (\r\n            <Typography variant=\"h5\" className=\"empty-table-placeholder\" >\r\n                This list is empty\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    private renderTable(events: Array<any> | undefined): JSX.Element {\r\n\r\n        if (!events || !events.length) {\r\n            return this.renderEmptyTable();\r\n        }\r\n\r\n        return (\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {HistoryEventFields.map(col => {\r\n                            return <TableCell key={col}>{col}</TableCell>;\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {events.map((event: any, index: number) => {\r\n\r\n                        const cellStyle = { verticalAlign: 'top' };\r\n                        return (\r\n                            <TableRow key={index}>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.Timestamp}\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.EventType}\r\n                                </TableCell>\r\n                                <TableCell className=\"name-cell\" style={cellStyle}>\r\n\r\n                                    {!!event.SubOrchestrationId ?\r\n                                        (<OrchestrationLink\r\n                                            orchestrationId={event.SubOrchestrationId}\r\n                                            title={event.FunctionName}\r\n                                            backendClient={this.props.backendClient} />)\r\n                                        :\r\n                                        (event.Name ?? event.FunctionName)\r\n                                    }\r\n\r\n                                </TableCell>\r\n                                <TableCell style={cellStyle}>\r\n                                    {event.ScheduledTime}\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={JSON.stringify(event.Result)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell className=\"long-text-cell\" style={cellStyle}>\r\n                                    <InputBase\r\n                                        className=\"long-text-cell-input\"\r\n                                        multiline fullWidth rowsMax={5} readOnly\r\n                                        value={event.Details}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    AppBar, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Paper,\r\n    Select, Tabs, Tab, Toolbar, Typography\r\n} from '@material-ui/core';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport './OrchestrationDetails.css';\r\n\r\nimport { DurableEntityButtons } from './DurableEntityButtons';\r\nimport { DurableEntityFields } from './DurableEntityFields';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { OrchestrationButtons } from './OrchestrationButtons';\r\nimport { OrchestrationDetailsState, DetailsTabEnum } from '../states/OrchestrationDetailsState';\r\nimport { OrchestrationFields } from './OrchestrationFields';\r\n\r\n// Orchestration Details view\r\n@observer\r\nexport class OrchestrationDetails extends React.Component<{ state: OrchestrationDetailsState }> {\r\n\r\n    componentDidMount() {\r\n\r\n        // Triggering initial load\r\n        this.props.state.loadDetails();\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (<>\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n           \r\n            <Toolbar variant=\"dense\" className=\"top-toolbar\">\r\n\r\n                {state.details.entityType === \"Orchestration\" && (\r\n                    <OrchestrationButtons state={state} />\r\n                )}\r\n                {state.details.entityType === \"DurableEntity\" && (\r\n                    <DurableEntityButtons state={state} />\r\n                )}\r\n                \r\n                <Box width={20} />\r\n                <Typography style={{ flex: 1 }} />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"auto-refresh-select\">Auto-refresh</InputLabel>\r\n                    <Select\r\n                        className=\"toolbar-select\"\r\n                        value={state.autoRefresh}\r\n                        onChange={(evt) => state.autoRefresh = evt.target.value as number}\r\n                        inputProps={{ id: 'auto-refresh-select' }}>\r\n                        <MenuItem value={0}>Never</MenuItem>\r\n                        <MenuItem value={1}>Every 1 sec.</MenuItem>\r\n                        <MenuItem value={5}>Every 5 sec.</MenuItem>\r\n                        <MenuItem value={10}>Every 10 sec.</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <Box width={20} />\r\n\r\n                <Button className=\"details-refresh-button\" variant=\"outlined\" color=\"default\" size=\"large\" onClick={() => state.loadDetails()}>\r\n                    <RefreshIcon />\r\n                </Button>\r\n\r\n            </Toolbar>\r\n\r\n            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n            \r\n            {state.details.entityType === \"Orchestration\" && (<>\r\n\r\n                <AppBar color=\"inherit\" position=\"static\">\r\n                    <Tabs value={state.selectedTab}\r\n                        onChange={(ev: React.ChangeEvent<{}>, val: DetailsTabEnum) => state.selectedTab = val}\r\n                    >\r\n                        <Tab label=\"Details\" disabled={state.inProgress} />\r\n                        <Tab label=\"Sequence Diagram\" disabled={state.inProgress} />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                {state.selectedTab === DetailsTabEnum.Details &&\r\n                    (<OrchestrationFields details={state.details} backendClient={state.backendClient} />)\r\n                }\r\n                {state.selectedTab === DetailsTabEnum.SequenceDiagram &&\r\n                    (<div className=\"sequence-diagram\" dangerouslySetInnerHTML={{ __html: state.sequenceDiagramSvg }} />)\r\n                }\r\n\r\n            </>)}\r\n\r\n            {state.details.entityType === \"DurableEntity\" && (\r\n                <DurableEntityFields details={state.details} />\r\n            )}\r\n\r\n            <ErrorMessage state={this.props.state} />\r\n        </>);\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n    Box, Checkbox, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl,\r\n    FormControlLabel, FormGroup, FormLabel, LinearProgress, Radio, RadioGroup, Tooltip, Typography\r\n} from '@material-ui/core';\r\n\r\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\r\n\r\nimport './PurgeHistoryDialog.css';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { ErrorMessage } from './ErrorMessage';\r\nimport { EntityType, RuntimeStatus } from '../states/DurableOrchestrationStatus';\r\nimport { PurgeHistoryDialogState } from '../states/PurgeHistoryDialogState';\r\n\r\n// Dialog with parameters for purging orchestration instance history\r\n@observer\r\nexport class PurgeHistoryDialog extends React.Component<{ state: PurgeHistoryDialogState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <Dialog open={state.dialogOpen} onClose={() => { if (!state.inProgress) state.dialogOpen = false; }}>\r\n\r\n                <DialogTitle>Purge Instance History</DialogTitle>\r\n\r\n                {state.instancesDeleted === null && (\r\n                    <div>\r\n                        <DialogContent>\r\n\r\n                            {state.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                            <DialogContentText>\r\n                                WARNING: this operation drops instance states from the underlying storage and cannot be undone.\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <Typography color=\"error\" >\r\n                                        It might as well remove Durable Entities, that are still active.\r\n                                        Ensure that you specify the correct time frame!\r\n                                    </Typography>\r\n                                )}\r\n\r\n                            </DialogContentText>\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress} fullWidth>\r\n                                <FormLabel>Apply to:</FormLabel>\r\n                                <RadioGroup row\r\n                                    value={state.entityType}\r\n                                    onChange={(evt) => state.entityType = (evt.target as HTMLInputElement).value as EntityType}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"Orchestration\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Orchestrations\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        disabled={state.inProgress}\r\n                                        value={\"DurableEntity\"}\r\n                                        control={<Radio />}\r\n                                        label=\"Durable Entities\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-from-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"From (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeFrom}\r\n                                onChange={(t) => state.timeFrom = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <KeyboardDateTimePicker\r\n                                className=\"purge-history-till-input\"\r\n                                ampm={false}\r\n                                autoOk={true}\r\n                                label=\"Till (UTC)\"\r\n                                format={\"YYYY-MM-DD HH:mm:ss\"}\r\n                                variant=\"inline\"\r\n                                disabled={state.inProgress}\r\n                                value={state.timeTill}\r\n                                onChange={(t) => state.timeTill = DateTimeHelpers.momentAsUtc(t)}\r\n                            />\r\n\r\n                            <FormControl className=\"purge-history-statuses\" disabled={state.inProgress}>\r\n                                <FormLabel>With the following status:</FormLabel>\r\n\r\n                                {state.entityType === \"Orchestration\" && (\r\n                                    <FormGroup row>\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Completed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Failed\" />\r\n                                        <RuntimeStatusCheckbox state={state} runtimeStatus=\"Terminated\" />\r\n                                    </FormGroup>\r\n                                )}\r\n\r\n                                {state.entityType === \"DurableEntity\" && (\r\n                                    <FormGroup row>\r\n                                        <Tooltip title=\"Durable Entities are always in 'Running' state\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox\r\n                                                    checked={true} />}\r\n                                                label=\"Running\"\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </FormControl>\r\n\r\n                            <ErrorMessage state={state} />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} disabled={state.inProgress} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={() => state.purgeHistory()} disabled={!state.isValid || state.inProgress} color=\"secondary\">\r\n                                Purge\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n                {state.instancesDeleted !== null && (\r\n                    <div>\r\n                        <DialogContent>\r\n                            <DialogContentText className=\"success-message\">\r\n                                {state.instancesDeleted} instances were deleted.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => state.dialogOpen = false} color=\"primary\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                )}\r\n\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nclass RuntimeStatusCheckbox extends React.Component<{ state: PurgeHistoryDialogState, runtimeStatus: RuntimeStatus }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n        const runtimeStatus = this.props.runtimeStatus;\r\n\r\n        return (\r\n            <FormControlLabel\r\n                control={<Checkbox\r\n                    checked={state.getStatusIncluded(runtimeStatus)}\r\n                    onChange={(evt) => state.setStatusIncluded(runtimeStatus, evt.target.checked)} />}\r\n                label={runtimeStatus}\r\n            />\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { AppBar, Breadcrumbs, Box, Link, Toolbar, Typography } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport './Main.css';\r\n\r\nimport { LoginIcon } from './LoginIcon';\r\nimport { MainMenu } from './MainMenu';\r\nimport { MainState } from '../states/MainState';\r\nimport { Orchestrations } from './Orchestrations';\r\nimport { OrchestrationDetails } from './OrchestrationDetails';\r\nimport { PurgeHistoryDialog } from './PurgeHistoryDialog';\r\n\r\nconst logo = require('../logo.svg');\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <MuiPickersUtilsProvider utils={MomentUtils}><>\r\n\r\n                {!state.loginState && (\r\n                    <Box height={20}/>\r\n                )}\r\n                \r\n                {!!state.loginState && (\r\n                    <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                        <Toolbar>\r\n\r\n                            {state.loginState.isLoggedIn && !!state.mainMenuState && (\r\n                                <MainMenu state={state.mainMenuState} />\r\n                            )}\r\n\r\n                            <img src={logo} width=\"30px\"></img>\r\n                            <Box width={5} />\r\n\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"title-typography\">\r\n                                Durable Functions Monitor\r\n                            </Typography>\r\n\r\n                            <Breadcrumbs color=\"inherit\">\r\n                                <Link color=\"inherit\" href=\"\">\r\n                                    / instances\r\n                                </Link>\r\n                                {!!state.orchestrationDetailsState && (\r\n                                    <Typography color=\"inherit\">\r\n                                        {state.orchestrationDetailsState.orchestrationId}\r\n                                    </Typography>\r\n                                )}\r\n                            </Breadcrumbs>\r\n\r\n                            <Typography style={{ flex: 1 }} />\r\n\r\n                            <LoginIcon state={state.loginState} />\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                )}\r\n\r\n                {!!state.orchestrationsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <Orchestrations state={state.orchestrationsState} />\r\n                )}\r\n\r\n                {!!state.orchestrationDetailsState && (!state.loginState || state.loginState.isLoggedIn) && (\r\n                    <OrchestrationDetails state={state.orchestrationDetailsState} />\r\n                )}\r\n\r\n                <PurgeHistoryDialog state={state.purgeHistoryDialogState}/>\r\n\r\n            </></MuiPickersUtilsProvider>\r\n        );\r\n    }\r\n}","import axios, { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\nexport const BackendUri = process.env.REACT_APP_BACKEND_BASE_URI + process.env.REACT_APP_BACKEND_PATH;\r\n\r\n// Common IBackendClient implementation, sends HTTP requests directly\r\nexport class BackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return false; }\r\n\r\n    constructor(private _getAuthorizationHeaderAsync: () => Promise<{ Authorization: string }>) {\r\n    }\r\n\r\n    call(method: Method, url: string, data?: any): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this._getAuthorizationHeaderAsync().then(headers => {\r\n\r\n                axios.request({\r\n                    url: BackendUri + url,\r\n                    method, data, headers\r\n                }).then(r => { resolve(r.data); }, reject);\r\n            });\r\n        });\r\n    }\r\n}","import { action, observable, computed } from 'mobx'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport * as Msal from 'msal';\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\nimport { BackendUri } from '../services/BackendClient';\r\n\r\n// Login State\r\nexport class LoginState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get isLoggedIn(): boolean { return this._isLoggedIn; };\r\n\r\n    @computed\r\n    get isLoggedInAnonymously(): boolean { return !this._userName; };\r\n\r\n    @computed\r\n    get userName(): string { return this._userName; };\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    constructor() {\r\n        super();\r\n        this.login();\r\n    }\r\n\r\n    login() {\r\n        const uri = `${BackendUri}/easyauth-config`;\r\n        axios.get(uri).then(this.loginWithEasyAuthConfig, err => {\r\n            this.errorMessage = `${err.message}.${(!!err.response ? err.response.data : '')}`;\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.menuAnchorElement = undefined;\r\n        this._aadApp.logout();\r\n    }\r\n\r\n    @action.bound\r\n    getAuthorizationHeaderAsync() {\r\n\r\n        // Let's think we're on localhost and proceed with no auth\r\n        if (!this._aadApp) {\r\n            return new Promise<{ Authorization: string }>((resolve, reject) => resolve());\r\n        }\r\n\r\n        return new Promise<{ Authorization: string }>((resolve, reject) => {\r\n            // Obtaining a token to access our own AAD app\r\n            const authParams: Msal.AuthenticationParameters = {\r\n                scopes: [this._aadApp.getCurrentConfiguration().auth.clientId]\r\n            };\r\n\r\n            this._aadApp.acquireTokenSilent(authParams)\r\n                .then((authResponse) => {\r\n\r\n                    var accessToken = authResponse.accessToken;\r\n                    if (!accessToken) {\r\n                        // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/736\r\n                        // accessToken might randomly be returned as null, in which case we can probably use id_token\r\n                        // (which is supposed to be the same)\r\n                        console.log('DFM: accessToken is null, so using idToken.rawIdToken instead');\r\n                        accessToken = authResponse.idToken.rawIdToken;\r\n                    }\r\n\r\n                    resolve({ Authorization: `Bearer ${accessToken}` });\r\n\r\n                }, err => {\r\n                    // If silent token aquiring failed, then just redirecting the user back to AAD, \r\n                    // so that the page is reloaded anyway.\r\n                    // This is supposed to happen very rarely, as default refresh token lifetime is quite long.  \r\n                    console.log(`DFM: acquireTokenSilent() failed (${err}), so calling acquireTokenRedirect()...`);\r\n                    this._aadApp.acquireTokenRedirect(authParams);\r\n                });\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _isLoggedIn: boolean = false;\r\n\r\n    @observable\r\n    private _userName: string;\r\n\r\n    private _aadApp: Msal.UserAgentApplication;\r\n\r\n    @action.bound\r\n    private loginWithEasyAuthConfig(easyAuthConfigResponse: AxiosResponse<any>) {\r\n\r\n        const config = easyAuthConfigResponse.data;\r\n        if (!config.clientId) {\r\n            // Let's think we're on localhost and proceed with no auth\r\n            this._isLoggedIn = true;\r\n            return;\r\n        }\r\n\r\n        // Configuring MSAL with values received from backend\r\n        this._aadApp = new Msal.UserAgentApplication({\r\n            auth: {\r\n                clientId: config.clientId,\r\n                authority: config.authority\r\n            }\r\n        })\r\n\r\n        // Checking if it was a redirect from AAD\r\n        this._aadApp.handleRedirectCallback(() => { }, this.handleRedirectCallbackFailed);\r\n        const account = this._aadApp.getAccount();\r\n\r\n        if (!account) {\r\n            // Redirecting user to AAD. Redirect flow is more reliable (doesn't need popups enabled)\r\n            console.log('DFM: redirecting user to AAD for login...');\r\n            this._aadApp.loginRedirect();\r\n        } else {\r\n            // We've logged in successfully. Setting user name.\r\n            this._userName = account.userName;\r\n            this._isLoggedIn = true;\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    private handleRedirectCallbackFailed(authErr: Msal.AuthError, accountState: string) {\r\n        this.errorMessage = `Failed to handle login redirect. name: ${authErr.name}, message: ${authErr.message}, errorCode: ${authErr.errorCode}, errorMessage: ${authErr.errorMessage}, accountState: ${accountState}`;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\n\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\n\r\n// State of Main Menu component\r\nexport class MainMenuState extends ErrorMessageState {\r\n\r\n    @observable\r\n    menuAnchorElement?: Element;\r\n\r\n    @observable\r\n    hubName: string;\r\n    @observable\r\n    connectionString: string;\r\n    \r\n    @observable\r\n    connectionParamsDialogOpen: boolean = false;\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; }\r\n\r\n    @computed\r\n    get isReadonly(): boolean { return this._isReadOnly; }\r\n\r\n    @computed\r\n    get isDirty(): boolean {\r\n        return (this.connectionString !== this._oldConnectionString) || (this.hubName !== this._oldHubName);\r\n    }\r\n\r\n    constructor(private _backendClient: IBackendClient, private _purgeHistoryDialogState: PurgeHistoryDialogState) {\r\n        super();\r\n    }\r\n    \r\n    showConnectionParamsDialog() {\r\n        this.menuAnchorElement = undefined;\r\n\r\n        this.connectionParamsDialogOpen = true;\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('GET', '/manage-connection').then(response => {\r\n\r\n            this.connectionString = this._oldConnectionString = response.connectionString;\r\n            this.hubName = this._oldHubName = response.hubName;\r\n            this._isReadOnly = response.isReadOnly;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Load failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    saveConnectionParams() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('PUT', '/manage-connection', {\r\n            connectionString: this.connectionString !== this._oldConnectionString ? this.connectionString : '',\r\n            hubName: this.hubName\r\n        }).then(() => {\r\n        \r\n            this.connectionParamsDialogOpen = false;\r\n\r\n            alert(`Your changes were saved to local.settings.json file, but they cannot be picked up automatically. Please, restart the Function Host for them to take effect.`);\r\n\r\n        }, err => {\r\n            this.errorMessage = `Save failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    showPurgeHistoryDialog() {\r\n        this.menuAnchorElement = undefined;\r\n        \r\n        this._purgeHistoryDialogState.dialogOpen = true;\r\n    }\r\n\r\n    setWindowTitle() {\r\n        \r\n        this._backendClient.call('GET', '/about').then(response => {\r\n            document.title = `Durable Functions Monitor (${response.accountName}/${response.hubName}) v${response.version}`;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _isReadOnly: boolean = false;\r\n    \r\n    private _oldConnectionString: string;\r\n    private _oldHubName: string;\r\n}","import { observable, computed } from 'mobx'\r\nimport moment from 'moment';\r\n\r\nimport { DateTimeHelpers } from '../DateTimeHelpers';\r\nimport { IBackendClient } from '../services/IBackendClient';\r\nimport { RuntimeStatus, EntityType } from './DurableOrchestrationStatus';\r\nimport { ErrorMessageState } from './ErrorMessageState';\r\n\r\n// State of Purge History Dialog\r\nexport class PurgeHistoryDialogState extends ErrorMessageState {\r\n\r\n    @computed\r\n    get dialogOpen(): boolean { return this._dialogOpen; };\r\n    set dialogOpen(value: boolean) {\r\n        this._dialogOpen = value;\r\n\r\n        if (value) {\r\n\r\n            this._instancesDeleted = null;\r\n\r\n            this.timeFrom = moment().subtract(1, 'days').utc();\r\n            this.timeTill = moment().utc();\r\n\r\n            this._statuses = new Set<RuntimeStatus>([\"Completed\", \"Terminated\"]);\r\n\r\n            this.entityType = \"Orchestration\";\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get instancesDeleted(): number | null { return this._instancesDeleted; };\r\n\r\n    @computed\r\n    get inProgress(): boolean { return this._inProgress; };\r\n\r\n    @computed\r\n    get isValid(): boolean {\r\n        return this._statuses.size > 0 && DateTimeHelpers.isValidMoment(this.timeFrom) && DateTimeHelpers.isValidMoment(this.timeTill);\r\n    };\r\n\r\n    constructor(private _backendClient: IBackendClient) {\r\n        super();\r\n    }\r\n\r\n    purgeHistory() {\r\n\r\n        this._inProgress = true;\r\n\r\n        this._backendClient.call('POST', '/purge-history', {\r\n            entityType: this.entityType,\r\n            timeFrom: this.timeFrom.toISOString(),\r\n            timeTill: this.timeTill.toISOString(),\r\n            statuses: Array.from(this._statuses.values())\r\n        }).then(response => {\r\n\r\n            this._instancesDeleted = response.instancesDeleted;\r\n\r\n        }, err => {\r\n            this.errorMessage = `Purge history failed: ${err.message}.${(!!err.response ? err.response.data : '')} `;\r\n        }).finally(() => {\r\n            this._inProgress = false;\r\n        });\r\n    }\r\n\r\n    @observable\r\n    timeFrom: moment.Moment;\r\n    @observable\r\n    timeTill: moment.Moment;\r\n\r\n    @observable\r\n    entityType: EntityType = \"Orchestration\";\r\n\r\n    getStatusIncluded(status: RuntimeStatus) {\r\n        return this._statuses.has(status);\r\n    }\r\n\r\n    setStatusIncluded(status: RuntimeStatus, included: boolean) {\r\n        if (included) {\r\n            this._statuses.add(status);\r\n        } else {\r\n            this._statuses.delete(status);\r\n        }\r\n    }\r\n\r\n    @observable\r\n    private _statuses: Set<RuntimeStatus> = new Set<RuntimeStatus>();\r\n\r\n    @observable\r\n    private _dialogOpen: boolean = false;\r\n    \r\n    @observable\r\n    private _inProgress: boolean = false;\r\n\r\n    @observable\r\n    private _instancesDeleted: number | null = null;\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in a localStorage\r\nexport class TypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string) { }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n        localStorage.setItem(`${this._prefix}::${fieldName}`, value);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n        for (const item of items) {\r\n            if (item.value === null) {\r\n                localStorage.removeItem(`${this._prefix}::${item.fieldName}`);\r\n            } else {\r\n                localStorage.setItem(`${this._prefix}::${item.fieldName}`, item.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return localStorage.getItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n        localStorage.removeItem(`${this._prefix}::${fieldName}`);\r\n    }\r\n}\r\n","import { Method } from 'axios';\r\nimport { IBackendClient } from './IBackendClient';\r\n\r\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\r\nexport class VsCodeBackendClient implements IBackendClient {\r\n\r\n    get isVsCode(): boolean { return true; }\r\n\r\n    constructor(private _vsCodeApi: any) {\r\n\r\n        // Handling responses from VsCode\r\n        window.addEventListener('message', event => {\r\n\r\n            const message = event.data;\r\n\r\n            // handling menu commands\r\n            const requestHandler = this._handlers[message.id];\r\n            if (!!requestHandler) {\r\n\r\n                try {\r\n                    requestHandler(message.data);\r\n                } catch(err) {\r\n                    console.log('Failed to handle response from VsCode: ' + err);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // handling HTTP responses\r\n            const requestPromise = this._requests[message.id];\r\n            if (!requestPromise) {\r\n                return;\r\n            }\r\n\r\n            if (!!message.err) {\r\n                requestPromise.reject(message.err);\r\n            } else {\r\n                requestPromise.resolve(message.data);\r\n            }\r\n\r\n            delete this._requests[message.id];\r\n        });\r\n    }\r\n\r\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\r\n\r\n        const requestId = Math.random().toString();\r\n\r\n        // Sending request to VsCode\r\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._requests[requestId] = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    setPurgeHistoryHandler(handler: (data: any) => void) {\r\n        this._handlers['purgeHistory'] = handler;\r\n\r\n        // Notifying VsCode that we're ready to process messages\r\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\r\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\r\n    }\r\n\r\n    private _handlers: {\r\n        [id: string]: (data: any) => void\r\n    } = {};\r\n\r\n    private _requests: {\r\n        [id: string]: {\r\n            resolve: (value?: any) => void,\r\n            reject: (reason?: any) => void\r\n        }\r\n    } = {};\r\n}","import { ITypedLocalStorage } from './ITypedLocalStorage';\r\n\r\n// Stores field values in VsCode\r\nexport class VsCodeTypedLocalStorage<T> implements ITypedLocalStorage<T>\r\n{\r\n    constructor(private _prefix: string, private _vsCodeApi: any) { \r\n\r\n        const oldState = this._vsCodeApi.getState();\r\n        VsCodeTypedLocalStorage.State = !oldState ? {} : oldState;\r\n    }\r\n\r\n    setItem(fieldName: Extract<keyof T, string>, value: string) {\r\n\r\n        VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`] = value;\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    setItems(items: { fieldName: Extract<keyof T, string>, value: string | null }[]) {\r\n\r\n        for (const item of items) {\r\n\r\n            if (item.value === null) {\r\n                delete VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`];\r\n            } else {\r\n                VsCodeTypedLocalStorage.State[`${this._prefix}::${item.fieldName}`] = item.value;\r\n            }\r\n        }\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    getItem(fieldName: Extract<keyof T, string>): string | null {\r\n        return VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n    }\r\n\r\n    removeItem(fieldName: Extract<keyof T, string>) {\r\n\r\n        delete VsCodeTypedLocalStorage.State[`${this._prefix}::${fieldName}`];\r\n        this._vsCodeApi.setState(VsCodeTypedLocalStorage.State);\r\n    }\r\n\r\n    private static State = {};\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport { Main } from './components/Main';\r\nimport { MainState } from './states/MainState';\r\n\r\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\r\nconst appState = new MainState();\r\n\r\nReactDOM.render(\r\n    <Main state={appState}/>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n\r\nregisterServiceWorker();\r\n","import { BackendClient } from '../services/BackendClient';\r\nimport { LoginState } from './LoginState';\r\nimport { MainMenuState } from './MainMenuState';\r\nimport { OrchestrationsState } from './OrchestrationsState';\r\nimport { OrchestrationDetailsState } from './OrchestrationDetailsState';\r\nimport { PurgeHistoryDialogState } from './PurgeHistoryDialogState';\r\nimport { TypedLocalStorage } from './TypedLocalStorage';\r\nimport { VsCodeBackendClient } from '../services/VsCodeBackendClient';\r\nimport { VsCodeTypedLocalStorage } from './VsCodeTypedLocalStorage';\r\n\r\n// This method is provided by VsCode, when running inside a WebView\r\ndeclare const acquireVsCodeApi: () => any;\r\n\r\n// A global variable declared in index.html and replaced by VsCode extension\r\ndeclare const OrchestrationIdFromVsCode: string;\r\n\r\n// Main Application State\r\nexport class MainState  {\r\n    \r\n    loginState?: LoginState;    \r\n    mainMenuState?: MainMenuState;\r\n    orchestrationsState?: OrchestrationsState;\r\n    orchestrationDetailsState?: OrchestrationDetailsState;\r\n    purgeHistoryDialogState: PurgeHistoryDialogState;\r\n\r\n    constructor() {\r\n\r\n        // checking whether we're inside VsCode\r\n        var vsCodeApi: any = undefined;\r\n        try {\r\n            vsCodeApi = acquireVsCodeApi();\r\n        } catch { }\r\n\r\n        if (!!vsCodeApi) {\r\n\r\n            const backendClient = new VsCodeBackendClient(vsCodeApi);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState', vsCodeApi));\r\n            } else {\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new VsCodeTypedLocalStorage<OrchestrationsState>('OrchestrationsState', vsCodeApi));\r\n\r\n                backendClient.setPurgeHistoryHandler(() => this.purgeHistoryDialogState.dialogOpen = true);\r\n            }\r\n            \r\n        } else {\r\n\r\n            this.loginState = new LoginState();\r\n\r\n            const backendClient = new BackendClient(this.loginState.getAuthorizationHeaderAsync);\r\n\r\n            this.purgeHistoryDialogState = new PurgeHistoryDialogState(backendClient);\r\n\r\n            if (!!this.orchestrationId) {\r\n                this.orchestrationDetailsState = new OrchestrationDetailsState(this.orchestrationId,\r\n                    backendClient, \r\n                    new TypedLocalStorage<OrchestrationDetailsState>('OrchestrationDetailsState'));\r\n            } else {\r\n                this.mainMenuState = new MainMenuState(backendClient, this.purgeHistoryDialogState);\r\n                this.orchestrationsState = new OrchestrationsState(backendClient,\r\n                    new TypedLocalStorage<OrchestrationsState>('OrchestrationsState'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extracts orchestrationId from URL or from VsCode\r\n    private get orchestrationId(): string {\r\n\r\n        if (!!OrchestrationIdFromVsCode) {\r\n            return OrchestrationIdFromVsCode;\r\n        }\r\n\r\n        const uriSuffix = `/orchestrations/`;\r\n        if (!window.location.pathname.startsWith(uriSuffix)) {\r\n            return '';\r\n        }\r\n\r\n        return window.location.pathname.substr(uriSuffix.length);\r\n    }\r\n}"],"sourceRoot":""}